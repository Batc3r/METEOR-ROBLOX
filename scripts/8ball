local c = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
c.UnloadCallback = function()
    getgenv().EightBall = nil
end
local d = game:GetService("Players")
local e = game:GetService("StarterGui")
local f = game:GetService("TweenService")
local g = game:GetService("RunService")
local h = game:GetService("ReplicatedStorage")
local i = game.Players.LocalPlayer
local j = h.Packages.Knit.Services.ToolService.RF
local k = i:GetMouse()
local l = workspace.CurrentCamera
local m = game.Players.LocalPlayer.Character.Humanoid.Health
local function n(o, p)
    j.ToggleBlockSword:InvokeServer(o, p)
end
local function q(r)
    local s = game.Players.LocalPlayer:WaitForChild("Backpack"):FindFirstChild(r)
    if s and s:IsA("Tool") then
        s.Parent = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    end
end
local function t(r)
    local s = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait():FindFirstChild(r)
    if s and s:IsA("Tool") then
        s.Parent = game.Players.LocalPlayer:WaitForChild("Backpack")
    end
end
local function u(v, w, x, y)
    return Vector3.new(v.X + w.X * x, v.Y + y, v.Z + w.Z * x)
end
local z = c:CreateWindow({Name = "EightBall", Themeable = {Image = "7059346386", Credit = false}})
local A = z:CreateTab({Name = "Blatant"})
local B = A:CreateSection({Name = "Aura"})
local C = A:CreateSection({Name = "Bow Aura"})
local D = A:CreateSection({Name = "Movement", Side = "Right"})
local E = A:CreateSection({Name = "Strafe", Side = "Right"})
local F = A:CreateSection({Name = "Anti void", Side = "Right"})
local G = A:CreateSection({Name = "Anti lagback [beta]"})
local H = z:CreateTab({Name = "Closet"})
local I = H:CreateSection({Name = "Hitbox", Side = "Right"})
local J = H:CreateSection({Name = "Auto"})
local K = H:CreateSection({Name = "Lag", Side = "Right"})
local L = H:CreateSection({Name = "Aim"})
local M = z:CreateTab({Name = "Visuals"})
local N = M:CreateSection({Name = "chams"})
local O = M:CreateSection({Name = "Target hud"})
local P = M:CreateSection({Name = "Render", Side = "Right"})
local Q, R, S, T = "Closest", "PreSimulation", false, 24
B:AddDropdown(
    {
        Name = "RunService type",
        Default = "PreSimulation",
        List = {"Stepped", "PreSimulation", "Heartbeat", "RenderStepped", "PreRender", "PostSimulation"},
        Callback = function(U)
            R = U
        end
    }
)
local function V()
    local W = game:GetService("Players"):GetPlayers()
    local X = nil
    local Y = math.huge
    for Z, _ in ipairs(W) do
        local a0 = _.Character
        if
            a0 and a0:FindFirstChild("Humanoid") and a0.Humanoid.Health > 0 and
                not a0:FindFirstChildOfClass("ForceField")
         then
            local a1 =
                (a0.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
            if a1 < Y then
                Y = a1
                X = a0.HumanoidRootPart.Position
            end
        end
    end
    return X
end
local function a2(a3)
    local a4 = nil
    local a5 = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    if a3 == "Closest" then
        local a1 = math.huge
        for Z, a6 in ipairs(game.Players:GetPlayers()) do
            if
                a6 ~= game.Players.LocalPlayer and a6.Character and a6.Character:FindFirstChild("HumanoidRootPart") and
                    a6.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a6.Character:FindFirstChildOfClass("ForceField")
             then
                local a7 = (a5 - a6.Character.HumanoidRootPart.Position).Magnitude
                if a7 < a1 then
                    a4, a1 = a6, a7
                end
            end
        end
    elseif a3 == "Random" then
        local a8 = {}
        for Z, a6 in ipairs(game.Players:GetPlayers()) do
            if
                a6 ~= game.Players.LocalPlayer and a6.Character and a6.Character:FindFirstChild("HumanoidRootPart") and
                    a6.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a6.Character:FindFirstChildOfClass("ForceField")
             then
                local a7 = (a5 - a6.Character.HumanoidRootPart.Position).Magnitude
                if a7 <= T then
                    table.insert(a8, a6)
                end
            end
        end
        if #a8 > 0 then
            a4 = a8[math.random(1, #a8)]
        end
    elseif a3 == "Farthest" then
        local a9 = 0
        for Z, a6 in ipairs(game.Players:GetPlayers()) do
            if
                a6 ~= game.Players.LocalPlayer and a6.Character and a6.Character:FindFirstChild("HumanoidRootPart") and
                    a6.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a6.Character:FindFirstChildOfClass("ForceField")
             then
                local a7 = (a5 - a6.Character.HumanoidRootPart.Position).Magnitude
                if a7 > a9 and a7 <= T then
                    a4, a9 = a6, a7
                end
            end
        end
    elseif a3 == "Weakest" then
        local aa = math.huge
        for Z, a6 in ipairs(game.Players:GetPlayers()) do
            if
                a6 ~= game.Players.LocalPlayer and a6.Character and a6.Character:FindFirstChild("HumanoidRootPart") and
                    a6.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a6.Character:FindFirstChildOfClass("ForceField")
             then
                local a7 = (a5 - a6.Character.HumanoidRootPart.Position).Magnitude
                if a7 <= T and a6.Character.Humanoid.Health < aa then
                    a4, aa = a6, a6.Character.Humanoid.Health
                end
            end
        end
    elseif a3 == "Strongest" then
        local ab = 0
        for Z, a6 in ipairs(game.Players:GetPlayers()) do
            if
                a6 ~= game.Players.LocalPlayer and a6.Character and a6.Character:FindFirstChild("HumanoidRootPart") and
                    a6.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a6.Character:FindFirstChildOfClass("ForceField")
             then
                local a7 = (a5 - a6.Character.HumanoidRootPart.Position).Magnitude
                if a7 <= T and a6.Character.Humanoid.Health > ab then
                    a4, ab = a6, a6.Character.Humanoid.Health
                end
            end
        end
    end
    return a4
end
B:AddDropdown(
    {
        Name = "Targeting Mode",
        Default = "Closest",
        List = {"Closest", "Farthest", "Strongest", "Weakest", "Random"},
        Callback = function(U)
            Q = U
        end
    }
)
local function ac()
    local ad = a2(Q)
    if ad then
        local a7 =
            (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - ad.Character.HumanoidRootPart.Position).Magnitude
        if a7 <= T and ad.Character.Humanoid.Health > 0 and not ad.Character:FindFirstChildOfClass("ForceField") then
            if S then
                for Z, ae in ipairs({"WoodenSword", "Sword"}) do
                    n(true, ae)
                end
            end
            for Z, p in ipairs({"WoodenSword", "Sword"}) do
                j.AttackPlayerWithSword:InvokeServer(ad.Character, critsActive, p)
            end
        else
            if S then
                for Z, ae in ipairs({"WoodenSword", "Sword"}) do
                    n(false, ae)
                end
            end
        end
    end
end
local af
local function ag(ah)
    if ah then
        if not af then
            af =
                game:GetService("RunService")[R]:Connect(
                function()
                    pcall(ac)
                end
            )
        end
    elseif af then
        af:Disconnect()
        af = nil
    end
end
B:AddToggle({Name = "Aura", Default = false, Keybind = 1, Callback = ag})
B:AddToggle(
    {Name = "Auto block", Default = false, Callback = function(ah)
            S = ah
        end}
)
B:AddToggle(
    {Name = "Crits", Default = false, Callback = function(ah)
            critsActive = ah
        end}
)
B:AddSlider(
    {Name = "Aura Range", Min = 1, Max = 36, Default = 24, Callback = function(U)
            T = U
        end}
)
local ai
B:AddToggle(
    {
        Name = "Click Aura",
        Default = false,
        Keybind = 1,
        Callback = function(aj)
            local _ = game.Players.LocalPlayer
            local k = _:GetMouse()
            local function ak(_)
                local al, am = nil, math.huge
                for Z, an in pairs(game.Players:GetPlayers()) do
                    if an ~= _ and an.Character and an.Character:FindFirstChild("HumanoidRootPart") then
                        local a1 =
                            (_.Character.HumanoidRootPart.Position - an.Character.HumanoidRootPart.Position).Magnitude
                        if a1 < am then
                            am, al = a1, an
                        end
                    end
                end
                return al
            end
            local function ao()
                local al = ak(_)
                if al and al.Character then
                    local ap = {"WoodenSword", "Sword"}
                    for Z, p in ipairs(ap) do
                        local aq = {[1] = workspace:WaitForChild(al.Name), [2] = true, [3] = p}
                        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild(
                            "Services"
                        ):WaitForChild("ToolService"):WaitForChild("RF"):WaitForChild("AttackPlayerWithSword"):InvokeServer(
                            unpack(aq)
                        )
                    end
                end
            end
            if aj then
                ai = k.Button1Down:Connect(ao)
            else
                if ai then
                    ai:Disconnect()
                    ai = nil
                end
            end
        end
    }
)
local function ar()
    if FaceTarget then
        local as = V()
        task.wait(0.05)
        local aq = {[1] = Vector3.new(as.X, as.Y, as.Z)}
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild(
            "ToolService"
        ):WaitForChild("RF"):WaitForChild("UpdateHeadRotation"):InvokeServer(unpack(aq))
    end
end
game:GetService("RunService").Heartbeat:Connect(ar)
B:AddToggle(
    {Name = "Serverside Face", Default = false, Callback = function(ah)
            FaceTarget = ah
        end}
)
local at, au, y, av, ah = "Head", 30, 1, 0.1, false
C:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = at,
        Callback = function(aw)
            at = aw
        end
    }
)
C:AddSlider(
    {Name = "Charge time", Min = 0, Max = 50, Default = au, Callback = function(U)
            au = U
        end}
)
C:AddSlider(
    {Name = "Y Offset", Min = -15, Max = 15, Default = y, Callback = function(U)
            y = U
        end}
)
C:AddSlider(
    {Name = "Prediction", Min = 0, Max = 3.0, Default = av, Precise = 1, Callback = function(U)
            av = U
        end}
)
C:AddToggle(
    {Name = "Bow Aura", Callback = function(ax)
            ah = ax
            if ah then
                local ay = game.Players.LocalPlayer
                local function az()
                    while true do
                        if ah then
                            local a0 = ay.Character or ay.CharacterAdded:Wait()
                            local aA = a0:WaitForChild(at)
                            local aB = aA and aA.Position
                            if not aB then
                                return
                            end
                            local al, am, aC
                            for Z, _ in ipairs(game.Players:GetPlayers()) do
                                if _ ~= ay and _.Character then
                                    local aD = _.Character:FindFirstChild(at)
                                    local v = aD and aD.Position
                                    local aE = _.Character:FindFirstChildOfClass("Humanoid").RootPart.Velocity
                                    if v then
                                        local a1 = (v - aB).magnitude
                                        local aF = u(v, aE, av, y)
                                        local aG = (aF - aB).magnitude
                                        if not am or aG < am then
                                            al = _
                                            am = aG
                                            aC = aF
                                        end
                                    end
                                end
                            end
                            if al and aC then
                                q("DefaultBow")
                                game.Players.LocalPlayer.Character.DefaultBow.__comm__.RF.Fire:InvokeServer(aC, au)
                                t("DefaultBow")
                            end
                        end
                        task.wait(3.1)
                    end
                end
                coroutine.wrap(az)()
            end
        end}
)
local ah = false
local aH = 10
local aI = 20
local aJ = 0.3
local aK = 0.001
local ai
local aL = false
local function aM(aN)
    aK = aK + aN
    if aK < aJ then
        return
    end
    aK = 0
    local d = game:GetService("Players")
    local _ = d.LocalPlayer
    local a0 = _.Character
    if not a0 then
        return
    end
    local aO = a0:FindFirstChild("Humanoid")
    if not aO then
        return
    end
    local aP = a0:FindFirstChild("HumanoidRootPart")
    if not aP then
        return
    end
    local aQ = aP.CFrame
    local a1 = (aQ.Position - lastValidPosition.Position).Magnitude
    if a1 > aH and a1 < aI then
        local aE = aO.MoveDirection * aO.WalkSpeed
        local aR = lastValidPosition.Position + aE * aJ
        if (aQ.Position - aR).Magnitude > aH then
            a0:SetPrimaryPartCFrame(lastValidPosition)
        else
            lastValidPosition = aQ
        end
    else
        lastValidPosition = aQ
    end
    if aL then
        local aS = aP.Position
        local aT = lastValidPosition.Position
        local aU = (aS - aT).Magnitude
        if aU > aI then
            local aV = (aS - aT).unit
            aP.CFrame = CFrame.new(aT + aV * aI)
        end
    end
end
G:AddToggle(
    {Name = "Anti lagback", Default = false, Callback = function(ax)
            ah = ax
            if ah then
                local d = game:GetService("Players")
                local g = game:GetService("RunService")
                local _ = d.LocalPlayer
                local a0 = _.Character or _.CharacterAdded:Wait()
                lastValidPosition = a0.PrimaryPart.CFrame
                ai = g.Heartbeat:Connect(aM)
            else
                if ai then
                    ai:Disconnect()
                    ai = nil
                end
            end
        end}
)
G:AddToggle(
    {Name = "Area Lock", Default = false, Callback = function(aW)
            aL = aW
        end}
)
G:AddSlider(
    {
        Name = "Lag Back Threshold",
        Min = 0,
        Max = 30,
        Default = aH,
        Increment = 0.1,
        ValueName = "studs",
        Callback = function(U)
            aH = U
        end
    }
)
G:AddSlider(
    {
        Name = "Max Prevention Distance",
        Min = 0,
        Max = 50,
        Default = aI,
        Increment = 0.1,
        ValueName = "studs",
        Callback = function(U)
            aI = U
        end
    }
)
G:AddSlider(
    {
        Name = "Update Delay",
        Min = 0,
        Max = 1,
        Default = aJ,
        Increment = 0.01,
        ValueName = "seconds",
        Callback = function(U)
            aJ = U
        end
    }
)
local aX, aY, aZ, a_, b0, b1 = 1.0, false, false, 1.0 / 200, false, false
local function b2()
    if aZ then
        b0 = true
        if b1 then
            b1:Disconnect()
        end
        b1 =
            game:GetService("RunService").Stepped:Connect(
            function()
                if not b0 then
                    return
                end
                local b3 = a_
                if aY and game.Players.LocalPlayer:GetAttribute("Blocking") == true then
                    b3 = b3 * aX
                end
                local a0 = game.Players.LocalPlayer.Character
                if a0 and a0:FindFirstChild("HumanoidRootPart") then
                    a0.HumanoidRootPart.CFrame = a0.HumanoidRootPart.CFrame + a0.Humanoid.MoveDirection * b3
                end
            end
        )
    else
        b0 = false
        if b1 then
            b1:Disconnect()
        end
    end
end
D:AddSlider(
    {Name = "Block speed", Min = 1, Max = 2.20, Value = aX, Precise = 2, Callback = function(U)
            aX = U
        end}
)
D:AddToggle(
    {Name = "Block noslow", Value = aY, Callback = function(ah)
            aY = ah
        end}
)
D:AddToggle(
    {Name = "Speed", Value = aZ, Keybind = 1, Callback = function(ah)
            aZ = ah
            b2()
        end}
)
D:AddSlider(
    {Name = "Speed", Min = 0, Max = 50, Value = a_ * 200, Callback = function(b4, b5)
            a_ = b4 / 200
            if aZ then
                b2()
            end
        end}
)
game.Players.LocalPlayer.CharacterAdded:Connect(
    function()
        b2()
    end
)
D:AddSlider(
    {Name = "Gravity", Min = 0, Max = 192, Callback = function(b4, b5)
            workspace.Gravity = b4
        end}
)
local b6, b7, b8 = {}, nil, false
local function b9()
    for Z, aA in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if aA:IsA("BasePart") and aA.CanCollide then
            b6[aA] = true
            aA.CanCollide = false
        end
    end
end
D:AddToggle(
    {Name = "Phase", Value = b8, Keybind = 1, Callback = function(ah)
            b8 = ah
            if ah then
                b7 = game:GetService("RunService").Stepped:Connect(b9)
            else
                if b7 then
                    b7:Disconnect()
                end
                for aA in pairs(b6) do
                    if aA then
                        aA.CanCollide = true
                    end
                end
                table.clear(b6)
            end
        end}
)
local ba, bb = false, 0.80
D:AddToggle(
    {Name = "Air Check", Value = ba, Callback = function(ah)
            ba = ah
        end}
)
D:AddToggle(
    {Name = "Bhop", Value = BhopActive, Keybind = 1, Callback = function(ah)
            BhopActive = ah
            if ah then
                while ah do
                    if
                        not ba or
                            game.Players.LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall
                     then
                        game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(
                            Enum.HumanoidStateType.Jumping
                        )
                        task.wait(bb)
                    end
                    if not BhopActive then
                        break
                    end
                    task.wait()
                end
            end
        end}
)
D:AddSlider(
    {Name = "Bhop delay", Min = 0, Max = 1, Precise = 2, Value = bb, Callback = function(b4, b5)
            bb = b4
        end}
)
local ah = false
local bc = 0
D:AddToggle(
    {
        Name = "Derp",
        Default = false,
        Callback = function(ax)
            ah = ax
            if ah then
                local d = game:GetService("Players")
                local f = game:GetService("TweenService")
                local g = game:GetService("RunService")
                local function bd(a0)
                    local be = a0:WaitForChild("HumanoidRootPart")
                    local bf = TweenInfo.new(0, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                    local bg = 0.01
                    local bh = 0
                    local function bi()
                        bh = (bh + bc) % (2 * math.pi)
                        local bj = bh
                        local bk = math.cos(bj) * bg
                        local bl = math.sin(bj) * bg
                        local v = be.Position + Vector3.new(bk, 0, bl)
                        local bm = (v - be.Position).Unit
                        local bn = CFrame.new(be.Position, be.Position + bm)
                        local bo = f:Create(be, bf, {CFrame = bn})
                        bo:Play()
                    end
                    local bp
                    bp =
                        g.Heartbeat:Connect(
                        function()
                            if ah then
                                bi()
                            else
                                bp:Disconnect()
                            end
                        end
                    )
                end
                local _ = d.LocalPlayer
                local a0 = _.Character or _.CharacterAdded:Wait()
                bd(a0)
                _.CharacterAdded:Connect(
                    function(bq)
                        if ah then
                            bd(bq)
                        end
                    end
                )
            end
        end
    }
)
D:AddSlider(
    {Name = "Derp spin speed", Min = 0, Max = 30, Precise = 2, Default = bc, Callback = function(U)
            bc = U
        end}
)
local br = false
local bs
local function bi(a0)
    if a0:FindFirstChild("HumanoidRootPart") then
        local bt = a0.HumanoidRootPart.Position
        local y = a0.Humanoid.HipHeight - -1
        bs.Position = Vector3.new(bt.X, bt.Y - y, bt.Z)
    end
end
D:AddToggle(
    {Name = "Fly", Value = br, Keybind = 1, Callback = function(ah)
            br = ah
            local _ = game.Players.LocalPlayer
            local a0 = _.Character or _.CharacterAdded:Wait()
            if ah then
                bs = Instance.new("Part")
                bs.Size = Vector3.new(2, 0.1, 2)
                bs.Anchored = true
                bs.CanCollide = true
                bs.Transparency = 1
                bs.BrickColor = BrickColor.new("Medium stone grey")
                bs.Parent = game.Workspace
                while br do
                    bi(a0)
                    task.wait()
                end
            else
                if bs then
                    bs:Destroy()
                end
            end
        end}
)
local bu, bv = false, 0.02
local function bw(bx, by, bz)
    local bA, bB, bC = math.clamp, Vector3.new, tick()
    local bD = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if bD then
        bD.Anchored = true
    end
    while tick() - bC <= bv do
        if bD then
            bD.Velocity = bB(bA(bD.Velocity.X, -bx, bx), bA(bD.Velocity.Y, -by, by), bA(bD.Velocity.Z, -bz, bz))
        end
        task.wait()
    end
    if bD then
        bD.Anchored = false
    end
end
local function bE(bF)
    if bu and m and bF < m then
        bw(0, 0, 0)
    end
    m = bF
end
local function bG()
    while bu do
        bE(game.Players.LocalPlayer.Character.Humanoid.Health)
        task.wait(0.03)
    end
end
game.Players.LocalPlayer.Character.Humanoid.HealthChanged:Connect(bE)
D:AddToggle(
    {Name = "Antikb", Default = false, Callback = function(U)
            bu = U
            if bu then
                spawn(bG)
            end
        end}
)
D:AddSlider(
    {Name = "Anti kb no-move", Min = 0, Max = 1, Precise = 2, Default = 0.02, Callback = function(U)
            bv = U
        end}
)
local bH = false
local bI = 20
local bJ = 20
local bK, bL, bM
local function bN()
    local am, bO = math.huge, nil
    local _ = game.Players.LocalPlayer
    local a0 = _.Character or _.CharacterAdded:Wait()
    for Z, an in pairs(game:GetService("Players"):GetPlayers()) do
        local bP = an.Character
        local bQ = bP and bP:FindFirstChild("HumanoidRootPart")
        if an ~= _ and bQ and bP.Humanoid.Health > 0 then
            local a1 = (a0.HumanoidRootPart.Position - bQ.Position).magnitude
            if a1 < am and a1 <= bJ then
                am, bO = a1, an
            end
        end
    end
    return bO
end
local function bi()
    local _ = game.Players.LocalPlayer
    local a0 = _.Character
    local be = a0 and a0:FindFirstChild("HumanoidRootPart")
    if be and bK and bK.Character then
        local bR = bK.Character:FindFirstChild("HumanoidRootPart")
        if bR and bK.Character.Humanoid.Health > 0 then
            local v = bR.Position
            if (be.Position - v).magnitude <= bJ then
                task.wait(0.0195)
                if bK ~= bL then
                    if _:GetAttribute("Blocking") == true then
                        _:SetAttribute("Blocking", false)
                        task.wait(0.068)
                        be.CFrame = CFrame.new(be.Position):lerp(CFrame.new(v), bI * 0.01)
                        _:SetAttribute("Blocking", true)
                    else
                        be.CFrame = CFrame.new(be.Position):lerp(CFrame.new(v), bI * 0.01)
                    end
                    bL = bK
                else
                    be.CFrame = CFrame.new(be.Position):lerp(CFrame.new(v), bI * 0.01)
                end
            else
                bK = nil
            end
        else
            bK = nil
        end
    else
        bK = bN()
    end
end
E:AddToggle(
    {Name = "Strafe", Keybind = 1, Default = false, Callback = function(U)
            bH = U
            if U then
                bM = game:GetService("RunService").RenderStepped:Connect(bi)
            elseif bM then
                bM:Disconnect()
                bM = nil
            end
        end}
)
E:AddSlider(
    {Name = "Follow Speed", Min = 1, Max = 100, Precise = 1, Value = bI, Callback = function(b4)
            bI = b4
        end}
)
E:AddSlider(
    {Name = "Max Target Distance", Min = 1, Max = 100, Value = bJ, Callback = function(b4)
            bJ = b4
        end}
)
local bS
F:AddToggle(
    {Name = "Antivoid", Value = false, Callback = function(ah)
            if ah then
                bS = Instance.new("Part")
                bS.Name = "Antivoid"
                bS.Position = Vector3.new(0, -150, 0)
                bS.Size = Vector3.new(1000, 1, 1000)
                bS.Anchored = true
                bS.CanCollide = true
                bS.Transparency = 1
                bS.BrickColor = BrickColor.new("Medium stone grey")
                bS.Parent = game.Workspace
            else
                local bT = game.Workspace:FindFirstChild("Antivoid")
                if bT then
                    bT:Destroy()
                end
            end
        end}
)
F:AddSlider(
    {Name = "Antivoid Transparency", Value = 0, Min = 0, Max = 1, Precise = 1, Callback = function(bU)
            if bS then
                bS.Transparency = bU
            end
        end}
)
local bV, bW, bX, bY, bZ, b_, c0, c1 = 1, 1, 1, false, nil, 0.5, Enum.Material.Neon, Color3.fromRGB(225, 160, 255)
I:AddSlider(
    {Name = "X axis", Min = 1, Max = 10, Callback = function(U)
            bV = U
        end}
)
I:AddSlider(
    {Name = "Y axis", Min = 1, Max = 10, Callback = function(U)
            bW = U
        end}
)
I:AddSlider(
    {Name = "Z axis", Min = 1, Max = 10, Callback = function(U)
            bX = U
        end}
)
I:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Callback = function(U)
            b_ = U
        end}
)
I:AddDropdown(
    {
        Name = "Material",
        List = {"Plastic", "SmoothPlastic", "Neon", "ForceField", "Glass"},
        Default = "Neon",
        Callback = function(aw)
            if aw == "Plastic" then
                c0 = Enum.Material.Plastic
            elseif aw == "SmoothPlastic" then
                c0 = Enum.Material.SmoothPlastic
            elseif aw == "Neon" then
                c0 = Enum.Material.Neon
            elseif aw == "ForceField" then
                c0 = Enum.Material.ForceField
            elseif aw == "Glass" then
                c0 = Enum.Material.Glass
            end
        end
    }
)
I:AddColorPicker(
    {Name = "Color", Default = c1, Callback = function(c2)
            c1 = c2
        end}
)
I:AddToggle(
    {Name = "Hitbox Visual", Callback = function(ah)
            bY = ah
        end}
)
I:AddToggle(
    {
        Name = "Hitbox",
        Callback = function(ah)
            if ah then
                local function c3()
                    bZ =
                        game:GetService("RunService").RenderStepped:Connect(
                        function()
                            for Z, _ in ipairs(game:GetService("Players"):GetPlayers()) do
                                if _.Name ~= game:GetService("Players").LocalPlayer.Name then
                                    pcall(
                                        function()
                                            local be = _.Character and _.Character:FindFirstChild("HumanoidRootPart")
                                            if be then
                                                be.Size = Vector3.new(bV, bW, bX)
                                                be.Transparency = bY and b_ or 1
                                                be.Material = c0
                                                be.Color = c1
                                                be.CanCollide = false
                                            end
                                        end
                                    )
                                end
                            end
                        end
                    )
                end
                c3()
            else
                if bZ then
                    bZ:Disconnect()
                    bZ = nil
                end
                for Z, _ in ipairs(game:GetService("Players"):GetPlayers()) do
                    if _.Name ~= game:GetService("Players").LocalPlayer.Name then
                        pcall(
                            function()
                                local be = _.Character and _.Character:FindFirstChild("HumanoidRootPart")
                                if be then
                                    be.Size = Vector3.new(2, 2, 2)
                                    be.Transparency = 1
                                    be.Material = Enum.Material.Plastic
                                    be.CanCollide = false
                                end
                            end
                        )
                    end
                end
            end
        end
    }
)
local c4, c5, c6 = false, false, 18
J:AddToggle(
    {Name = "Auto Clicker", Keybind = 1, Callback = function(ah)
            c4 = ah
            if ah then
                c5 = true
                while c4 and c5 do
                    mouse1click()
                    task.wait(1 / c6)
                end
            else
                c5 = false
            end
        end}
)
J:AddSlider(
    {Name = "CPS", Min = 1, Max = 50, Def = c6, Callback = function(bU)
            c6 = bU
        end}
)
local c7, k, c8, c9 = game:GetService("UserInputService"), game.Players.LocalPlayer:GetMouse(), false, false
local ai
J:AddToggle(
    {
        Name = "Double click",
        Callback = function(ah)
            c9 = ah
            if ah then
                ai =
                    c7.InputBegan:Connect(
                    function(ca, cb)
                        if not cb and ca.UserInputType == Enum.UserInputType.MouseButton1 and not c8 then
                            task.wait(0.1)
                            c8 = true
                            mouse1click()
                            c8 = false
                        end
                    end
                )
            elseif ai then
                ai:Disconnect()
            end
        end
    }
)
J:AddToggle(
    {
        Name = "Trigger bot",
        Keybind = 1,
        Callback = function(ah)
            triggerbotActive = ah
            local cc
            local cd = 0
            local minInterval = 1 / cpslimit
            local function ce(cf)
                for Z, _ in pairs(game.Players:GetPlayers()) do
                    if _.Character and cf and cf:IsDescendantOf(_.Character) then
                        return true
                    end
                end
                return false
            end
            if ah then
                cc =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if ce(game.Players.LocalPlayer:GetMouse().Target) then
                            local cg = tick()
                            if cg - cd >= minInterval then
                                cd = cg
                                mouse1press()
                                task.wait()
                                mouse1release()
                            end
                        end
                    end
                )
                getgenv().disable = function()
                    if cc then
                        warn("Disconnecting:", cc)
                        cc:Disconnect()
                        cc = nil
                    end
                    getgenv().disable = nil
                end
            else
                if getgenv().disable then
                    getgenv().disable()
                end
            end
        end
    }
)
J:AddSlider(
    {Name = "CPS limit", Min = 1, Max = 50, Def = cpslimit, Callback = function(bU)
            cpslimit = bU
            minInterval = 1 / cpslimit
        end}
)
local ch, ci, cj, ck, cl = "None", 0, 0, 0, 0
local function cm(U)
    settings():GetService("NetworkSettings").IncomingReplicationLag = U
end
K:AddDropdown(
    {
        Name = "Method",
        List = {"ReplicationLag", "Axis", "None"},
        Default = ch,
        Callback = function(aw)
            ch = aw
            if ch == "ReplicationLag" then
                getgenv().Axis = false
                cm(ci)
            elseif ch == "Axis" then
                getgenv().Axis = true
                getgenv().Z = cl
                getgenv().Y = ck
                getgenv().X = cj
                game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if getgenv().Axis then
                            local cn = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity =
                                Vector3.new(getgenv().X, getgenv().Y, getgenv().Z)
                            game:GetService("RunService").RenderStepped:Wait()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = cn
                        end
                    end
                )
                cm(0)
            end
        end
    }
)
K:AddSlider(
    {Name = "Client Lag", Min = 0, Max = 10, Precise = 2, Def = ci, Callback = function(bU)
            ci = bU
            if ch == "ReplicationLag" then
                cm(ci)
            end
        end}
)
K:AddSlider(
    {Name = "Axis Lag x", Min = 0, Max = 500, Def = cj, Callback = function(bU)
            cj = bU
        end}
)
K:AddSlider(
    {Name = "Axis Lag y", Min = 0, Max = 500, Def = ck, Callback = function(bU)
            ck = bU
        end}
)
K:AddSlider(
    {Name = "Axis Lag z", Min = 0, Max = 500, Def = cl, Callback = function(bU)
            cl = bU
        end}
)
local co, cp, cq, cr, at = false, 1, 30, 30, "Head"
local function cs(ct, cu, cv, cw)
    return ct:Lerp(cu, cv * cw)
end
local function cx(aN)
    if co then
        local cy = nil
        local Y = math.huge
        local ay = game:GetService("Players").LocalPlayer
        local cz = ay.Character
        if cz then
            local cA = cz:FindFirstChild(at).Position
            local cB = cz:FindFirstChild(at).CFrame.lookVector
            for Z, _ in ipairs(game:GetService("Players"):GetPlayers()) do
                if _ ~= ay then
                    local cC = _.Character
                    if cC then
                        local cD = cC:FindFirstChild(at) and cC:FindFirstChild(at).Position
                        if cD then
                            local a1 = (cA - cD).magnitude
                            if a1 < Y and a1 <= cq then
                                local cE = (cD - cA).unit
                                local bj = math.acos(cB:Dot(cE)) * 180 / math.pi
                                if bj <= cr then
                                    Y = a1
                                    cy = _
                                end
                            end
                        end
                    end
                end
            end
        end
        if cy then
            local cF = game:GetService("Workspace").CurrentCamera.CFrame
            local cG = cy.Character:FindFirstChild(at) and cy.Character:FindFirstChild(at).Position
            if cG then
                local cH = CFrame.new(cF.Position, cG)
                local cI = cs(cF, cH, aN, cp)
                game:GetService("Workspace").CurrentCamera.CFrame = cI
            end
        end
    end
end
L:AddToggle(
    {Name = "Aim Assist", Keybind = 1, Callback = function(ah)
            co = ah
        end}
)
L:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = at,
        Callback = function(aw)
            at = aw
        end
    }
)
L:AddSlider(
    {Name = "Smoothness", Min = 1, Max = 25, Default = 1, Precise = 2, Callback = function(U)
            cp = U
        end}
)
L:AddSlider(
    {Name = "Range", Min = 5, Max = 100, Default = 30, Callback = function(U)
            cq = U
        end}
)
L:AddSlider(
    {Name = "Aim fov", Min = 0, Max = 360, Default = 30, Callback = function(U)
            cr = U
        end}
)
game:GetService("RunService").RenderStepped:Connect(
    function(aN)
        cx(aN)
    end
)
local cJ = 40
O:AddSlider(
    {Name = "Hide distance", Min = 0, Max = 250, Value = cJ, Callback = function(U)
            cJ = U
        end}
)
O:AddToggle(
    {
        Name = "Target Hud",
        Callback = function(ah)
            if ah then
                local d = game:GetService("Players")
                local g = game:GetService("RunService")
                local f = game:GetService("TweenService")
                local cK = game:GetService("UserInputService")
                local i = d.LocalPlayer
                local function cL(cM, cN, cO)
                    local cP = Instance.new(cM)
                    for cQ, U in pairs(cN) do
                        cP[cQ] = U
                    end
                    cP.Parent = cO
                    return cP
                end
                local function cR(cS)
                    local cT = workspace.CurrentCamera.ViewportSize
                    local cU = cS.Size
                    cS.Position = UDim2.new(0.5, -cU.X.Offset / 2, 0.5, -cU.Y.Offset / 2)
                end
                local cV = cL("ScreenGui", {Name = "TargetHUD"}, i.PlayerGui)
                local cW =
                    cL(
                    "Frame",
                    {
                        Size = UDim2.new(0, 280, 0, 130),
                        BackgroundColor3 = Color3.new(0.1, 0.1, 0.1),
                        BorderSizePixel = 0,
                        Draggable = true
                    },
                    cV
                )
                cL("UICorner", {CornerRadius = UDim.new(0, 10)}, cW)
                local cX =
                    cL(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, 0, 0, 35),
                        Position = UDim2.new(0, 0, 0, 5),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 22,
                        Font = Enum.Font.SourceSansBold
                    },
                    cW
                )
                local cY =
                    cL(
                    "Frame",
                    {
                        Size = UDim2.new(0.92, 0, 0, 20),
                        Position = UDim2.new(0.04, 0, 0.38, 0),
                        BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
                        BorderSizePixel = 0
                    },
                    cW
                )
                cL("UICorner", {CornerRadius = UDim.new(0, 4)}, cY)
                local cZ =
                    cL(
                    "Frame",
                    {Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.new(1, 1, 1), BorderSizePixel = 0},
                    cY
                )
                cL("UICorner", {CornerRadius = UDim.new(0, 4)}, cZ)
                local c_ =
                    cL(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(0, 0, 0),
                        TextSize = 18,
                        Font = Enum.Font.SourceSansBold
                    },
                    cY
                )
                local d0 =
                    cL(
                    "TextLabel",
                    {
                        Size = UDim2.new(0, 110, 0, 25),
                        Position = UDim2.new(0, 10, 1, -30),
                        BackgroundTransparency = 0.5,
                        BackgroundColor3 = Color3.new(0, 0.5, 1),
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 16,
                        Font = Enum.Font.SourceSansBold,
                        TextXAlignment = Enum.TextXAlignment.Center
                    },
                    cW
                )
                cL("UICorner", {CornerRadius = UDim.new(0, 5)}, d0)
                local d1 =
                    cL(
                    "TextLabel",
                    {
                        Size = UDim2.new(0, 110, 0, 25),
                        Position = UDim2.new(1, -120, 1, -30),
                        BackgroundTransparency = 0.5,
                        BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 16,
                        Font = Enum.Font.SourceSansBold,
                        TextXAlignment = Enum.TextXAlignment.Center
                    },
                    cW
                )
                cL("UICorner", {CornerRadius = UDim.new(0, 5)}, d1)
                cR(cW)
                local d2 = false
                local d3 = nil
                local d4 = nil
                local d5 = cW.Position
                local d6 = nil
                local function d7(ca)
                    d2 = true
                    d3 = ca.Position
                    d4 = cW.Position
                    if d6 then
                        d6:Cancel()
                    end
                end
                local function d8(ca)
                    if d2 then
                        local d9 = ca.Position - d3
                        local da = UDim2.new(d4.X.Scale, d4.X.Offset + d9.X, d4.Y.Scale, d4.Y.Offset + d9.Y)
                        cW.Position = da
                    end
                end
                local function db()
                    d2 = false
                    local da = cW.Position
                    d6 = f:Create(cW, TweenInfo.new(0.3), {Position = da})
                    d6:Play()
                end
                cW.InputBegan:Connect(
                    function(ca)
                        if ca.UserInputType == Enum.UserInputType.MouseButton1 then
                            d7(ca)
                        end
                    end
                )
                cK.InputChanged:Connect(
                    function(ca)
                        if d2 and ca.UserInputType == Enum.UserInputType.MouseMovement then
                            d8(ca)
                        end
                    end
                )
                cK.InputEnded:Connect(
                    function(ca)
                        if ca.UserInputType == Enum.UserInputType.MouseButton1 then
                            db()
                        end
                    end
                )
                local function dc()
                    local al, am = nil, math.huge
                    for Z, _ in pairs(d:GetPlayers()) do
                        if _ ~= i and _.Character and _.Character:FindFirstChild("HumanoidRootPart") then
                            local dd = i.Character or i.CharacterAdded:Wait()
                            local de = dd:WaitForChild("HumanoidRootPart")
                            local a1 = (_.Character.HumanoidRootPart.Position - de.Position).Magnitude
                            if a1 <= cJ and a1 < am then
                                al, am = _, a1
                            end
                        end
                    end
                    if al then
                        local df = al.Character:FindFirstChild("Humanoid")
                        local dd = i.Character or i.CharacterAdded:Wait()
                        local dg = dd:FindFirstChild("Humanoid")
                        cX.Text = al.Name
                        d0.Text = string.format("Distance %.1f", am)
                        if df then
                            c_.Text = tostring(math.floor(df.Health))
                            f:Create(cZ, TweenInfo.new(0.3), {Size = UDim2.new(df.Health / df.MaxHealth, 0, 1, 0)}):Play(

                            )
                        else
                            c_.Text = "N/A"
                            cZ.Size = UDim2.new(0, 0, 1, 0)
                        end
                        if dg and df then
                            local dh = dg.Health / dg.MaxHealth
                            local di = df.Health / df.MaxHealth
                            if dh > di then
                                d1.Text = "Winning"
                                d1.BackgroundColor3 = Color3.new(0, 0.7, 0)
                            elseif dh < di then
                                d1.Text = "Losing"
                                d1.BackgroundColor3 = Color3.new(0.7, 0, 0)
                            else
                                d1.Text = "Even"
                                d1.BackgroundColor3 = Color3.new(0.7, 0.7, 0)
                            end
                        else
                            d1.Text = "N/A"
                            d1.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
                        end
                        cW.Visible = true
                    else
                        cW.Visible = false
                    end
                end
                g.RenderStepped:Connect(dc)
            else
                if i.PlayerGui:FindFirstChild("TargetHUD") then
                    i.PlayerGui.TargetHUD:Destroy()
                end
            end
        end
    }
)
P:AddToggle(
    {Name = "Hide guis", Callback = function(dj)
            if dj then
                game.Players.LocalPlayer.PlayerGui.MainGui["BRIDGE DUEL"].Visible = false
            else
                game.Players.LocalPlayer.PlayerGui.MainGui["BRIDGE DUEL"].Visible = true
            end
        end}
)
local dk = {Ambient = nil, OutdoorAmbient = nil, FogColor = nil, FogStart = nil, FogEnd = nil, PartColors = {}}
local dl, dm, dn = Color3.new(225, 160, 255), Color3.fromRGB(225, 160, 255), Vector3.new(2, 1, 3)
local dp = false
local function dq(ah)
    local dr = game:GetService("Lighting")
    if ah then
        dk.Ambient = dr.Ambient
        dk.OutdoorAmbient = dr.OutdoorAmbient
        dk.FogColor = dr.FogColor
        dk.FogStart = dr.FogStart
        dk.FogEnd = dr.FogEnd
        for Z, aA in ipairs(workspace:GetDescendants()) do
            if aA:IsA("BasePart") then
                dk.PartColors[aA] = aA.Color
            end
        end
        dr.Ambient = dl
        dr.OutdoorAmbient = dl
        dr.FogColor = dl
        dr.FogStart = dk.FogStart or 0
        dr.FogEnd = dk.FogEnd or 100
        for Z, aA in ipairs(workspace:GetDescendants()) do
            if aA:IsA("BasePart") then
                aA.Color = dl
            end
        end
    else
        dr.Ambient = dk.Ambient
        dr.OutdoorAmbient = dk.OutdoorAmbient
        dr.FogColor = dk.FogColor
        dr.FogStart = dk.FogStart
        dr.FogEnd = dk.FogEnd
        for Z, aA in ipairs(workspace:GetDescendants()) do
            if aA:IsA("BasePart") and dk.PartColors[aA] then
                aA.Color = dk.PartColors[aA]
            end
        end
    end
end
P:AddToggle(
    {Name = "Ambient", Callback = function(ah)
            dq(ah)
        end}
)
local ds = {}
P:AddToggle(
    {Name = "Low gfx", Callback = function(dj)
            local workspace = game:GetService("Workspace")
            for Z, aA in ipairs(workspace:GetDescendants()) do
                if aA:IsA("BasePart") then
                    if dj then
                        ds[aA] = aA.Material
                        aA.Material = Enum.Material.Ice
                    else
                        aA.Material = ds[aA] or aA.Material
                        ds[aA] = nil
                    end
                end
            end
        end}
)
P:AddToggle(
    {
        Name = "Water mark",
        Value = false,
        Callback = function(U)
            local d = game:GetService("Players")
            local f = game:GetService("TweenService")
            local g = game:GetService("RunService")
            local function dt(_)
                local du = _:WaitForChild("PlayerGui")
                local dv = Instance.new("ScreenGui")
                dv.Name = "GameSenseWatermark"
                dv.ResetOnSpawn = false
                local cS = Instance.new("Frame")
                cS.Size = UDim2.new(0, 280, 0, 25)
                cS.Position = UDim2.new(0, -280, 0, 10)
                cS.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
                cS.BorderSizePixel = 0
                cS.Parent = dv
                local dw = Instance.new("UICorner")
                dw.CornerRadius = UDim.new(0, 4)
                dw.Parent = cS
                local dx = Instance.new("Frame")
                dx.Size = UDim2.new(1, 0, 0, 2)
                dx.Position = UDim2.new(0, 0, 0, 0)
                dx.BorderSizePixel = 0
                dx.Parent = cS
                local dy = Instance.new("UIGradient")
                dy.Color =
                    ColorSequence.new {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(128, 0, 128))
                }
                dy.Parent = dx
                local dz = Instance.new("ImageLabel")
                dz.Size = UDim2.new(0, 60, 0, 60)
                dz.Position = UDim2.new(0, -15, 0.5, -30)
                dz.BackgroundTransparency = 1
                dz.Image = "rbxassetid://18335445948"
                dz.Parent = cS
                local dA = Instance.new("TextLabel")
                dA.Size = UDim2.new(1, -60, 1, 0)
                dA.Position = UDim2.new(0, 40, 0, 0)
                dA.BackgroundTransparency = 1
                dA.Font = Enum.Font.Code
                dA.TextColor3 = Color3.fromRGB(255, 255, 255)
                dA.TextSize = 16
                dA.Text = "8 ball | 00:00:00"
                dA.TextXAlignment = Enum.TextXAlignment.Left
                dA.Parent = cS
                dv.Parent = du
                local bf = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local dB = f:Create(cS, bf, {Position = UDim2.new(0, 10, 0, 10)})
                dB:Play()
                local bC = tick()
                local ai
                ai =
                    g.Heartbeat:Connect(
                    function()
                        if dv.Parent == nil then
                            ai:Disconnect()
                            return
                        end
                        local dC = tick() - bC
                        local dD = math.floor(dC / 3600)
                        local dE = math.floor(dC % 3600 / 60)
                        local dF = math.floor(dC % 60)
                        dA.Text = string.format("8 ball | %02d:%02d:%02d", dD, dE, dF)
                    end
                )
            end
            local function dG(_)
                local du = _:FindFirstChild("PlayerGui")
                if du then
                    local dv = du:FindFirstChild("GameSenseWatermark")
                    if dv then
                        local cS = dv:FindFirstChildOfClass("Frame")
                        if cS then
                            local bf = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                            local dB = f:Create(cS, bf, {Position = UDim2.new(0, -280, 0, 10)})
                            dB:Play()
                            dB.Completed:Connect(
                                function()
                                    dv:Destroy()
                                end
                            )
                        else
                            dv:Destroy()
                        end
                    end
                end
            end
            if U then
                for Z, _ in ipairs(d:GetPlayers()) do
                    dt(_)
                end
                d.PlayerAdded:Connect(dt)
            else
                for Z, _ in ipairs(d:GetPlayers()) do
                    dG(_)
                end
                d.PlayerAdded:Connect(dG)
            end
        end
    }
)
local function dH()
    local dI = game:GetService("Workspace").Camera:FindFirstChild("Viewmodel")
    if dI then
        local dJ = dI:FindFirstChild("WoodenSword")
        if dJ then
            local dK = dJ:FindFirstChild("MainPart")
            if dK then
                return dK:FindFirstChild("Mesh")
            end
        end
    end
    return nil
end
P:AddToggle(
    {Name = "Custom sword", Callback = function(ah)
            dp = ah
            if not dp then
                local dL = dH()
                if dL then
                    dL.Offset = Vector3.new(0, 0, 0)
                end
            end
        end}
)
game:GetService("RunService").Heartbeat:Connect(
    function()
        if dp then
            local dL = dH()
            if dL then
                dL.Offset = dn
            end
        end
    end
)
local function dM()
    if dp then
        local dL = dH()
        if dL then
            dL.Offset = dn
        end
    end
end
P:AddSlider(
    {Name = "Sword front", Min = -10, Max = 10, Value = dn.X, Callback = function(U)
            dn = Vector3.new(U, dn.Y, dn.Z)
            dM()
        end}
)
P:AddSlider(
    {Name = "Sword vertical", Min = -10, Max = 10, Value = dn.Y, Callback = function(U)
            dn = Vector3.new(dn.X, U, dn.Z)
            dM()
        end}
)
P:AddSlider(
    {Name = "Sword side", Min = -10, Max = 10, Value = dn.Z, Callback = function(U)
            dn = Vector3.new(dn.X, dn.Y, U)
            dM()
        end}
)
P:AddSlider(
    {Name = "Fog Start", Min = 0, Max = 1000, Value = dk.FogStart or 0, Callback = function(U)
            dk.FogStart = U
            if dp then
                game:GetService("Lighting").FogStart = U
            end
        end}
)
P:AddSlider(
    {Name = "Fog End", Min = 0, Max = 1000, Value = dk.FogEnd or 100, Callback = function(U)
            dk.FogEnd = U
            if dp then
                game:GetService("Lighting").FogEnd = U
            end
        end}
)
P:AddColorpicker(
    {Name = "Atmo color", Value = dl, Callback = function(dN, dO)
            dl = dN
            if ah then
                local dr = game:GetService("Lighting")
                dr.Ambient = dl
                dr.OutdoorAmbient = dl
                dr.FogColor = dl
                for Z, aA in ipairs(workspace:GetDescendants()) do
                    if aA:IsA("BasePart") then
                        aA.Color = dl
                    end
                end
            end
        end}
)
local dP, dQ = 1, false
getgenv().res = dP
P:AddToggle(
    {Name = "ress", Callback = function(dj)
            dQ = dj
            if dj then
                while dQ do
                    game:GetService("RunService").RenderStepped:Wait()
                    l.CFrame = l.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().res, 0, 0, 0, 1)
                end
            end
        end}
)
P:AddSlider(
    {Name = "Resolution", Min = 0, Max = 1.2, Precise = 2, Value = dP, Callback = function(U)
            getgenv().res = U
        end}
)
local dR = 0.5
local dS = Color3.fromRGB(200, 150, 255)
local dT, dU, dV = false, false, false
local dW
local function dX(dY)
    return Color3.new(dY.r, dY.g, dY.b)
end
local function dZ(a6)
    local d_ = Instance.new("Highlight")
    d_.Name = a6.Name
    d_.FillColor = dS
    d_.DepthMode = "AlwaysOnTop"
    d_.FillTransparency = dR
    d_.OutlineTransparency = dR
    d_.Parent = dW
    d_.Adornee = a6.Character
    a6.CharacterAdded:Connect(
        function(e0)
            d_.Adornee = e0
        end
    )
    a6:GetPropertyChangedSignal("Team"):Connect(
        function()
            d_.FillColor = dX(a6.TeamColor)
        end
    )
end
local function e1()
    for Z, _ in ipairs(game.Players:GetPlayers()) do
        if _ == game.Players.LocalPlayer then
            if dT then
                if not dW:FindFirstChild(_.Name) then
                    dZ(_)
                end
            else
                local e2 = dW:FindFirstChild(_.Name)
                if e2 then
                    e2:Destroy()
                end
            end
        else
            if not dW:FindFirstChild(_.Name) then
                dZ(_)
            end
        end
    end
end
local function e3(e4)
    dV = e4
    if e4 then
        dW = Instance.new("Folder", game:GetService("CoreGui"))
        dW.Name = "Highlight_Storage"
        e1()
        coroutine.wrap(
            function()
                while dV do
                    task.wait(0.15)
                    e1()
                end
            end
        )()
    else
        if dW then
            dW:Destroy()
            dW = nil
        end
    end
end
local function e5(e4)
    dT = e4
    e1()
end
local function e6(e4)
    dU = e4
    e1()
end
local function e7(dN)
    dS = dN
    if dW then
        for Z, e8 in ipairs(dW:GetChildren()) do
            e8.FillColor = dN
        end
    end
end
N:AddToggle({Name = "Chams", Value = false, Callback = e3})
N:AddColorpicker({Name = "Color", Value = dS, Callback = e7})
N:AddToggle({Name = "Self", Value = false, Callback = e5})
N:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Value = dR, Callback = function(U)
            dR = U
            if dW then
                for Z, e8 in ipairs(dW:GetChildren()) do
                    e8.FillTransparency = U
                    e8.OutlineTransparency = U
                end
            end
        end}
)
N:AddToggle(
    {
        Name = "Cape",
        Value = false,
        Callback = function(U)
            local _ = game.Players.LocalPlayer
            local a0 = _.Character
            local function e9()
                local aO = a0:WaitForChild("Humanoid")
                local ea =
                    aO.RigType == Enum.HumanoidRigType.R15 and a0:WaitForChild("UpperTorso") or a0:WaitForChild("Torso")
                local eb = Instance.new("Part", a0)
                eb.Name = "Cape"
                eb.Anchored = false
                eb.CanCollide = false
                eb.TopSurface = Enum.SurfaceType.Smooth
                eb.BottomSurface = Enum.SurfaceType.Smooth
                eb.Size = Vector3.new(0.2, 0.2, 0.2)
                eb.Transparency = 0
                eb.BrickColor = BrickColor.new("Really black")
                local ec = Instance.new("BlockMesh", eb)
                ec.Scale = Vector3.new(9, 17.5, 0.08)
                local ed = Instance.new("Motor", eb)
                ed.Part0 = eb
                ed.Part1 = ea
                ed.MaxVelocity = 0.01
                ed.C0 = CFrame.new(0, 2, 0) * CFrame.Angles(0, math.rad(90), 0)
                ed.C1 = CFrame.new(0, 1, 0.45) * CFrame.Angles(0, math.rad(90), 0)
                spawn(
                    function()
                        local ee = false
                        while eb.Parent == a0 do
                            task.wait(1 / 60)
                            local bj = 0.1
                            local ef = ea.Velocity.Magnitude
                            if ee then
                                bj = bj + ea.Velocity.Magnitude / 10 * 0.05 + 0.05
                                ee = false
                            else
                                ee = true
                            end
                            bj = bj + math.min(ea.Velocity.Magnitude / 11, 0.5)
                            ed.MaxVelocity = math.min(ea.Velocity.Magnitude / 111, 0.04)
                            ed.DesiredAngle = -bj
                            if ed.CurrentAngle < -0.2 and ed.DesiredAngle > -0.2 then
                                ed.MaxVelocity = 0.04
                            end
                            repeat
                                task.wait()
                            until ed.CurrentAngle == ed.DesiredAngle or
                                math.abs(ea.Velocity.Magnitude - ef) >= ea.Velocity.Magnitude / 10 + 1
                            if ea.Velocity.Magnitude < 0.1 then
                                task.wait(0.1)
                            end
                        end
                    end
                )
            end
            local function eg()
                local eb = a0:FindFirstChild("Cape")
                if eb then
                    eb:Destroy()
                end
            end
            if U then
                if not a0:FindFirstChild("Cape") then
                    e9()
                end
            else
                eg()
            end
        end
    }
)
local eh = {
    {Name = "Mouse", Value = "Mouse"},
    {Name = "Bottom Center", Value = "BottomCenter"},
    {Name = "Top Center", Value = "TopCenter"},
    {Name = "Left Center", Value = "LeftCenter"},
    {Name = "Right Center", Value = "RightCenter"}
}
local ei = 1
N:AddDropdown(
    {
        Name = "Tracer Source",
        Default = eh[ei].Name,
        List = {eh[1].Name, eh[2].Name, eh[3].Name, eh[4].Name, eh[5].Name},
        Callback = function(U)
            for ej, ek in ipairs(eh) do
                if ek.Name == U then
                    ei = ej
                    break
                end
            end
        end
    }
)
N:AddToggle(
    {
        Name = "Tracer",
        Value = false,
        Callback = function(ah)
            Tracer = ah
            local g = game:GetService("RunService")
            local d = game:GetService("Players")
            local el = game:GetService("Workspace")
            local cK = game:GetService("UserInputService")
            local l = el.CurrentCamera
            local settings = {
                DefaultSettings = false,
                TeamCheck = false,
                TracersVisible = true,
                TracerColor = Color3.fromRGB(128, 0, 128),
                TracerThickness = 1.8,
                TracerTransparency = 0.8
            }
            local em = {}
            local function en(a0)
                local eo = Drawing.new("Line")
                eo.Thickness = settings.TracerThickness
                eo.Transparency = settings.TracerTransparency
                eo.Visible = false
                eo.Color = settings.TracerColor
                local function ep()
                    if not a0:IsDescendantOf(el) or not a0:FindFirstChild("HumanoidRootPart") then
                        eo.Visible = false
                        return
                    end
                    local eq = a0:FindFirstChild("Head") or a0:FindFirstChild("HumanoidRootPart")
                    if not eq then
                        eo.Visible = false
                        return
                    end
                    local er = eq.Position
                    local es, et = l:WorldToViewportPoint(er)
                    local eu = eh[ei]
                    if eu.Value == "Mouse" then
                        eo.From = Vector2.new(cK:GetMouseLocation().X, cK:GetMouseLocation().Y)
                    elseif eu.Value == "BottomCenter" then
                        eo.From = Vector2.new(l.ViewportSize.X / 2, l.ViewportSize.Y)
                    elseif eu.Value == "TopCenter" then
                        eo.From = Vector2.new(l.ViewportSize.X / 2, 0)
                    elseif eu.Value == "LeftCenter" then
                        eo.From = Vector2.new(0, l.ViewportSize.Y / 2)
                    elseif eu.Value == "RightCenter" then
                        eo.From = Vector2.new(l.ViewportSize.X, l.ViewportSize.Y / 2)
                    end
                    if et then
                        eo.To = Vector2.new(es.X, es.Y)
                        if settings.TeamCheck then
                            eo.Visible = d.LocalPlayer.Team ~= a0.Team
                        else
                            eo.Visible = Tracer
                        end
                    else
                        eo.Visible = false
                    end
                end
                em[a0] = eo
                return eo, ep
            end
            local function ev(_, a0)
                if _ == d.LocalPlayer then
                    return
                end
                if not a0 or not a0:IsDescendantOf(el) or not a0:FindFirstChild("HumanoidRootPart") then
                    return
                end
                local ew, ex = en(a0)
                g.RenderStepped:Connect(
                    function()
                        ex()
                    end
                )
                a0.AncestryChanged:Connect(
                    function()
                        if not a0:IsDescendantOf(el) then
                            ew.Visible = false
                            em[a0] = nil
                        end
                    end
                )
            end
            d.PlayerAdded:Connect(
                function(_)
                    _.CharacterAdded:Connect(
                        function(a0)
                            ev(_, a0)
                        end
                    )
                end
            )
            for Z, _ in ipairs(d:GetPlayers()) do
                ev(_, _.Character)
            end
            cK.InputBegan:Connect(
                function(ca)
                    if ca.KeyCode == settings.ModeSkipKey and not cK:GetFocusedTextBox() then
                        ei = ei % #eh + 1
                        for Z, eo in pairs(em) do
                            eo.Visible = settings.TracersVisible and Tracer
                        end
                    elseif ca.KeyCode == settings.DisableKey and not cK:GetFocusedTextBox() then
                        settings.TracersVisible = not settings.TracersVisible
                        for Z, eo in pairs(em) do
                            eo.Visible = settings.TracersVisible and Tracer
                        end
                    end
                end
            )
            if settings.DefaultSettings then
                settings.TeamCheck = false
                settings.TracersVisible = true
                settings.TracerColor = Color3.fromRGB(128, 0, 128)
                settings.TracerThickness = 1.8
                settings.TracerTransparency = 0.8
            end
        end
    }
)
local _, ey = game.Players.LocalPlayer, false
local function ez(a0)
    local eq = a0:FindFirstChild("Head")
    if eq then
        local eA = eq:FindFirstChild("face")
        if eA then
            eA:Destroy()
        end
    end
end
local function eB(aA)
    if aA:IsA("Accessory") or aA:IsA("Shirt") or aA:IsA("Pants") or aA.Name == "Face" then
        aA:Destroy()
    elseif aA:IsA("BasePart") then
        aA.Material = Enum.Material.ForceField
        aA.Color = Color3.fromRGB(225, 160, 255)
    end
end
local function eC(a0)
    ez(a0)
    for Z, aA in ipairs(a0:GetChildren()) do
        eB(aA)
    end
    a0.ChildAdded:Connect(eB)
end
local function eD(a0)
    task.wait(0.14)
    if ey then
        eC(a0)
    end
end
N:AddToggle(
    {Name = "Self visual", Value = false, Callback = function(dj)
            ey = dj
            if dj then
                eD(_.Character or _.CharacterAdded:Wait())
            end
        end}
)
_.CharacterAdded:Connect(eD)
