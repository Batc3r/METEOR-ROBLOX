local a = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
a.UnloadCallback = function()
    getgenv().EightBall = nil
end
local b = game:GetService("Players")
local c = game:GetService("StarterGui")
local d = game:GetService("TweenService")
local e = game:GetService("RunService")
local f = game:GetService("ReplicatedStorage")
local g = game.Players.LocalPlayer
local h = f.Packages.Knit.Services.ToolService.RF
local i = g:GetMouse()
local j = workspace.CurrentCamera
local k = game.Players.LocalPlayer.Character.Humanoid.Health
local function l(m, n)
    h.ToggleBlockSword:InvokeServer(m, n)
end
local function o(p)
    local q = game.Players.LocalPlayer:WaitForChild("Backpack"):FindFirstChild(p)
    if q and q:IsA("Tool") then
        q.Parent = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    end
end
local function r(p)
    local q = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait():FindFirstChild(p)
    if q and q:IsA("Tool") then
        q.Parent = game.Players.LocalPlayer:WaitForChild("Backpack")
    end
end
local function s(t, u, v, w)
    return Vector3.new(t.X + u.X * v, t.Y + w, t.Z + u.Z * v)
end
local x = a:CreateWindow({Name = "EightBall", Themeable = {Image = "7059346386", Credit = false}})
local y = x:CreateTab({Name = "Blatant"})
local z = y:CreateSection({Name = "Aura"})
local A = y:CreateSection({Name = "Bow Aura"})
local B = y:CreateSection({Name = "Movement", Side = "Right"})
local C = y:CreateSection({Name = "Strafe", Side = "Right"})
local D = y:CreateSection({Name = "Anti void", Side = "Right"})
local E = y:CreateSection({Name = "Anti lagback [beta]"})
local F = x:CreateTab({Name = "Closet"})
local G = F:CreateSection({Name = "Hitbox", Side = "Right"})
local H = F:CreateSection({Name = "Auto"})
local I = F:CreateSection({Name = "Lag", Side = "Right"})
local J = F:CreateSection({Name = "Aim"})
local K = x:CreateTab({Name = "Visuals"})
local L = K:CreateSection({Name = "chams"})
local M = K:CreateSection({Name = "Target hud"})
local N = K:CreateSection({Name = "Render", Side = "Right"})
local O, P, Q, R = "Closest", "PreSimulation", false, 24
z:AddDropdown(
    {
        Name = "RunService type",
        Default = "PreSimulation",
        List = {"Stepped", "PreSimulation", "Heartbeat", "RenderStepped", "PreRender", "PostSimulation"},
        Callback = function(S)
            P = S
        end
    }
)
local function T()
    local U = game:GetService("Players"):GetPlayers()
    local V = nil
    local W = math.huge
    for X, Y in ipairs(U) do
        local Z = Y.Character
        if Z and Z:FindFirstChild("Humanoid") and Z.Humanoid.Health > 0 and not Z:FindFirstChildOfClass("ForceField") then
            local _ =
                (Z.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
            if _ < W then
                W = _
                V = Z.HumanoidRootPart.Position
            end
        end
    end
    return V
end
local function a0(a1)
    local a2 = nil
    local a3 = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    if a1 == "Closest" then
        local _ = math.huge
        for X, a4 in ipairs(game.Players:GetPlayers()) do
            if
                a4 ~= game.Players.LocalPlayer and a4.Character and a4.Character:FindFirstChild("HumanoidRootPart") and
                    a4.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a4.Character:FindFirstChildOfClass("ForceField")
             then
                local a5 = (a3 - a4.Character.HumanoidRootPart.Position).Magnitude
                if a5 < _ then
                    a2, _ = a4, a5
                end
            end
        end
    elseif a1 == "Random" then
        local a6 = {}
        for X, a4 in ipairs(game.Players:GetPlayers()) do
            if
                a4 ~= game.Players.LocalPlayer and a4.Character and a4.Character:FindFirstChild("HumanoidRootPart") and
                    a4.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a4.Character:FindFirstChildOfClass("ForceField")
             then
                local a5 = (a3 - a4.Character.HumanoidRootPart.Position).Magnitude
                if a5 <= R then
                    table.insert(a6, a4)
                end
            end
        end
        if #a6 > 0 then
            a2 = a6[math.random(1, #a6)]
        end
    elseif a1 == "Farthest" then
        local a7 = 0
        for X, a4 in ipairs(game.Players:GetPlayers()) do
            if
                a4 ~= game.Players.LocalPlayer and a4.Character and a4.Character:FindFirstChild("HumanoidRootPart") and
                    a4.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a4.Character:FindFirstChildOfClass("ForceField")
             then
                local a5 = (a3 - a4.Character.HumanoidRootPart.Position).Magnitude
                if a5 > a7 and a5 <= R then
                    a2, a7 = a4, a5
                end
            end
        end
    elseif a1 == "Weakest" then
        local a8 = math.huge
        for X, a4 in ipairs(game.Players:GetPlayers()) do
            if
                a4 ~= game.Players.LocalPlayer and a4.Character and a4.Character:FindFirstChild("HumanoidRootPart") and
                    a4.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a4.Character:FindFirstChildOfClass("ForceField")
             then
                local a5 = (a3 - a4.Character.HumanoidRootPart.Position).Magnitude
                if a5 <= R and a4.Character.Humanoid.Health < a8 then
                    a2, a8 = a4, a4.Character.Humanoid.Health
                end
            end
        end
    elseif a1 == "Strongest" then
        local a9 = 0
        for X, a4 in ipairs(game.Players:GetPlayers()) do
            if
                a4 ~= game.Players.LocalPlayer and a4.Character and a4.Character:FindFirstChild("HumanoidRootPart") and
                    a4.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a4.Character:FindFirstChildOfClass("ForceField")
             then
                local a5 = (a3 - a4.Character.HumanoidRootPart.Position).Magnitude
                if a5 <= R and a4.Character.Humanoid.Health > a9 then
                    a2, a9 = a4, a4.Character.Humanoid.Health
                end
            end
        end
    end
    return a2
end
z:AddDropdown(
    {
        Name = "Targeting Mode",
        Default = "Closest",
        List = {"Closest", "Farthest", "Strongest", "Weakest", "Random"},
        Callback = function(S)
            O = S
        end
    }
)
local function aa()
    local ab = a0(O)
    if ab then
        local a5 =
            (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - ab.Character.HumanoidRootPart.Position).Magnitude
        if a5 <= R and ab.Character.Humanoid.Health > 0 and not ab.Character:FindFirstChildOfClass("ForceField") then
            if Q then
                for X, ac in ipairs({"WoodenSword", "Sword"}) do
                    l(true, ac)
                end
            end
            for X, n in ipairs({"WoodenSword", "Sword"}) do
                h.AttackPlayerWithSword:InvokeServer(ab.Character, critsActive, n)
            end
        else
            if Q then
                for X, ac in ipairs({"WoodenSword", "Sword"}) do
                    l(false, ac)
                end
            end
        end
    end
end
local ad
local function ae(af)
    if af then
        if not ad then
            ad =
                game:GetService("RunService")[P]:Connect(
                function()
                    pcall(aa)
                end
            )
        end
    elseif ad then
        ad:Disconnect()
        ad = nil
    end
end
z:AddToggle({Name = "Aura", Default = false, Keybind = 1, Callback = ae})
z:AddToggle(
    {Name = "Auto block", Default = false, Callback = function(af)
            Q = af
        end}
)
z:AddToggle(
    {Name = "Crits", Default = false, Callback = function(af)
            critsActive = af
        end}
)
z:AddSlider(
    {Name = "Aura Range", Min = 1, Max = 36, Default = 24, Callback = function(S)
            R = S
        end}
)
local ag
z:AddToggle(
    {
        Name = "Click Aura",
        Default = false,
        Keybind = 1,
        Callback = function(ah)
            local Y = game.Players.LocalPlayer
            local i = Y:GetMouse()
            local function ai(Y)
                local aj, ak = nil, math.huge
                for X, al in pairs(game.Players:GetPlayers()) do
                    if al ~= Y and al.Character and al.Character:FindFirstChild("HumanoidRootPart") then
                        local _ =
                            (Y.Character.HumanoidRootPart.Position - al.Character.HumanoidRootPart.Position).Magnitude
                        if _ < ak then
                            ak, aj = _, al
                        end
                    end
                end
                return aj
            end
            local function am()
                local aj = ai(Y)
                if aj and aj.Character then
                    local an = {"WoodenSword", "Sword"}
                    for X, n in ipairs(an) do
                        local ao = {[1] = workspace:WaitForChild(aj.Name), [2] = true, [3] = n}
                        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild(
                            "Services"
                        ):WaitForChild("ToolService"):WaitForChild("RF"):WaitForChild("AttackPlayerWithSword"):InvokeServer(
                            unpack(ao)
                        )
                    end
                end
            end
            if ah then
                ag = i.Button1Down:Connect(am)
            else
                if ag then
                    ag:Disconnect()
                    ag = nil
                end
            end
        end
    }
)
local function ap()
    if FaceTarget then
        local aq = T()
        task.wait(0.05)
        local ao = {[1] = Vector3.new(aq.X, aq.Y, aq.Z)}
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild(
            "ToolService"
        ):WaitForChild("RF"):WaitForChild("UpdateHeadRotation"):InvokeServer(unpack(ao))
    end
end
game:GetService("RunService").Heartbeat:Connect(ap)
z:AddToggle(
    {Name = "Serverside Face", Default = false, Callback = function(af)
            FaceTarget = af
        end}
)
local ar, as, w, at, af = "Head", 30, 1, 0.1, false
A:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = ar,
        Callback = function(au)
            ar = au
        end
    }
)
A:AddSlider(
    {Name = "Charge time", Min = 0, Max = 50, Default = as, Callback = function(S)
            as = S
        end}
)
A:AddSlider(
    {Name = "Y Offset", Min = -15, Max = 15, Default = w, Callback = function(S)
            w = S
        end}
)
A:AddSlider(
    {Name = "Prediction", Min = 0, Max = 3.0, Default = at, Precise = 1, Callback = function(S)
            at = S
        end}
)
A:AddToggle(
    {Name = "Bow Aura", Callback = function(av)
            af = av
            if af then
                local aw = game.Players.LocalPlayer
                local function ax()
                    while true do
                        if af then
                            local Z = aw.Character or aw.CharacterAdded:Wait()
                            local ay = Z:WaitForChild(ar)
                            local az = ay and ay.Position
                            if not az then
                                return
                            end
                            local aj, ak, aA
                            for X, Y in ipairs(game.Players:GetPlayers()) do
                                if Y ~= aw and Y.Character then
                                    local aB = Y.Character:FindFirstChild(ar)
                                    local t = aB and aB.Position
                                    local aC = Y.Character:FindFirstChildOfClass("Humanoid").RootPart.Velocity
                                    if t then
                                        local _ = (t - az).magnitude
                                        local aD = s(t, aC, at, w)
                                        local aE = (aD - az).magnitude
                                        if not ak or aE < ak then
                                            aj = Y
                                            ak = aE
                                            aA = aD
                                        end
                                    end
                                end
                            end
                            if aj and aA then
                                o("DefaultBow")
                                game.Players.LocalPlayer.Character.DefaultBow.__comm__.RF.Fire:InvokeServer(aA, as)
                                r("DefaultBow")
                            end
                        end
                        task.wait(3)
                    end
                end
                coroutine.wrap(ax)()
            end
        end}
)
local af = false
local aF = 10
local aG = 20
local aH = 0.3
local aI = 0.001
local ag
local function aJ(aK)
    aI = aI + aK
    if aI < aH then
        return
    end
    aI = 0
    local b = game:GetService("Players")
    local Y = b.LocalPlayer
    local Z = Y.Character
    if not Z then
        return
    end
    local aL = Z:FindFirstChild("Humanoid")
    if not aL then
        return
    end
    local aM = Z:FindFirstChild("HumanoidRootPart")
    if not aM then
        return
    end
    local aN = aM.CFrame
    local _ = (aN.Position - lastValidPosition.Position).Magnitude
    if _ > aF and _ < aG then
        local aC = aL.MoveDirection * aL.WalkSpeed
        local aO = lastValidPosition.Position + aC * aH
        if (aN.Position - aO).Magnitude > aF then
            Z:SetPrimaryPartCFrame(lastValidPosition)
        else
            lastValidPosition = aN
        end
    else
        lastValidPosition = aN
    end
end
E:AddToggle(
    {Name = "Anti lagback", Default = false, Callback = function(av)
            af = av
            if af then
                local b = game:GetService("Players")
                local e = game:GetService("RunService")
                local Y = b.LocalPlayer
                local Z = Y.Character or Y.CharacterAdded:Wait()
                lastValidPosition = Z.PrimaryPart.CFrame
                ag = e.Heartbeat:Connect(aJ)
            else
                if ag then
                    ag:Disconnect()
                    ag = nil
                end
            end
        end}
)
E:AddSlider(
    {
        Name = "Lag Back Threshold",
        Min = 0,
        Max = 30,
        Default = aF,
        Increment = 0.1,
        ValueName = "studs",
        Callback = function(S)
            aF = S
        end
    }
)
E:AddSlider(
    {
        Name = "Max Prevention Distance",
        Min = 0,
        Max = 50,
        Default = aG,
        Increment = 0.1,
        ValueName = "studs",
        Callback = function(S)
            aG = S
        end
    }
)
E:AddSlider(
    {
        Name = "Update Delay",
        Min = 0,
        Max = 1,
        Default = aH,
        Increment = 0.01,
        ValueName = "seconds",
        Callback = function(S)
            aH = S
        end
    }
)
local aP, aQ, aR, aS, aT, aU = 1.0, false, false, 1.0 / 200, false, false
local function aV()
    if aR then
        aT = true
        if aU then
            aU:Disconnect()
        end
        aU =
            game:GetService("RunService").Stepped:Connect(
            function()
                if not aT then
                    return
                end
                local aW = aS
                if aQ and game.Players.LocalPlayer:GetAttribute("Blocking") == true then
                    aW = aW * aP
                end
                local Z = game.Players.LocalPlayer.Character
                if Z and Z:FindFirstChild("HumanoidRootPart") then
                    Z.HumanoidRootPart.CFrame = Z.HumanoidRootPart.CFrame + Z.Humanoid.MoveDirection * aW
                end
            end
        )
    else
        aT = false
        if aU then
            aU:Disconnect()
        end
    end
end
B:AddSlider(
    {Name = "Block speed", Min = 1, Max = 2.20, Value = aP, Precise = 2, Callback = function(S)
            aP = S
        end}
)
B:AddToggle(
    {Name = "Block noslow", Value = aQ, Callback = function(af)
            aQ = af
        end}
)
B:AddToggle(
    {Name = "Speed", Value = aR, Keybind = 1, Callback = function(af)
            aR = af
            aV()
        end}
)
B:AddSlider(
    {Name = "Speed", Min = 0, Max = 50, Value = aS * 200, Callback = function(aX, aY)
            aS = aX / 200
            if aR then
                aV()
            end
        end}
)
game.Players.LocalPlayer.CharacterAdded:Connect(
    function()
        aV()
    end
)
B:AddSlider(
    {Name = "Gravity", Min = 0, Max = 192, Callback = function(aX, aY)
            workspace.Gravity = aX
        end}
)
local aZ, a_, b0 = {}, nil, false
local function b1()
    for X, ay in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if ay:IsA("BasePart") and ay.CanCollide then
            aZ[ay] = true
            ay.CanCollide = false
        end
    end
end
B:AddToggle(
    {Name = "Phase", Value = b0, Keybind = 1, Callback = function(af)
            b0 = af
            if af then
                a_ = game:GetService("RunService").Stepped:Connect(b1)
            else
                if a_ then
                    a_:Disconnect()
                end
                for ay in pairs(aZ) do
                    if ay then
                        ay.CanCollide = true
                    end
                end
                table.clear(aZ)
            end
        end}
)
local b2, b3 = false, 0.80
B:AddToggle(
    {Name = "Air Check", Value = b2, Callback = function(af)
            b2 = af
        end}
)
B:AddToggle(
    {Name = "Bhop", Value = BhopActive, Keybind = 1, Callback = function(af)
            BhopActive = af
            if af then
                while af do
                    if
                        not b2 or
                            game.Players.LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall
                     then
                        game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(
                            Enum.HumanoidStateType.Jumping
                        )
                        task.wait(b3)
                    end
                    if not BhopActive then
                        break
                    end
                    task.wait()
                end
            end
        end}
)
B:AddSlider(
    {Name = "Bhop delay", Min = 0, Max = 1, Precise = 2, Value = b3, Callback = function(aX, aY)
            b3 = aX
        end}
)
local af = false
local b4 = 0
B:AddToggle(
    {
        Name = "Derp",
        Default = false,
        Callback = function(av)
            af = av
            if af then
                local b = game:GetService("Players")
                local d = game:GetService("TweenService")
                local e = game:GetService("RunService")
                local function b5(Z)
                    local b6 = Z:WaitForChild("HumanoidRootPart")
                    local b7 = TweenInfo.new(0, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
                    local b8 = 0.01
                    local b9 = 0
                    local function ba()
                        b9 = (b9 + b4) % (2 * math.pi)
                        local bb = b9
                        local bc = math.cos(bb) * b8
                        local bd = math.sin(bb) * b8
                        local t = b6.Position + Vector3.new(bc, 0, bd)
                        local be = (t - b6.Position).Unit
                        local bf = CFrame.new(b6.Position, b6.Position + be)
                        local bg = d:Create(b6, b7, {CFrame = bf})
                        bg:Play()
                    end
                    local bh
                    bh =
                        e.Heartbeat:Connect(
                        function()
                            if af then
                                ba()
                            else
                                bh:Disconnect()
                            end
                        end
                    )
                end
                local Y = b.LocalPlayer
                local Z = Y.Character or Y.CharacterAdded:Wait()
                b5(Z)
                Y.CharacterAdded:Connect(
                    function(bi)
                        if af then
                            b5(bi)
                        end
                    end
                )
            end
        end
    }
)
B:AddSlider(
    {Name = "Derp spin speed", Min = 0, Max = 30, Precise = 2, Default = b4, Callback = function(S)
            b4 = S
        end}
)
local bj = false
local bk
local function ba(Z)
    if Z:FindFirstChild("HumanoidRootPart") then
        local bl = Z.HumanoidRootPart.Position
        local w = Z.Humanoid.HipHeight - -1
        bk.Position = Vector3.new(bl.X, bl.Y - w, bl.Z)
    end
end
B:AddToggle(
    {Name = "Fly", Value = bj, Keybind = 1, Callback = function(af)
            bj = af
            local Y = game.Players.LocalPlayer
            local Z = Y.Character or Y.CharacterAdded:Wait()
            if af then
                bk = Instance.new("Part")
                bk.Size = Vector3.new(2, 0.1, 2)
                bk.Anchored = true
                bk.CanCollide = true
                bk.Transparency = 1
                bk.BrickColor = BrickColor.new("Medium stone grey")
                bk.Parent = game.Workspace
                while bj do
                    ba(Z)
                    task.wait()
                end
            else
                if bk then
                    bk:Destroy()
                end
            end
        end}
)
local bm, bn = false, 0.02
local function bo(bp, bq, br)
    local bs, bt, bu = math.clamp, Vector3.new, tick()
    local bv = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if bv then
        bv.Anchored = true
    end
    while tick() - bu <= bn do
        if bv then
            bv.Velocity = bt(bs(bv.Velocity.X, -bp, bp), bs(bv.Velocity.Y, -bq, bq), bs(bv.Velocity.Z, -br, br))
        end
        task.wait()
    end
    if bv then
        bv.Anchored = false
    end
end
local function bw(bx)
    if bm and k and bx < k then
        bo(0, 0, 0)
    end
    k = bx
end
local function by()
    while bm do
        bw(game.Players.LocalPlayer.Character.Humanoid.Health)
        task.wait(0.03)
    end
end
game.Players.LocalPlayer.Character.Humanoid.HealthChanged:Connect(bw)
B:AddToggle(
    {Name = "Antikb", Default = false, Callback = function(S)
            bm = S
            if bm then
                spawn(by)
            end
        end}
)
B:AddSlider(
    {Name = "Anti kb no-move", Min = 0, Max = 1, Precise = 2, Default = 0.02, Callback = function(S)
            bn = S
        end}
)
local bz = false
local bA = 20
local bB = 20
local bC, bD, bE
local function bF()
    local ak, bG = math.huge, nil
    local Y = game.Players.LocalPlayer
    local Z = Y.Character or Y.CharacterAdded:Wait()
    for X, al in pairs(game:GetService("Players"):GetPlayers()) do
        local bH = al.Character
        local bI = bH and bH:FindFirstChild("HumanoidRootPart")
        if al ~= Y and bI and bH.Humanoid.Health > 0 then
            local _ = (Z.HumanoidRootPart.Position - bI.Position).magnitude
            if _ < ak and _ <= bB then
                ak, bG = _, al
            end
        end
    end
    return bG
end
local function ba()
    local Y = game.Players.LocalPlayer
    local Z = Y.Character
    local b6 = Z and Z:FindFirstChild("HumanoidRootPart")
    if b6 and bC and bC.Character then
        local bJ = bC.Character:FindFirstChild("HumanoidRootPart")
        if bJ and bC.Character.Humanoid.Health > 0 then
            local t = bJ.Position
            if (b6.Position - t).magnitude <= bB then
                task.wait(0.0195)
                if bC ~= bD then
                    if Y:GetAttribute("Blocking") == true then
                        Y:SetAttribute("Blocking", false)
                        task.wait(0.068)
                        b6.CFrame = CFrame.new(b6.Position):lerp(CFrame.new(t), bA * 0.01)
                        Y:SetAttribute("Blocking", true)
                    else
                        b6.CFrame = CFrame.new(b6.Position):lerp(CFrame.new(t), bA * 0.01)
                    end
                    bD = bC
                else
                    b6.CFrame = CFrame.new(b6.Position):lerp(CFrame.new(t), bA * 0.01)
                end
            else
                bC = nil
            end
        else
            bC = nil
        end
    else
        bC = bF()
    end
end
C:AddToggle(
    {Name = "Strafe", Keybind = 1, Default = false, Callback = function(S)
            bz = S
            if S then
                bE = game:GetService("RunService").RenderStepped:Connect(ba)
            elseif bE then
                bE:Disconnect()
                bE = nil
            end
        end}
)
C:AddSlider(
    {Name = "Follow Speed", Min = 1, Max = 100, Precise = 1, Value = bA, Callback = function(aX)
            bA = aX
        end}
)
C:AddSlider(
    {Name = "Max Target Distance", Min = 1, Max = 100, Value = bB, Callback = function(aX)
            bB = aX
        end}
)
local bK
D:AddToggle(
    {Name = "Antivoid", Value = false, Callback = function(af)
            if af then
                bK = Instance.new("Part")
                bK.Name = "Antivoid"
                bK.Position = Vector3.new(0, -150, 0)
                bK.Size = Vector3.new(1000, 1, 1000)
                bK.Anchored = true
                bK.CanCollide = true
                bK.Transparency = 1
                bK.BrickColor = BrickColor.new("Medium stone grey")
                bK.Parent = game.Workspace
            else
                local bL = game.Workspace:FindFirstChild("Antivoid")
                if bL then
                    bL:Destroy()
                end
            end
        end}
)
D:AddSlider(
    {Name = "Antivoid Transparency", Value = 0, Min = 0, Max = 1, Precise = 1, Callback = function(bM)
            if bK then
                bK.Transparency = bM
            end
        end}
)
local bN, bO, bP, bQ, bR, bS, bT, bU = 1, 1, 1, false, nil, 0.5, Enum.Material.Neon, Color3.fromRGB(225, 160, 255)
G:AddSlider(
    {Name = "X axis", Min = 1, Max = 10, Callback = function(S)
            bN = S
        end}
)
G:AddSlider(
    {Name = "Y axis", Min = 1, Max = 10, Callback = function(S)
            bO = S
        end}
)
G:AddSlider(
    {Name = "Z axis", Min = 1, Max = 10, Callback = function(S)
            bP = S
        end}
)
G:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Callback = function(S)
            bS = S
        end}
)
G:AddDropdown(
    {
        Name = "Material",
        List = {"Plastic", "SmoothPlastic", "Neon", "ForceField", "Glass"},
        Default = "Neon",
        Callback = function(au)
            if au == "Plastic" then
                bT = Enum.Material.Plastic
            elseif au == "SmoothPlastic" then
                bT = Enum.Material.SmoothPlastic
            elseif au == "Neon" then
                bT = Enum.Material.Neon
            elseif au == "ForceField" then
                bT = Enum.Material.ForceField
            elseif au == "Glass" then
                bT = Enum.Material.Glass
            end
        end
    }
)
G:AddColorPicker(
    {Name = "Color", Default = bU, Callback = function(bV)
            bU = bV
        end}
)
G:AddToggle(
    {Name = "Hitbox Visual", Callback = function(af)
            bQ = af
        end}
)
G:AddToggle(
    {
        Name = "Hitbox",
        Callback = function(af)
            if af then
                local function bW()
                    bR =
                        game:GetService("RunService").RenderStepped:Connect(
                        function()
                            for X, Y in ipairs(game:GetService("Players"):GetPlayers()) do
                                if Y.Name ~= game:GetService("Players").LocalPlayer.Name then
                                    pcall(
                                        function()
                                            local b6 = Y.Character and Y.Character:FindFirstChild("HumanoidRootPart")
                                            if b6 then
                                                b6.Size = Vector3.new(bN, bO, bP)
                                                b6.Transparency = bQ and bS or 1
                                                b6.Material = bT
                                                b6.Color = bU
                                                b6.CanCollide = false
                                            end
                                        end
                                    )
                                end
                            end
                        end
                    )
                end
                bW()
            else
                if bR then
                    bR:Disconnect()
                    bR = nil
                end
                for X, Y in ipairs(game:GetService("Players"):GetPlayers()) do
                    if Y.Name ~= game:GetService("Players").LocalPlayer.Name then
                        pcall(
                            function()
                                local b6 = Y.Character and Y.Character:FindFirstChild("HumanoidRootPart")
                                if b6 then
                                    b6.Size = Vector3.new(2, 2, 2)
                                    b6.Transparency = 1
                                    b6.Material = Enum.Material.Plastic
                                    b6.CanCollide = false
                                end
                            end
                        )
                    end
                end
            end
        end
    }
)
local bX, bY, bZ = false, false, 18
H:AddToggle(
    {Name = "Auto Clicker", Keybind = 1, Callback = function(af)
            bX = af
            if af then
                bY = true
                while bX and bY do
                    mouse1click()
                    task.wait(1 / bZ)
                end
            else
                bY = false
            end
        end}
)
H:AddSlider(
    {Name = "CPS", Min = 1, Max = 50, Def = bZ, Callback = function(bM)
            bZ = bM
        end}
)
local b_, i, c0, c1 = game:GetService("UserInputService"), game.Players.LocalPlayer:GetMouse(), false, false
local ag
H:AddToggle(
    {
        Name = "Double click",
        Callback = function(af)
            c1 = af
            if af then
                ag =
                    b_.InputBegan:Connect(
                    function(c2, c3)
                        if not c3 and c2.UserInputType == Enum.UserInputType.MouseButton1 and not c0 then
                            task.wait(0.1)
                            c0 = true
                            mouse1click()
                            c0 = false
                        end
                    end
                )
            elseif ag then
                ag:Disconnect()
            end
        end
    }
)
H:AddToggle(
    {
        Name = "Trigger bot",
        Keybind = 1,
        Callback = function(af)
            triggerbotActive = af
            local c4
            local c5 = 0
            local minInterval = 1 / cpslimit
            local function c6(c7)
                for X, Y in pairs(game.Players:GetPlayers()) do
                    if Y.Character and c7 and c7:IsDescendantOf(Y.Character) then
                        return true
                    end
                end
                return false
            end
            if af then
                c4 =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if c6(game.Players.LocalPlayer:GetMouse().Target) then
                            local c8 = tick()
                            if c8 - c5 >= minInterval then
                                c5 = c8
                                mouse1press()
                                task.wait()
                                mouse1release()
                            end
                        end
                    end
                )
                getgenv().disable = function()
                    if c4 then
                        warn("Disconnecting:", c4)
                        c4:Disconnect()
                        c4 = nil
                    end
                    getgenv().disable = nil
                end
            else
                if getgenv().disable then
                    getgenv().disable()
                end
            end
        end
    }
)
H:AddSlider(
    {Name = "CPS limit", Min = 1, Max = 50, Def = cpslimit, Callback = function(bM)
            cpslimit = bM
            minInterval = 1 / cpslimit
        end}
)
local c9, ca, cb, cc, cd = "None", 0, 0, 0, 0
local function ce(S)
    settings():GetService("NetworkSettings").IncomingReplicationLag = S
end
I:AddDropdown(
    {
        Name = "Method",
        List = {"ReplicationLag", "Axis", "None"},
        Default = c9,
        Callback = function(au)
            c9 = au
            if c9 == "ReplicationLag" then
                getgenv().Axis = false
                ce(ca)
            elseif c9 == "Axis" then
                getgenv().Axis = true
                getgenv().Z = cd
                getgenv().Y = cc
                getgenv().X = cb
                game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if getgenv().Axis then
                            local cf = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity =
                                Vector3.new(getgenv().X, getgenv().Y, getgenv().Z)
                            game:GetService("RunService").RenderStepped:Wait()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = cf
                        end
                    end
                )
                ce(0)
            end
        end
    }
)
I:AddSlider(
    {Name = "Client Lag", Min = 0, Max = 10, Precise = 2, Def = ca, Callback = function(bM)
            ca = bM
            if c9 == "ReplicationLag" then
                ce(ca)
            end
        end}
)
I:AddSlider(
    {Name = "Axis Lag x", Min = 0, Max = 500, Def = cb, Callback = function(bM)
            cb = bM
        end}
)
I:AddSlider(
    {Name = "Axis Lag y", Min = 0, Max = 500, Def = cc, Callback = function(bM)
            cc = bM
        end}
)
I:AddSlider(
    {Name = "Axis Lag z", Min = 0, Max = 500, Def = cd, Callback = function(bM)
            cd = bM
        end}
)
local cg, ch, ci, cj, ar = false, 1, 30, 30, "Head"
local function ck(cl, cm, cn, co)
    return cl:Lerp(cm, cn * co)
end
local function cp(aK)
    if cg then
        local cq = nil
        local W = math.huge
        local aw = game:GetService("Players").LocalPlayer
        local cr = aw.Character
        if cr then
            local cs = cr:FindFirstChild(ar).Position
            local ct = cr:FindFirstChild(ar).CFrame.lookVector
            for X, Y in ipairs(game:GetService("Players"):GetPlayers()) do
                if Y ~= aw then
                    local cu = Y.Character
                    if cu then
                        local cv = cu:FindFirstChild(ar) and cu:FindFirstChild(ar).Position
                        if cv then
                            local _ = (cs - cv).magnitude
                            if _ < W and _ <= ci then
                                local cw = (cv - cs).unit
                                local bb = math.acos(ct:Dot(cw)) * 180 / math.pi
                                if bb <= cj then
                                    W = _
                                    cq = Y
                                end
                            end
                        end
                    end
                end
            end
        end
        if cq then
            local cx = game:GetService("Workspace").CurrentCamera.CFrame
            local cy = cq.Character:FindFirstChild(ar) and cq.Character:FindFirstChild(ar).Position
            if cy then
                local cz = CFrame.new(cx.Position, cy)
                local cA = ck(cx, cz, aK, ch)
                game:GetService("Workspace").CurrentCamera.CFrame = cA
            end
        end
    end
end
J:AddToggle(
    {Name = "Aim Assist", Keybind = 1, Callback = function(af)
            cg = af
        end}
)
J:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = ar,
        Callback = function(au)
            ar = au
        end
    }
)
J:AddSlider(
    {Name = "Smoothness", Min = 1, Max = 25, Default = 1, Precise = 2, Callback = function(S)
            ch = S
        end}
)
J:AddSlider(
    {Name = "Range", Min = 5, Max = 100, Default = 30, Callback = function(S)
            ci = S
        end}
)
J:AddSlider(
    {Name = "Aim fov", Min = 0, Max = 360, Default = 30, Callback = function(S)
            cj = S
        end}
)
game:GetService("RunService").RenderStepped:Connect(
    function(aK)
        cp(aK)
    end
)
local cB = 40
M:AddSlider(
    {Name = "Hide distance", Min = 0, Max = 250, Value = cB, Callback = function(S)
            cB = S
        end}
)
M:AddToggle(
    {
        Name = "Target Hud",
        Callback = function(af)
            if af then
                local b = game:GetService("Players")
                local e = game:GetService("RunService")
                local d = game:GetService("TweenService")
                local cC = game:GetService("UserInputService")
                local g = b.LocalPlayer
                local function cD(cE, cF, cG)
                    local cH = Instance.new(cE)
                    for cI, S in pairs(cF) do
                        cH[cI] = S
                    end
                    cH.Parent = cG
                    return cH
                end
                local function cJ(cK)
                    local cL = workspace.CurrentCamera.ViewportSize
                    local cM = cK.Size
                    cK.Position = UDim2.new(0.5, -cM.X.Offset / 2, 0.5, -cM.Y.Offset / 2)
                end
                local cN = cD("ScreenGui", {Name = "TargetHUD"}, g.PlayerGui)
                local cO =
                    cD(
                    "Frame",
                    {
                        Size = UDim2.new(0, 280, 0, 130),
                        BackgroundColor3 = Color3.new(0.1, 0.1, 0.1),
                        BorderSizePixel = 0,
                        Draggable = true
                    },
                    cN
                )
                cD("UICorner", {CornerRadius = UDim.new(0, 10)}, cO)
                local cP =
                    cD(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, 0, 0, 35),
                        Position = UDim2.new(0, 0, 0, 5),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 22,
                        Font = Enum.Font.SourceSansBold
                    },
                    cO
                )
                local cQ =
                    cD(
                    "Frame",
                    {
                        Size = UDim2.new(0.92, 0, 0, 20),
                        Position = UDim2.new(0.04, 0, 0.38, 0),
                        BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
                        BorderSizePixel = 0
                    },
                    cO
                )
                cD("UICorner", {CornerRadius = UDim.new(0, 4)}, cQ)
                local cR =
                    cD(
                    "Frame",
                    {Size = UDim2.new(1, 0, 1, 0), BackgroundColor3 = Color3.new(1, 1, 1), BorderSizePixel = 0},
                    cQ
                )
                cD("UICorner", {CornerRadius = UDim.new(0, 4)}, cR)
                local cS =
                    cD(
                    "TextLabel",
                    {
                        Size = UDim2.new(1, 0, 1, 0),
                        BackgroundTransparency = 1,
                        TextColor3 = Color3.new(0, 0, 0),
                        TextSize = 18,
                        Font = Enum.Font.SourceSansBold
                    },
                    cQ
                )
                local cT =
                    cD(
                    "TextLabel",
                    {
                        Size = UDim2.new(0, 110, 0, 25),
                        Position = UDim2.new(0, 10, 1, -30),
                        BackgroundTransparency = 0.5,
                        BackgroundColor3 = Color3.new(0, 0.5, 1),
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 16,
                        Font = Enum.Font.SourceSansBold,
                        TextXAlignment = Enum.TextXAlignment.Center
                    },
                    cO
                )
                cD("UICorner", {CornerRadius = UDim.new(0, 5)}, cT)
                local cU =
                    cD(
                    "TextLabel",
                    {
                        Size = UDim2.new(0, 110, 0, 25),
                        Position = UDim2.new(1, -120, 1, -30),
                        BackgroundTransparency = 0.5,
                        BackgroundColor3 = Color3.new(0.2, 0.2, 0.2),
                        TextColor3 = Color3.new(1, 1, 1),
                        TextSize = 16,
                        Font = Enum.Font.SourceSansBold,
                        TextXAlignment = Enum.TextXAlignment.Center
                    },
                    cO
                )
                cD("UICorner", {CornerRadius = UDim.new(0, 5)}, cU)
                cJ(cO)
                local cV = false
                local cW = nil
                local cX = nil
                local cY = cO.Position
                local cZ = nil
                local function c_(c2)
                    cV = true
                    cW = c2.Position
                    cX = cO.Position
                    if cZ then
                        cZ:Cancel()
                    end
                end
                local function d0(c2)
                    if cV then
                        local d1 = c2.Position - cW
                        local d2 = UDim2.new(cX.X.Scale, cX.X.Offset + d1.X, cX.Y.Scale, cX.Y.Offset + d1.Y)
                        cO.Position = d2
                    end
                end
                local function d3()
                    cV = false
                    local d2 = cO.Position
                    cZ = d:Create(cO, TweenInfo.new(0.3), {Position = d2})
                    cZ:Play()
                end
                cO.InputBegan:Connect(
                    function(c2)
                        if c2.UserInputType == Enum.UserInputType.MouseButton1 then
                            c_(c2)
                        end
                    end
                )
                cC.InputChanged:Connect(
                    function(c2)
                        if cV and c2.UserInputType == Enum.UserInputType.MouseMovement then
                            d0(c2)
                        end
                    end
                )
                cC.InputEnded:Connect(
                    function(c2)
                        if c2.UserInputType == Enum.UserInputType.MouseButton1 then
                            d3()
                        end
                    end
                )
                local function d4()
                    local aj, ak = nil, math.huge
                    for X, Y in pairs(b:GetPlayers()) do
                        if
                            Y ~= g and Y.Character and Y.Character:FindFirstChild("HumanoidRootPart") and g.Character and
                                g.Character:FindFirstChild("HumanoidRootPart")
                         then
                            local _ =
                                (Y.Character.HumanoidRootPart.Position - g.Character.HumanoidRootPart.Position).Magnitude
                            if _ <= cB and _ < ak then
                                aj, ak = Y, _
                            end
                        end
                    end
                    if aj then
                        local d5 = aj.Character:FindFirstChild("Humanoid")
                        local d6 = g.Character:FindFirstChild("Humanoid")
                        cP.Text = aj.Name
                        cT.Text = string.format("Distance %.1f", ak)
                        cS.Text = tostring(math.floor(d5.Health))
                        d:Create(cR, TweenInfo.new(0.3), {Size = UDim2.new(d5.Health / d5.MaxHealth, 0, 1, 0)}):Play()
                        if d6 then
                            local d7 = d6.Health / d6.MaxHealth
                            local d8 = d5.Health / d5.MaxHealth
                            if d7 > d8 then
                                cU.Text = "Winning"
                                cU.BackgroundColor3 = Color3.new(0, 0.7, 0)
                            elseif d7 < d8 then
                                cU.Text = "Losing"
                                cU.BackgroundColor3 = Color3.new(0.7, 0, 0)
                            else
                                cU.Text = "Even"
                                cU.BackgroundColor3 = Color3.new(0.7, 0.7, 0)
                            end
                        end
                        if not cO.Visible then
                            cO.Visible = true
                            cO.Transparency = 1
                            d:Create(cO, TweenInfo.new(0.3), {Transparency = 0}):Play()
                        end
                    else
                        if cO.Visible then
                            d:Create(cO, TweenInfo.new(0.3), {Transparency = 1}):Play()
                            wait(0.3)
                            cO.Visible = false
                        end
                    end
                end
                e.RenderStepped:Connect(d4)
            else
                if not af then
                    game.Players.LocalPlayer.PlayerGui.TargetHUD:Destroy()
                end
            end
        end
    }
)
N:AddToggle(
    {Name = "Hide guis", Callback = function(d9)
            if d9 then
                game.Players.LocalPlayer.PlayerGui.MainGui["BRIDGE DUEL"].Visible = false
            else
                game.Players.LocalPlayer.PlayerGui.MainGui["BRIDGE DUEL"].Visible = true
            end
        end}
)
local da = {Ambient = nil, OutdoorAmbient = nil, FogColor = nil, FogStart = nil, FogEnd = nil, PartColors = {}}
local db, dc, dd = Color3.new(225, 160, 255), Color3.fromRGB(225, 160, 255), Vector3.new(2, 1, 3)
local de = false
local function df(af)
    local dg = game:GetService("Lighting")
    if af then
        da.Ambient = dg.Ambient
        da.OutdoorAmbient = dg.OutdoorAmbient
        da.FogColor = dg.FogColor
        da.FogStart = dg.FogStart
        da.FogEnd = dg.FogEnd
        for X, ay in ipairs(workspace:GetDescendants()) do
            if ay:IsA("BasePart") then
                da.PartColors[ay] = ay.Color
            end
        end
        dg.Ambient = db
        dg.OutdoorAmbient = db
        dg.FogColor = db
        dg.FogStart = da.FogStart or 0
        dg.FogEnd = da.FogEnd or 100
        for X, ay in ipairs(workspace:GetDescendants()) do
            if ay:IsA("BasePart") then
                ay.Color = db
            end
        end
    else
        dg.Ambient = da.Ambient
        dg.OutdoorAmbient = da.OutdoorAmbient
        dg.FogColor = da.FogColor
        dg.FogStart = da.FogStart
        dg.FogEnd = da.FogEnd
        for X, ay in ipairs(workspace:GetDescendants()) do
            if ay:IsA("BasePart") and da.PartColors[ay] then
                ay.Color = da.PartColors[ay]
            end
        end
    end
end
N:AddToggle(
    {Name = "Ambient", Callback = function(af)
            df(af)
        end}
)
local dh = {}
N:AddToggle(
    {Name = "Low gfx", Callback = function(d9)
            local workspace = game:GetService("Workspace")
            for X, ay in ipairs(workspace:GetDescendants()) do
                if ay:IsA("BasePart") then
                    if d9 then
                        dh[ay] = ay.Material
                        ay.Material = Enum.Material.Ice
                    else
                        ay.Material = dh[ay] or ay.Material
                        dh[ay] = nil
                    end
                end
            end
        end}
)
N:AddToggle(
    {
        Name = "Water mark",
        Value = false,
        Callback = function(S)
            local b = game:GetService("Players")
            local d = game:GetService("TweenService")
            local e = game:GetService("RunService")
            local function di(Y)
                local dj = Y:WaitForChild("PlayerGui")
                local dk = Instance.new("ScreenGui")
                dk.Name = "GameSenseWatermark"
                dk.ResetOnSpawn = false
                local cK = Instance.new("Frame")
                cK.Size = UDim2.new(0, 280, 0, 25)
                cK.Position = UDim2.new(0, -280, 0, 10)
                cK.BackgroundColor3 = Color3.fromRGB(30, 30, 35)
                cK.BorderSizePixel = 0
                cK.Parent = dk
                local dl = Instance.new("UICorner")
                dl.CornerRadius = UDim.new(0, 4)
                dl.Parent = cK
                local dm = Instance.new("Frame")
                dm.Size = UDim2.new(1, 0, 0, 2)
                dm.Position = UDim2.new(0, 0, 0, 0)
                dm.BorderSizePixel = 0
                dm.Parent = cK
                local dn = Instance.new("UIGradient")
                dn.Color =
                    ColorSequence.new {
                    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 0, 255)),
                    ColorSequenceKeypoint.new(1, Color3.fromRGB(128, 0, 128))
                }
                dn.Parent = dm
                local dp = Instance.new("ImageLabel")
                dp.Size = UDim2.new(0, 60, 0, 60)
                dp.Position = UDim2.new(0, -15, 0.5, -30)
                dp.BackgroundTransparency = 1
                dp.Image = "rbxassetid://18335445948"
                dp.Parent = cK
                local dq = Instance.new("TextLabel")
                dq.Size = UDim2.new(1, -60, 1, 0)
                dq.Position = UDim2.new(0, 40, 0, 0)
                dq.BackgroundTransparency = 1
                dq.Font = Enum.Font.Code
                dq.TextColor3 = Color3.fromRGB(255, 255, 255)
                dq.TextSize = 16
                dq.Text = "8 ball | 00:00:00"
                dq.TextXAlignment = Enum.TextXAlignment.Left
                dq.Parent = cK
                dk.Parent = dj
                local b7 = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                local dr = d:Create(cK, b7, {Position = UDim2.new(0, 10, 0, 10)})
                dr:Play()
                local bu = tick()
                local ag
                ag =
                    e.Heartbeat:Connect(
                    function()
                        if dk.Parent == nil then
                            ag:Disconnect()
                            return
                        end
                        local ds = tick() - bu
                        local dt = math.floor(ds / 3600)
                        local du = math.floor(ds % 3600 / 60)
                        local dv = math.floor(ds % 60)
                        dq.Text = string.format("8 ball | %02d:%02d:%02d", dt, du, dv)
                    end
                )
            end
            local function dw(Y)
                local dj = Y:FindFirstChild("PlayerGui")
                if dj then
                    local dk = dj:FindFirstChild("GameSenseWatermark")
                    if dk then
                        local cK = dk:FindFirstChildOfClass("Frame")
                        if cK then
                            local b7 = TweenInfo.new(0.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
                            local dr = d:Create(cK, b7, {Position = UDim2.new(0, -280, 0, 10)})
                            dr:Play()
                            dr.Completed:Connect(
                                function()
                                    dk:Destroy()
                                end
                            )
                        else
                            dk:Destroy()
                        end
                    end
                end
            end
            if S then
                for X, Y in ipairs(b:GetPlayers()) do
                    di(Y)
                end
                b.PlayerAdded:Connect(di)
            else
                for X, Y in ipairs(b:GetPlayers()) do
                    dw(Y)
                end
                b.PlayerAdded:Connect(dw)
            end
        end
    }
)
local function dx()
    local dy = game:GetService("Workspace").Camera:FindFirstChild("Viewmodel")
    if dy then
        local dz = dy:FindFirstChild("WoodenSword")
        if dz then
            local dA = dz:FindFirstChild("MainPart")
            if dA then
                return dA:FindFirstChild("Mesh")
            end
        end
    end
    return nil
end
N:AddToggle(
    {Name = "Custom sword", Callback = function(af)
            de = af
            if not de then
                local dB = dx()
                if dB then
                    dB.Offset = Vector3.new(0, 0, 0)
                end
            end
        end}
)
game:GetService("RunService").Heartbeat:Connect(
    function()
        if de then
            local dB = dx()
            if dB then
                dB.Offset = dd
            end
        end
    end
)
local function dC()
    if de then
        local dB = dx()
        if dB then
            dB.Offset = dd
        end
    end
end
N:AddSlider(
    {Name = "Sword front", Min = -10, Max = 10, Value = dd.X, Callback = function(S)
            dd = Vector3.new(S, dd.Y, dd.Z)
            dC()
        end}
)
N:AddSlider(
    {Name = "Sword vertical", Min = -10, Max = 10, Value = dd.Y, Callback = function(S)
            dd = Vector3.new(dd.X, S, dd.Z)
            dC()
        end}
)
N:AddSlider(
    {Name = "Sword side", Min = -10, Max = 10, Value = dd.Z, Callback = function(S)
            dd = Vector3.new(dd.X, dd.Y, S)
            dC()
        end}
)
N:AddSlider(
    {Name = "Fog Start", Min = 0, Max = 1000, Value = da.FogStart or 0, Callback = function(S)
            da.FogStart = S
            if de then
                game:GetService("Lighting").FogStart = S
            end
        end}
)
N:AddSlider(
    {Name = "Fog End", Min = 0, Max = 1000, Value = da.FogEnd or 100, Callback = function(S)
            da.FogEnd = S
            if de then
                game:GetService("Lighting").FogEnd = S
            end
        end}
)
N:AddColorpicker(
    {Name = "Atmo color", Value = db, Callback = function(dD, dE)
            db = dD
            if af then
                local dg = game:GetService("Lighting")
                dg.Ambient = db
                dg.OutdoorAmbient = db
                dg.FogColor = db
                for X, ay in ipairs(workspace:GetDescendants()) do
                    if ay:IsA("BasePart") then
                        ay.Color = db
                    end
                end
            end
        end}
)
local dF, dG = 1, false
getgenv().res = dF
N:AddToggle(
    {Name = "ress", Callback = function(d9)
            dG = d9
            if d9 then
                while dG do
                    game:GetService("RunService").RenderStepped:Wait()
                    j.CFrame = j.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().res, 0, 0, 0, 1)
                end
            end
        end}
)
N:AddSlider(
    {Name = "Resolution", Min = 0, Max = 1.2, Precise = 2, Value = dF, Callback = function(S)
            getgenv().res = S
        end}
)
local dH, dI, dJ, dK, dL = 0.5, Color3.fromRGB(200, 150, 255), false, false, false
local function dM(dN)
    return Color3.new(dN.r, dN.g, dN.b)
end
local function dO(a4)
    local dN = a4.TeamColor
    local dO = Instance.new("Highlight")
    dO.Name = a4.Name
    dO.FillColor = dI
    dO.DepthMode = "AlwaysOnTop"
    dO.FillTransparency = dH
    dO.OutlineTransparency = dH
    dO.Parent = Storage
    local dP = a4.Character
    if dP then
        dO.Adornee = dP
    end
    a4.CharacterAdded:Connect(
        function(dQ)
            dO.Adornee = dQ
        end
    )
    a4:GetPropertyChangedSignal("Team"):Connect(
        function()
            local dR = a4.TeamColor
            dO.FillColor = dM(dR)
        end
    )
end
local function dS()
    for X, Y in ipairs(game.Players:GetPlayers()) do
        if Y == game.Players.LocalPlayer then
            if dJ then
                if not Storage:FindFirstChild(Y.Name) then
                    dO(Y)
                end
            else
                local dT = Storage:FindFirstChild(Y.Name)
                if dT then
                    dT:Destroy()
                end
            end
        else
            if not Storage:FindFirstChild(Y.Name) then
                dO(Y)
            end
        end
    end
end
local function dU(af)
    if af then
        dL = true
        local dV = game:GetService("CoreGui")
        local b = game:GetService("Players")
        Storage = Instance.new("Folder")
        Storage.Parent = dV
        Storage.Name = "Highlight_Storage"
        dS()
        coroutine.wrap(
            function()
                while dL do
                    task.wait(0.15)
                    dS()
                end
            end
        )()
    else
        dL = false
        local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
        if Storage then
            for X, dW in ipairs(Storage:GetChildren()) do
                dW:Destroy()
            end
            Storage:Destroy()
        end
    end
end
local function dX(af)
    dJ = af
    dS()
end
local function dY(af)
    dK = af
    dS()
end
local function dZ(dD)
    dI = dD
    local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
    if Storage then
        for X, dW in ipairs(Storage:GetChildren()) do
            dW.FillColor = dD
        end
    end
end
L:AddToggle(
    {Name = "chams", Value = false, Callback = function(af)
            dU(af)
        end}
)
L:AddColorpicker(
    {Name = "Color", Value = dI, Callback = function(dD, dE)
            dZ(dD)
        end}
)
L:AddToggle({Name = "Self", Value = false, Callback = dX})
L:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Value = dH, Callback = function(S)
            dH = S
            local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
            if Storage then
                for X, dW in ipairs(Storage:GetChildren()) do
                    dW.FillTransparency = S
                    dW.OutlineTransparency = S
                end
            end
        end}
)
L:AddToggle(
    {
        Name = "Cape",
        Value = false,
        Callback = function(S)
            local Y = game.Players.LocalPlayer
            local Z = Y.Character
            local function d_()
                local aL = Z:WaitForChild("Humanoid")
                local e0 =
                    aL.RigType == Enum.HumanoidRigType.R15 and Z:WaitForChild("UpperTorso") or Z:WaitForChild("Torso")
                local e1 = Instance.new("Part", Z)
                e1.Name = "Cape"
                e1.Anchored = false
                e1.CanCollide = false
                e1.TopSurface = Enum.SurfaceType.Smooth
                e1.BottomSurface = Enum.SurfaceType.Smooth
                e1.Size = Vector3.new(0.2, 0.2, 0.2)
                e1.Transparency = 0
                e1.BrickColor = BrickColor.new("Really black")
                local e2 = Instance.new("BlockMesh", e1)
                e2.Scale = Vector3.new(9, 17.5, 0.08)
                local e3 = Instance.new("Motor", e1)
                e3.Part0 = e1
                e3.Part1 = e0
                e3.MaxVelocity = 0.01
                e3.C0 = CFrame.new(0, 2, 0) * CFrame.Angles(0, math.rad(90), 0)
                e3.C1 = CFrame.new(0, 1, 0.45) * CFrame.Angles(0, math.rad(90), 0)
                spawn(
                    function()
                        local e4 = false
                        while e1.Parent == Z do
                            task.wait(1 / 60)
                            local bb = 0.1
                            local e5 = e0.Velocity.Magnitude
                            if e4 then
                                bb = bb + e0.Velocity.Magnitude / 10 * 0.05 + 0.05
                                e4 = false
                            else
                                e4 = true
                            end
                            bb = bb + math.min(e0.Velocity.Magnitude / 11, 0.5)
                            e3.MaxVelocity = math.min(e0.Velocity.Magnitude / 111, 0.04)
                            e3.DesiredAngle = -bb
                            if e3.CurrentAngle < -0.2 and e3.DesiredAngle > -0.2 then
                                e3.MaxVelocity = 0.04
                            end
                            repeat
                                task.wait()
                            until e3.CurrentAngle == e3.DesiredAngle or
                                math.abs(e0.Velocity.Magnitude - e5) >= e0.Velocity.Magnitude / 10 + 1
                            if e0.Velocity.Magnitude < 0.1 then
                                task.wait(0.1)
                            end
                        end
                    end
                )
            end
            local function e6()
                local e1 = Z:FindFirstChild("Cape")
                if e1 then
                    e1:Destroy()
                end
            end
            if S then
                if not Z:FindFirstChild("Cape") then
                    d_()
                end
            else
                e6()
            end
        end
    }
)
local e7 = {
    {Name = "Mouse", Value = "Mouse"},
    {Name = "Bottom Center", Value = "BottomCenter"},
    {Name = "Top Center", Value = "TopCenter"},
    {Name = "Left Center", Value = "LeftCenter"},
    {Name = "Right Center", Value = "RightCenter"}
}
local e8 = 1
L:AddDropdown(
    {
        Name = "Tracer Source",
        Default = e7[e8].Name,
        List = {e7[1].Name, e7[2].Name, e7[3].Name, e7[4].Name, e7[5].Name},
        Callback = function(S)
            for e9, ea in ipairs(e7) do
                if ea.Name == S then
                    e8 = e9
                    break
                end
            end
        end
    }
)
L:AddToggle(
    {
        Name = "Tracer",
        Value = false,
        Callback = function(af)
            Tracer = af
            local e = game:GetService("RunService")
            local b = game:GetService("Players")
            local eb = game:GetService("Workspace")
            local cC = game:GetService("UserInputService")
            local j = eb.CurrentCamera
            local settings = {
                DefaultSettings = false,
                TeamCheck = false,
                TracersVisible = true,
                TracerColor = Color3.fromRGB(128, 0, 128),
                TracerThickness = 1.8,
                TracerTransparency = 0.8
            }
            local ec = {}
            local function ed(Z)
                local ee = Drawing.new("Line")
                ee.Thickness = settings.TracerThickness
                ee.Transparency = settings.TracerTransparency
                ee.Visible = false
                ee.Color = settings.TracerColor
                local function ef()
                    if not Z:IsDescendantOf(eb) or not Z:FindFirstChild("HumanoidRootPart") then
                        ee.Visible = false
                        return
                    end
                    local eg = Z:FindFirstChild("Head") or Z:FindFirstChild("HumanoidRootPart")
                    if not eg then
                        ee.Visible = false
                        return
                    end
                    local eh = eg.Position
                    local ei, ej = j:WorldToViewportPoint(eh)
                    local ek = e7[e8]
                    if ek.Value == "Mouse" then
                        ee.From = Vector2.new(cC:GetMouseLocation().X, cC:GetMouseLocation().Y)
                    elseif ek.Value == "BottomCenter" then
                        ee.From = Vector2.new(j.ViewportSize.X / 2, j.ViewportSize.Y)
                    elseif ek.Value == "TopCenter" then
                        ee.From = Vector2.new(j.ViewportSize.X / 2, 0)
                    elseif ek.Value == "LeftCenter" then
                        ee.From = Vector2.new(0, j.ViewportSize.Y / 2)
                    elseif ek.Value == "RightCenter" then
                        ee.From = Vector2.new(j.ViewportSize.X, j.ViewportSize.Y / 2)
                    end
                    if ej then
                        ee.To = Vector2.new(ei.X, ei.Y)
                        if settings.TeamCheck then
                            ee.Visible = b.LocalPlayer.Team ~= Z.Team
                        else
                            ee.Visible = Tracer
                        end
                    else
                        ee.Visible = false
                    end
                end
                ec[Z] = ee
                return ee, ef
            end
            local function el(Y, Z)
                if Y == b.LocalPlayer then
                    return
                end
                if not Z or not Z:IsDescendantOf(eb) or not Z:FindFirstChild("HumanoidRootPart") then
                    return
                end
                local em, en = ed(Z)
                e.RenderStepped:Connect(
                    function()
                        en()
                    end
                )
                Z.AncestryChanged:Connect(
                    function()
                        if not Z:IsDescendantOf(eb) then
                            em.Visible = false
                            ec[Z] = nil
                        end
                    end
                )
            end
            b.PlayerAdded:Connect(
                function(Y)
                    Y.CharacterAdded:Connect(
                        function(Z)
                            el(Y, Z)
                        end
                    )
                end
            )
            for X, Y in ipairs(b:GetPlayers()) do
                el(Y, Y.Character)
            end
            cC.InputBegan:Connect(
                function(c2)
                    if c2.KeyCode == settings.ModeSkipKey and not cC:GetFocusedTextBox() then
                        e8 = e8 % #e7 + 1
                        for X, ee in pairs(ec) do
                            ee.Visible = settings.TracersVisible and Tracer
                        end
                    elseif c2.KeyCode == settings.DisableKey and not cC:GetFocusedTextBox() then
                        settings.TracersVisible = not settings.TracersVisible
                        for X, ee in pairs(ec) do
                            ee.Visible = settings.TracersVisible and Tracer
                        end
                    end
                end
            )
            if settings.DefaultSettings then
                settings.TeamCheck = false
                settings.TracersVisible = true
                settings.TracerColor = Color3.fromRGB(128, 0, 128)
                settings.TracerThickness = 1.8
                settings.TracerTransparency = 0.8
            end
        end
    }
)
local Y, eo = game.Players.LocalPlayer, false
local function ep(Z)
    local eg = Z:FindFirstChild("Head")
    if eg then
        local eq = eg:FindFirstChild("face")
        if eq then
            eq:Destroy()
        end
    end
end
local function er(ay)
    if ay:IsA("Accessory") or ay:IsA("Shirt") or ay:IsA("Pants") or ay.Name == "Face" then
        ay:Destroy()
    elseif ay:IsA("BasePart") then
        ay.Material = Enum.Material.ForceField
        ay.Color = Color3.fromRGB(225, 160, 255)
    end
end
local function es(Z)
    ep(Z)
    for X, ay in ipairs(Z:GetChildren()) do
        er(ay)
    end
    Z.ChildAdded:Connect(er)
end
local function et(Z)
    task.wait(0.14)
    if eo then
        es(Z)
    end
end
L:AddToggle(
    {Name = "Self visual", Value = false, Callback = function(d9)
            eo = d9
            if d9 then
                et(Y.Character or Y.CharacterAdded:Wait())
            end
        end}
)
Y.CharacterAdded:Connect(et)
