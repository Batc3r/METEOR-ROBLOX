local a = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
a.UnloadCallback = function()
    getgenv().Galley = nil
end
local b = game:GetService("Players")
local c = game:GetService("StarterGui")
local d = game:GetService("TweenService")
local e = game:GetService("RunService")
local f = game:GetService("ReplicatedStorage")
local g = game.Players.LocalPlayer
local h = f.Packages.Knit.Services.ToolService.RF
local i = g:GetMouse()
local j = workspace.CurrentCamera
local k = game.Players.LocalPlayer.Character.Humanoid.Health
local function l(m, n)
    h.ToggleBlockSword:InvokeServer(m, n)
end
local function o(p)
    local q = game.Players.LocalPlayer:WaitForChild("Backpack"):FindFirstChild(p)
    if q and q:IsA("Tool") then
        q.Parent = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    end
end
local function r(p)
    local q = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait():FindFirstChild(p)
    if q and q:IsA("Tool") then
        q.Parent = game.Players.LocalPlayer:WaitForChild("Backpack")
    end
end
local function s(t, u, v, w)
    return Vector3.new(t.X + u.X * v, t.Y + w, t.Z + u.Z * v)
end
local x = a:CreateWindow({Name = "Galley | rw", Themeable = {Image = "7059346386", Credit = false}})
local y = x:CreateTab({Name = "Blatant"})
local z = y:CreateSection({Name = "Aura"})
local A = y:CreateSection({Name = "Bow Aura"})
local B = y:CreateSection({Name = "Movement", Side = "Right"})
local C = y:CreateSection({Name = "Strafe", Side = "Right"})
local D = y:CreateSection({Name = "Anti void", Side = "Right"})
local E = x:CreateTab({Name = "Closet"})
local F = E:CreateSection({Name = "Hitbox", Side = "Right"})
local G = E:CreateSection({Name = "Auto"})
local H = E:CreateSection({Name = "Lag", Side = "Right"})
local I = E:CreateSection({Name = "Aim"})
local J = x:CreateTab({Name = "Visuals"})
local K = J:CreateSection({Name = "chams"})
local L = J:CreateSection({Name = "Target hud"})
local M = J:CreateSection({Name = "Render", Side = "Right"})
local N, O, P, Q = "Closest", "PreSimulation", false, 24
z:AddDropdown(
    {
        Name = "RunService type",
        Default = "PreSimulation",
        List = {"Stepped", "PreSimulation", "Heartbeat", "RenderStepped", "PreRender", "PostSimulation"},
        Callback = function(R)
            O = R
        end
    }
)
local function S()
    local T = game:GetService("Players"):GetPlayers()
    local U = nil
    local V = math.huge
    for W, X in ipairs(T) do
        local Y = X.Character
        if Y and Y:FindFirstChild("Humanoid") and Y.Humanoid.Health > 0 and not Y:FindFirstChildOfClass("ForceField") then
            local Z =
                (Y.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
            if Z < V then
                V = Z
                U = Y.HumanoidRootPart.Position
            end
        end
    end
    return U
end
local function _(a0)
    local a1 = nil
    local a2 = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    if a0 == "Closest" then
        local Z = math.huge
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 < Z then
                    a1, Z = a3, a4
                end
            end
        end
    elseif a0 == "Random" then
        local a5 = {}
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 <= Q then
                    table.insert(a5, a3)
                end
            end
        end
        if #a5 > 0 then
            a1 = a5[math.random(1, #a5)]
        end
    elseif a0 == "Farthest" then
        local a6 = 0
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 > a6 and a4 <= Q then
                    a1, a6 = a3, a4
                end
            end
        end
    elseif a0 == "Weakest" then
        local a7 = math.huge
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 <= Q and a3.Character.Humanoid.Health < a7 then
                    a1, a7 = a3, a3.Character.Humanoid.Health
                end
            end
        end
    elseif a0 == "Strongest" then
        local a8 = 0
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 <= Q and a3.Character.Humanoid.Health > a8 then
                    a1, a8 = a3, a3.Character.Humanoid.Health
                end
            end
        end
    end
    return a1
end
z:AddDropdown(
    {
        Name = "Targeting Mode",
        Default = "Closest",
        List = {"Closest", "Farthest", "Strongest", "Weakest", "Random"},
        Callback = function(R)
            N = R
        end
    }
)
local function a9()
    local aa = _(N)
    if aa then
        local a4 =
            (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - aa.Character.HumanoidRootPart.Position).Magnitude
        if a4 <= Q and aa.Character.Humanoid.Health > 0 and not aa.Character:FindFirstChildOfClass("ForceField") then
            if P then
                for W, ab in ipairs({"WoodenSword", "Sword"}) do
                    l(true, ab)
                end
            end
            for W, n in ipairs({"WoodenSword", "Sword"}) do
                h.AttackPlayerWithSword:InvokeServer(aa.Character, critsActive, n)
            end
        else
            if P then
                for W, ab in ipairs({"WoodenSword", "Sword"}) do
                    l(false, ab)
                end
            end
        end
    end
end
local ac
local function ad(ae)
    if ae then
        if not ac then
            ac =
                game:GetService("RunService")[O]:Connect(
                function()
                    pcall(a9)
                end
            )
        end
    elseif ac then
        ac:Disconnect()
        ac = nil
    end
end
z:AddToggle({Name = "Aura", Default = false, Keybind = 1, Callback = ad})
z:AddToggle(
    {Name = "Auto block", Default = false, Callback = function(ae)
            P = ae
        end}
)
z:AddToggle(
    {Name = "Crits", Default = false, Callback = function(ae)
            critsActive = ae
        end}
)
z:AddSlider(
    {Name = "Aura Range", Min = 1, Max = 36, Default = 24, Callback = function(R)
            Q = R
        end}
)
local function af()
    if FaceTarget then
        local ag = S()
        task.wait(0.05)
        local ah = {[1] = Vector3.new(ag.X, ag.Y, ag.Z)}
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild(
            "ToolService"
        ):WaitForChild("RF"):WaitForChild("UpdateHeadRotation"):InvokeServer(unpack(ah))
    end
end
game:GetService("RunService").Heartbeat:Connect(af)
z:AddToggle(
    {Name = "Serverside Face", Default = false, Callback = function(ae)
            FaceTarget = ae
        end}
)
local ai, aj, w, ak, ae, al = "Head", 30, 1, 0.1, false, true
A:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = ai,
        Callback = function(am)
            ai = am
        end
    }
)
A:AddSlider(
    {Name = "Charge time", Min = 0, Max = 50, Default = aj, Callback = function(R)
            aj = R
        end}
)
A:AddSlider(
    {Name = "Y Offset", Min = -15, Max = 15, Default = w, Callback = function(R)
            w = R
        end}
)
A:AddSlider(
    {Name = "Prediction", Min = 0, Max = 3.0, Default = ak, Precise = 1, Callback = function(R)
            ak = R
        end}
)
A:AddToggle(
    {Name = "Switch Items", Default = al, Callback = function(an)
            al = an
        end}
)
A:AddToggle(
    {Name = "Bow Aura", Callback = function(ao)
            ae = ao
            if ae then
                localPlayer = game.Players.LocalPlayer
                local function ap()
                    while true do
                        if ae then
                            local Y = localPlayer.Character or localPlayer.CharacterAdded:Wait()
                            local aq = Y:WaitForChild(ai)
                            local ar = aq and aq.Position
                            if not ar then
                                return
                            end
                            local as, at, au
                            for W, X in ipairs(game.Players:GetPlayers()) do
                                if X ~= localPlayer and X.Character then
                                    local av = X.Character:FindFirstChild(ai)
                                    local t = av and av.Position
                                    local aw = X.Character:FindFirstChildOfClass("Humanoid").RootPart.Velocity
                                    if t then
                                        local Z = (t - ar).magnitude
                                        local ax = s(t, aw, ak, w)
                                        local ay = (ax - ar).magnitude
                                        if not at or ay < at then
                                            as = X
                                            at = ay
                                            au = ax
                                        end
                                    end
                                end
                            end
                            if as and au then
                                if al then
                                    o("DefaultBow")
                                end
                                game.Players.LocalPlayer.Character.DefaultBow.__comm__.RF.Fire:InvokeServer(au, aj)
                                if al then
                                    r("DefaultBow")
                                end
                            end
                        end
                        wait(2.955)
                    end
                end
                coroutine.wrap(ap)()
            end
        end}
)
local az, aA, aB, aC, aD, aE = 1.0, false, false, 1.0 / 200, false, false
local function aF()
    if aB then
        aD = true
        if aE then
            aE:Disconnect()
        end
        aE =
            game:GetService("RunService").Stepped:Connect(
            function()
                if not aD then
                    return
                end
                local aG = aC
                if aA and game.Players.LocalPlayer:GetAttribute("Blocking") == true then
                    aG = aG * az
                end
                local Y = game.Players.LocalPlayer.Character
                if Y and Y:FindFirstChild("HumanoidRootPart") then
                    Y.HumanoidRootPart.CFrame = Y.HumanoidRootPart.CFrame + Y.Humanoid.MoveDirection * aG
                end
            end
        )
    else
        aD = false
        if aE then
            aE:Disconnect()
        end
    end
end
B:AddSlider(
    {Name = "Block speed", Min = 1, Max = 2.20, Value = az, Precise = 2, Callback = function(R)
            az = R
        end}
)
B:AddToggle(
    {Name = "Block noslow", Value = aA, Callback = function(ae)
            aA = ae
        end}
)
B:AddToggle(
    {Name = "Speed", Value = aB, Keybind = 1, Callback = function(ae)
            aB = ae
            aF()
        end}
)
B:AddSlider(
    {Name = "Speed", Min = 0, Max = 50, Value = aC * 200, Callback = function(aH, aI)
            aC = aH / 200
            if aB then
                aF()
            end
        end}
)
game.Players.LocalPlayer.CharacterAdded:Connect(
    function()
        aF()
    end
)
B:AddSlider(
    {Name = "Gravity", Min = 0, Max = 192, Callback = function(aH, aI)
            workspace.Gravity = aH
        end}
)
local aJ, aK, aL = {}, nil, false
local function aM()
    for W, aq in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if aq:IsA("BasePart") and aq.CanCollide then
            aJ[aq] = true
            aq.CanCollide = false
        end
    end
end
B:AddToggle(
    {Name = "Phase", Value = aL, Keybind = 1, Callback = function(ae)
            aL = ae
            if ae then
                aK = game:GetService("RunService").Stepped:Connect(aM)
            else
                if aK then
                    aK:Disconnect()
                end
                for aq in pairs(aJ) do
                    if aq then
                        aq.CanCollide = true
                    end
                end
                table.clear(aJ)
            end
        end}
)
local aN, aO = false, 0.80
B:AddToggle(
    {Name = "Air Check", Value = aN, Callback = function(ae)
            aN = ae
        end}
)
B:AddToggle(
    {Name = "Bhop", Value = BhopActive, Keybind = 1, Callback = function(ae)
            BhopActive = ae
            if ae then
                while ae do
                    if
                        not aN or
                            game.Players.LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall
                     then
                        game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(
                            Enum.HumanoidStateType.Jumping
                        )
                        task.wait(aO)
                    end
                    if not BhopActive then
                        break
                    end
                    task.wait()
                end
            end
        end}
)
B:AddSlider(
    {Name = "Bhop delay", Min = 0, Max = 1, Precise = 2, Value = aO, Callback = function(aH, aI)
            aO = aH
        end}
)
local aP = false
local aQ
local function aR(Y)
    if Y:FindFirstChild("HumanoidRootPart") then
        local aS = Y.HumanoidRootPart.Position
        local w = Y.Humanoid.HipHeight - -1
        aQ.Position = Vector3.new(aS.X, aS.Y - w, aS.Z)
    end
end
B:AddToggle(
    {Name = "Fly", Value = aP, Keybind = 1, Callback = function(ae)
            aP = ae
            local X = game.Players.LocalPlayer
            local Y = X.Character or X.CharacterAdded:Wait()
            if ae then
                aQ = Instance.new("Part")
                aQ.Size = Vector3.new(2, 0.1, 2)
                aQ.Anchored = true
                aQ.CanCollide = true
                aQ.Transparency = 1
                aQ.BrickColor = BrickColor.new("Medium stone grey")
                aQ.Parent = game.Workspace
                while aP do
                    aR(Y)
                    task.wait()
                end
            else
                if aQ then
                    aQ:Destroy()
                end
            end
        end}
)
local aT, aU = false, 0.02
local function aV(aW, aX, aY)
    local aZ, a_, b0 = math.clamp, Vector3.new, tick()
    local b1 = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if b1 then
        b1.Anchored = true
    end
    while tick() - b0 <= aU do
        if b1 then
            b1.Velocity = a_(aZ(b1.Velocity.X, -aW, aW), aZ(b1.Velocity.Y, -aX, aX), aZ(b1.Velocity.Z, -aY, aY))
        end
        task.wait()
    end
    if b1 then
        b1.Anchored = false
    end
end
local function b2(b3)
    if aT and k and b3 < k then
        aV(0, 0, 0)
    end
    k = b3
end
local function b4()
    while aT do
        b2(game.Players.LocalPlayer.Character.Humanoid.Health)
        task.wait(0.03)
    end
end
game.Players.LocalPlayer.Character.Humanoid.HealthChanged:Connect(b2)
B:AddToggle(
    {Name = "Antikb", Default = false, Callback = function(R)
            aT = R
            if aT then
                spawn(b4)
            end
        end}
)
B:AddSlider(
    {Name = "Anti kb no-move", Min = 0, Max = 1, Precise = 2, Default = 0.02, Callback = function(R)
            aU = R
        end}
)
local b5 = false
local b6 = 20
local b7 = 5
local b8 = 20
local b9 = 0.1
local ba = nil
local bb = nil
local function bc()
    local at = math.huge
    local bd = nil
    local X = game.Players.LocalPlayer
    local Y = X.Character or X.CharacterAdded:Wait()
    local T = game:GetService("Players")
    for W, be in pairs(T:GetPlayers()) do
        if be ~= X and be.Character and be.Character:FindFirstChild("HumanoidRootPart") then
            local Z = (Y.HumanoidRootPart.Position - be.Character.HumanoidRootPart.Position).magnitude
            if Z < at and be.Character.Humanoid.Health > 0 then
                at = Z
                bd = be
            end
        end
    end
    return bd
end
local function bf(bg, t)
    local bh = Vector3.new(math.cos(bg) * b7, 0, math.sin(bg) * b7)
    return t + bh
end
local function aR()
    local X = game.Players.LocalPlayer
    local Y = X.Character
    local bi = game:GetService("RunService")
    if ba and ba.Character and ba.Character:FindFirstChild("HumanoidRootPart") then
        if ba.Character.Humanoid.Health > 0 then
            local t = ba.Character.HumanoidRootPart.Position
            local Z = (Y.HumanoidRootPart.Position - t).magnitude
            if Z <= b8 then
                local bj = bf(tick() * b6 / 10, t)
                Y.HumanoidRootPart.CFrame = Y.HumanoidRootPart.CFrame:lerp(CFrame.new(bj), b9)
            else
                ba = nil
            end
        else
            ba = nil
        end
    else
        ba = bc()
    end
end
local function bk(R)
    b5 = R
    if R then
        bb = game:GetService("RunService").RenderStepped:Connect(aR)
    elseif bb then
        bb:Disconnect()
    end
end
C:AddToggle({Name = "Strafe", Keybind = 1, Default = false, Callback = bk})
C:AddSlider(
    {Name = "Strafe Speed", Min = 1, Max = 30, Precise = 1, Value = b6, Callback = function(aH, aI)
            b6 = aH
        end}
)
C:AddSlider(
    {Name = "Smoothness", Min = 0.1, Max = 1, Precise = 2, Value = b9, Callback = function(aH, aI)
            b9 = aH
        end}
)
C:AddSlider(
    {Name = "Strafe Distance", Min = 1, Max = 20, Precise = 1, Value = b7, Callback = function(aH, aI)
            b7 = aH
        end}
)
C:AddSlider(
    {Name = "Max Target Distance", Min = 1, Max = 50, Value = b8, Callback = function(aH, aI)
            b8 = aH
        end}
)
local bl
D:AddToggle(
    {Name = "Antivoid", Value = false, Callback = function(ae)
            if ae then
                bl = Instance.new("Part")
                bl.Name = "Antivoid"
                bl.Position = Vector3.new(0, -150, 0)
                bl.Size = Vector3.new(1000, 1, 1000)
                bl.Anchored = true
                bl.CanCollide = true
                bl.Transparency = 1
                bl.BrickColor = BrickColor.new("Medium stone grey")
                bl.Parent = game.Workspace
            else
                local bm = game.Workspace:FindFirstChild("Antivoid")
                if bm then
                    bm:Destroy()
                end
            end
        end}
)
local bn =
    D:AddSlider(
    {Name = "Antivoid Transparency", Value = 0, Min = 0, Max = 1, Precise = 1, Callback = function(bo)
            if bl then
                bl.Transparency = bo
            end
        end}
)
local bp, bq, br, bs, bt, bu, bv, bw = 1, 1, 1, false, nil, 0.5, Enum.Material.Neon, Color3.fromRGB(225, 160, 255)
F:AddSlider(
    {Name = "X axis", Min = 1, Max = 10, Callback = function(R)
            bp = R
        end}
)
F:AddSlider(
    {Name = "Y axis", Min = 1, Max = 10, Callback = function(R)
            bq = R
        end}
)
F:AddSlider(
    {Name = "Z axis", Min = 1, Max = 10, Callback = function(R)
            br = R
        end}
)
F:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Callback = function(R)
            bu = R
        end}
)
F:AddDropdown(
    {
        Name = "Material",
        List = {"Plastic", "SmoothPlastic", "Neon", "ForceField", "Glass"},
        Default = "Neon",
        Callback = function(am)
            if am == "Plastic" then
                bv = Enum.Material.Plastic
            elseif am == "SmoothPlastic" then
                bv = Enum.Material.SmoothPlastic
            elseif am == "Neon" then
                bv = Enum.Material.Neon
            elseif am == "ForceField" then
                bv = Enum.Material.ForceField
            elseif am == "Glass" then
                bv = Enum.Material.Glass
            end
        end
    }
)
F:AddColorPicker(
    {Name = "Color", Default = bw, Callback = function(bx)
            bw = bx
        end}
)
F:AddToggle(
    {Name = "Hitbox Visual", Callback = function(ae)
            bs = ae
        end}
)
F:AddToggle(
    {
        Name = "Hitbox",
        Callback = function(ae)
            if ae then
                local function by()
                    bt =
                        game:GetService("RunService").RenderStepped:Connect(
                        function()
                            for W, X in ipairs(game:GetService("Players"):GetPlayers()) do
                                if X.Name ~= game:GetService("Players").LocalPlayer.Name then
                                    pcall(
                                        function()
                                            local bz = X.Character and X.Character:FindFirstChild("HumanoidRootPart")
                                            if bz then
                                                bz.Size = Vector3.new(bp, bq, br)
                                                bz.Transparency = bs and bu or 1
                                                bz.Material = bv
                                                bz.Color = bw
                                                bz.CanCollide = false
                                            end
                                        end
                                    )
                                end
                            end
                        end
                    )
                end
                by()
            else
                if bt then
                    bt:Disconnect()
                    bt = nil
                end
                for W, X in ipairs(game:GetService("Players"):GetPlayers()) do
                    if X.Name ~= game:GetService("Players").LocalPlayer.Name then
                        pcall(
                            function()
                                local bz = X.Character and X.Character:FindFirstChild("HumanoidRootPart")
                                if bz then
                                    bz.Size = Vector3.new(2, 2, 2)
                                    bz.Transparency = 1
                                    bz.Material = Enum.Material.Plastic
                                    bz.CanCollide = false
                                end
                            end
                        )
                    end
                end
            end
        end
    }
)
local bA, bB, bC = false, false, 18
G:AddToggle(
    {Name = "Auto Clicker", Keybind = 1, Callback = function(ae)
            bA = ae
            if ae then
                bB = true
                while bA and bB do
                    mouse1click()
                    wait(1 / bC)
                end
            else
                bB = false
            end
        end}
)
G:AddSlider(
    {Name = "CPS", Min = 1, Max = 50, Def = bC, Callback = function(bo)
            bC = bo
        end}
)
G:AddToggle(
    {
        Name = "Trigger bot",
        Keybind = 1,
        Callback = function(ae)
            triggerbotActive = ae
            local bD
            local bE = 0
            local minInterval = 1 / cpslimit
            local function bF(bG)
                for W, X in pairs(game.Players:GetPlayers()) do
                    if X.Character and bG and bG:IsDescendantOf(X.Character) then
                        return true
                    end
                end
                return false
            end
            if ae then
                bD =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if bF(game.Players.LocalPlayer:GetMouse().Target) then
                            local bH = tick()
                            if bH - bE >= minInterval then
                                bE = bH
                                mouse1press()
                                task.wait()
                                mouse1release()
                            end
                        end
                    end
                )
                getgenv().disable = function()
                    if bD then
                        warn("Disconnecting:", bD)
                        bD:Disconnect()
                        bD = nil
                    end
                    getgenv().disable = nil
                end
            else
                if getgenv().disable then
                    getgenv().disable()
                end
            end
        end
    }
)
G:AddSlider(
    {Name = "CPS limit", Min = 1, Max = 50, Def = cpslimit, Callback = function(bo)
            cpslimit = bo
            minInterval = 1 / cpslimit
        end}
)
local bI, bJ, bK, bL, bM = "None", 0, 0, 0, 0
local function bN(R)
    settings():GetService("NetworkSettings").IncomingReplicationLag = R
end
H:AddDropdown(
    {
        Name = "Method",
        List = {"ReplicationLag", "Axis", "None"},
        Default = bI,
        Callback = function(am)
            bI = am
            if bI == "ReplicationLag" then
                getgenv().Axis = false
                bN(bJ)
            elseif bI == "Axis" then
                getgenv().Axis = true
                getgenv().Z = bM
                getgenv().Y = bL
                getgenv().X = bK
                game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if getgenv().Axis then
                            local bO = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity =
                                Vector3.new(getgenv().X, getgenv().Y, getgenv().Z)
                            game:GetService("RunService").RenderStepped:Wait()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = bO
                        end
                    end
                )
                bN(0)
            end
        end
    }
)
H:AddSlider(
    {Name = "Client Lag", Min = 0, Max = 10, Precise = 2, Def = bJ, Callback = function(bo)
            bJ = bo
            if bI == "ReplicationLag" then
                bN(bJ)
            end
        end}
)
H:AddSlider(
    {Name = "Axis Lag x", Min = 0, Max = 500, Def = bK, Callback = function(bo)
            bK = bo
        end}
)
H:AddSlider(
    {Name = "Axis Lag y", Min = 0, Max = 500, Def = bL, Callback = function(bo)
            bL = bo
        end}
)
H:AddSlider(
    {Name = "Axis Lag z", Min = 0, Max = 500, Def = bM, Callback = function(bo)
            bM = bo
        end}
)
local bP, bQ, bR, bS, ai = false, 1, 30, 30, "Head"
local function bT(bU, bV, bW, bX)
    return bU:Lerp(bV, bW * bX)
end
local function bY(bZ)
    if bP then
        local b_ = nil
        local V = math.huge
        local localPlayer = game:GetService("Players").LocalPlayer
        local c0 = localPlayer.Character
        if c0 then
            local c1 = c0:FindFirstChild(ai).Position
            local c2 = c0:FindFirstChild(ai).CFrame.lookVector
            for W, X in ipairs(game:GetService("Players"):GetPlayers()) do
                if X ~= localPlayer then
                    local c3 = X.Character
                    if c3 then
                        local c4 = c3:FindFirstChild(ai) and c3:FindFirstChild(ai).Position
                        if c4 then
                            local Z = (c1 - c4).magnitude
                            if Z < V and Z <= bR then
                                local c5 = (c4 - c1).unit
                                local bg = math.acos(c2:Dot(c5)) * 180 / math.pi
                                if bg <= bS then
                                    V = Z
                                    b_ = X
                                end
                            end
                        end
                    end
                end
            end
        end
        if b_ then
            local c6 = game:GetService("Workspace").CurrentCamera.CFrame
            local c7 = b_.Character:FindFirstChild(ai) and b_.Character:FindFirstChild(ai).Position
            if c7 then
                local c8 = CFrame.new(c6.Position, c7)
                local c9 = bT(c6, c8, bZ, bQ)
                game:GetService("Workspace").CurrentCamera.CFrame = c9
            end
        end
    end
end
I:AddToggle(
    {Name = "Aim Assist", Keybind = 1, Callback = function(ae)
            bP = ae
        end}
)
I:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = ai,
        Callback = function(am)
            ai = am
        end
    }
)
I:AddSlider(
    {Name = "Smoothness", Min = 1, Max = 25, Default = 1, Precise = 2, Callback = function(R)
            bQ = R
        end}
)
I:AddSlider(
    {Name = "Range", Min = 5, Max = 100, Default = 30, Callback = function(R)
            bR = R
        end}
)
I:AddSlider(
    {Name = "Aim fov", Min = 0, Max = 360, Default = 30, Callback = function(R)
            bS = R
        end}
)
game:GetService("RunService").RenderStepped:Connect(
    function(bZ)
        bY(bZ)
    end
)
local ca, cb, cc, cd = 40, 8, 0.8, 0.8
L:AddSlider(
    {Name = "Hide distance", Min = 0, Max = 250, Value = ca, Callback = function(R)
            ca = R
        end}
)
L:AddSlider(
    {Name = "Corners", Min = 0, Max = 50, Value = cb, Callback = function(R)
            cb = R
        end}
)
L:AddSlider(
    {Name = "Position X", Min = 0, Max = 1, Precise = 2, Value = cc, Callback = function(R)
            cc = R
            if gui then
                gui.Frame.Position = UDim2.new(cc, 0, cd, 0)
            end
        end}
)
L:AddSlider(
    {Name = "Position Y", Min = 0, Max = 1, Precise = 2, Value = cd, Callback = function(R)
            cd = R
            if gui then
                gui.Frame.Position = UDim2.new(cc, 0, cd, 0)
            end
        end}
)
local gui
local function ce()
    if gui then
        gui:Destroy()
    end
    gui = Instance.new("ScreenGui")
    gui.Name = "PlayerInfoGUI"
    gui.ResetOnSpawn = false
    gui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    local cf = Instance.new("Frame", gui)
    cf.Name = "Frame"
    cf.Size = UDim2.new(0.1, 0, 0.08, 0)
    cf.Position = UDim2.new(cc, 0, cd, 0)
    cf.BackgroundColor3 = Color3.new(0, 0, 0)
    cf.BackgroundTransparency = 0.5
    cf.BorderSizePixel = 2
    cf.BorderColor3 = Color3.fromRGB(148, 0, 211)
    cf.Active = true
    local cg = Instance.new("UICorner", cf)
    cg.CornerRadius = UDim.new(0, cb)
    local ch = Instance.new("TextLabel", cf)
    ch.Text = "..."
    ch.TextColor3 = Color3.new(1, 1, 1)
    ch.Size = UDim2.new(1, 0, 0.3, 0)
    ch.Position = UDim2.new(0, 0, 0, 0)
    ch.BackgroundTransparency = 1
    ch.Font = Enum.Font.SourceSansBold
    ch.TextSize = 20
    ch.TextWrapped = true
    ch.TextXAlignment = Enum.TextXAlignment.Center
    local ci = Instance.new("TextLabel", cf)
    ci.Text = ""
    ci.TextColor3 = Color3.new(1, 1, 1)
    ci.Size = UDim2.new(1, 0, 0.3, 0)
    ci.Position = UDim2.new(0, 0, 0.3, 0)
    ci.BackgroundTransparency = 1
    ci.Font = Enum.Font.SourceSansBold
    ci.TextSize = 20
    ci.TextWrapped = true
    ci.TextXAlignment = Enum.TextXAlignment.Center
    local cj = Instance.new("Frame", cf)
    cj.Size = UDim2.new(0.6, 0, 0.2, 0)
    cj.Position = UDim2.new(0.2, 0, 0.7, 0)
    cj.BackgroundColor3 = Color3.new(0, 0, 0)
    cj.BorderSizePixel = 2
    cj.BorderColor3 = Color3.new(0, 0, 0)
    local ck = Instance.new("Frame", cf)
    ck.Size = UDim2.new(0.6, 0, 0.2, 0)
    ck.Position = UDim2.new(0.2, 0, 0.7, 0)
    ck.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    ck.BorderSizePixel = 0
    local cl = Instance.new("TextLabel", cf)
    cl.Text = ""
    cl.TextColor3 = Color3.new(1, 0, 0)
    cl.Size = UDim2.new(0.6, 0, 0.3, 0)
    cl.Position = UDim2.new(0.615, 0, 0.7, 0)
    cl.BackgroundTransparency = 1
    cl.Font = Enum.Font.SourceSansBold
    cl.TextSize = 16
    cl.TextWrapped = true
    cl.TextXAlignment = Enum.TextXAlignment.Center
    local cm = Instance.new("Frame", cf)
    cm.Size = UDim2.new(1, 0, 0, 2)
    cm.Position = UDim2.new(0, 0, 0.3, 0)
    cm.BorderSizePixel = 0
    cm.BackgroundColor3 = Color3.fromRGB(148, 0, 211)
    cm.BackgroundTransparency = 0.5
    local cn = Instance.new("Frame", cf)
    cn.Size = UDim2.new(1, 4, 1, 4)
    cn.Position = UDim2.new(-0.01, 0, -0.01, 0)
    cn.BackgroundColor3 = Color3.fromRGB(100, 0, 150)
    cn.BorderSizePixel = 0
    cn.ZIndex = -1
    local co = Instance.new("TextLabel", cf)
    co.TextColor3 = Color3.new(1, 1, 1)
    co.Size = UDim2.new(1, 0, 0.1, 0)
    co.Position = UDim2.new(0.05, 0, cl.Position.Y.Scale, cl.Position.Y.Offset - -8)
    co.BackgroundTransparency = 1
    co.Font = cl.Font
    co.TextSize = cl.TextSize
    co.TextWrapped = true
    co.TextXAlignment = Enum.TextXAlignment.Left
    local function cp()
        local as, at = nil, math.huge
        local cq = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
        local cr = false
        for W, X in ipairs(game.Players:GetPlayers()) do
            local Y = X.Character
            if X ~= game.Players.LocalPlayer and Y and Y:FindFirstChild("HumanoidRootPart") then
                local Z = (Y.HumanoidRootPart.Position - cq).magnitude
                if Z < ca then
                    cr = true
                    if Z < at then
                        as, at = X, Z
                    end
                end
            end
        end
        if cr then
            ch.Text = as.Name
            local cs = math.floor(as.Character.Humanoid.Health)
            local ct = tostring(cs)
            local cu = as.Character.Humanoid.MaxHealth
            local cv = cs / cu
            local cw = UDim2.new(0.6 * cv, 0, 0.2, 0)
            local cx = TweenInfo.new(0.18, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
            local cy = d:Create(ck, cx, {Size = cw})
            cy:Play()
            local bx = Color3.fromRGB(255 * (1 - cv), 255 * cv, 0)
            ck.BackgroundColor3 = bx
            local cz = ci.Text
            local cA = 1
            local cB = math.max(#cz, #ct)
            local cC = 0.08
            local cD
            cD =
                game:GetService("RunService").Heartbeat:Connect(
                function()
                    if cA <= cB then
                        ci.Text = ct:sub(1, cA)
                        cA = cA + 1
                    else
                        cD:Disconnect()
                    end
                end
            )
            ci.Visible = true
            cj.Visible = true
            ck.Visible = true
            local cE = math.floor(game.Players.LocalPlayer.Character.Humanoid.Health)
            if cE > cs then
                cl.Text = "winning"
                cl.TextColor3 = Color3.new(0, 1, 0)
            elseif cE < cs then
                cl.Text = "losing"
                cl.TextColor3 = Color3.new(1, 0, 0)
            else
                cl.Text = "even"
                cl.TextColor3 = Color3.fromRGB(44, 25, 239)
            end
            cl.Font = Enum.Font.FredokaOne
            local cF = string.format("%.1f", at)
            if co.Text ~= cF then
                local cG = co.Text
                local cH = 1
                local cI = math.max(#cG, #cF)
                local cJ = 0.03
                local cK
                cK =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if cH <= cI then
                            co.Text = cF:sub(1, cH)
                            cH = cH + 1
                        else
                            cK:Disconnect()
                        end
                    end
                )
            end
            co.Visible = true
            cl.Visible = true
            cf.Visible = true
        else
            ch.Text = ""
            ci.Visible = false
            cj.Visible = false
            ck.Visible = false
            cl.Visible = false
            co.Visible = false
            cf.Visible = false
        end
    end
    game:GetService("RunService").Heartbeat:Connect(cp)
end
L:AddToggle(
    {Name = "Target Hud", Callback = function(ae)
            if ae then
                ce()
            else
                if gui then
                    gui:Destroy()
                    gui = nil
                end
            end
        end}
)
local cL = {Ambient = nil, OutdoorAmbient = nil, FogColor = nil, FogStart = nil, FogEnd = nil, PartColors = {}}
local cM, cN, cO = Color3.new(225, 160, 255), Color3.fromRGB(225, 160, 255), Vector3.new(2, 1, 3)
local cP = false
local function cQ(ae)
    local cR = game:GetService("Lighting")
    if ae then
        cL.Ambient = cR.Ambient
        cL.OutdoorAmbient = cR.OutdoorAmbient
        cL.FogColor = cR.FogColor
        cL.FogStart = cR.FogStart
        cL.FogEnd = cR.FogEnd
        for W, aq in ipairs(workspace:GetDescendants()) do
            if aq:IsA("BasePart") then
                cL.PartColors[aq] = aq.Color
            end
        end
        cR.Ambient = cM
        cR.OutdoorAmbient = cM
        cR.FogColor = cM
        cR.FogStart = cL.FogStart or 0
        cR.FogEnd = cL.FogEnd or 100
        for W, aq in ipairs(workspace:GetDescendants()) do
            if aq:IsA("BasePart") then
                aq.Color = cM
            end
        end
    else
        cR.Ambient = cL.Ambient
        cR.OutdoorAmbient = cL.OutdoorAmbient
        cR.FogColor = cL.FogColor
        cR.FogStart = cL.FogStart
        cR.FogEnd = cL.FogEnd
        for W, aq in ipairs(workspace:GetDescendants()) do
            if aq:IsA("BasePart") and cL.PartColors[aq] then
                aq.Color = cL.PartColors[aq]
            end
        end
    end
end
M:AddToggle(
    {Name = "Ambient", Callback = function(ae)
            cQ(ae)
        end}
)
local cS = {}
M:AddToggle(
    {Name = "Low gfx", Callback = function(cT)
            local workspace = game:GetService("Workspace")
            for W, aq in ipairs(workspace:GetDescendants()) do
                if aq:IsA("BasePart") then
                    if cT then
                        cS[aq] = aq.Material
                        aq.Material = Enum.Material.Ice
                    else
                        aq.Material = cS[aq] or aq.Material
                        cS[aq] = nil
                    end
                end
            end
        end}
)
M:AddToggle(
    {Name = "Better sword", Callback = function(ae)
            cP = ae
            if not cP then
                local cU = game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh
                cU.VertexColor = Vector3.new(225 / 255, 160 / 255, 255 / 255)
                cU.Offset = Vector3.new(0, 0, 0)
            end
        end}
)
game:GetService("RunService").Heartbeat:Connect(
    function()
        if cP then
            local cU = game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh
            cU.VertexColor = Vector3.new(cN.r, cN.g, cN.b)
            cU.Offset = cO
        end
    end
)
M:AddSlider(
    {Name = "Sword front", Min = -10, Max = 10, Value = cO.X, Callback = function(R)
            cO = Vector3.new(R, cO.Y, cO.Z)
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.Offset = cO
            end
        end}
)
M:AddSlider(
    {Name = "Sword vertical", Min = -10, Max = 10, Value = cO.Y, Callback = function(R)
            cO = Vector3.new(cO.X, R, cO.Z)
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.Offset = cO
            end
        end}
)
M:AddSlider(
    {Name = "Sword side", Min = -10, Max = 10, Value = cO.Z, Callback = function(R)
            cO = Vector3.new(cO.X, cO.Y, R)
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.Offset = cO
            end
        end}
)
M:AddSlider(
    {Name = "Fog Start", Min = 0, Max = 1000, Value = cL.FogStart or 0, Callback = function(R)
            cL.FogStart = R
            if cP then
                game:GetService("Lighting").FogStart = R
            end
        end}
)
M:AddSlider(
    {Name = "Fog End", Min = 0, Max = 1000, Value = cL.FogEnd or 100, Callback = function(R)
            cL.FogEnd = R
            if cP then
                game:GetService("Lighting").FogEnd = R
            end
        end}
)
M:AddColorpicker(
    {Name = "Atmo color", Value = cM, Callback = function(cV, cW)
            cM = cV
            if ae then
                local cR = game:GetService("Lighting")
                cR.Ambient = cM
                cR.OutdoorAmbient = cM
                cR.FogColor = cM
                for W, aq in ipairs(workspace:GetDescendants()) do
                    if aq:IsA("BasePart") then
                        aq.Color = cM
                    end
                end
            end
        end}
)
M:AddColorpicker(
    {Name = "Sword color", Value = cN, Callback = function(cV, cW)
            cN = cV
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.VertexColor =
                    Vector3.new(cN.r, cN.g, cN.b)
            end
        end}
)
local cX, cY = 1, false
getgenv().res = cX
M:AddToggle(
    {Name = "ress", Callback = function(cT)
            cY = cT
            if cT then
                while cY do
                    game:GetService("RunService").RenderStepped:Wait()
                    j.CFrame = j.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().res, 0, 0, 0, 1)
                end
            end
        end}
)
M:AddSlider(
    {Name = "Resolution", Min = 0, Max = 1.2, Precise = 2, Value = cX, Callback = function(R)
            getgenv().res = R
        end}
)
local cZ, c_, d0, d1, d2 = 0.5, Color3.fromRGB(200, 150, 255), false, false, false
local function d3(d4)
    return Color3.new(d4.r, d4.g, d4.b)
end
local function d5(a3)
    local d4 = a3.TeamColor
    local d5 = Instance.new("Highlight")
    d5.Name = a3.Name
    d5.FillColor = c_
    d5.DepthMode = "AlwaysOnTop"
    d5.FillTransparency = cZ
    d5.OutlineTransparency = cZ
    d5.Parent = Storage
    local d6 = a3.Character
    if d6 then
        d5.Adornee = d6
    end
    a3.CharacterAdded:Connect(
        function(d7)
            d5.Adornee = d7
        end
    )
    a3:GetPropertyChangedSignal("Team"):Connect(
        function()
            local d8 = a3.TeamColor
            d5.FillColor = d3(d8)
        end
    )
end
local function d9()
    for W, X in ipairs(game.Players:GetPlayers()) do
        if X == game.Players.LocalPlayer then
            if d0 then
                if not Storage:FindFirstChild(X.Name) then
                    d5(X)
                end
            else
                local da = Storage:FindFirstChild(X.Name)
                if da then
                    da:Destroy()
                end
            end
        else
            if not Storage:FindFirstChild(X.Name) then
                d5(X)
            end
        end
    end
end
local function db(ae)
    if ae then
        d2 = true
        local dc = game:GetService("CoreGui")
        local b = game:GetService("Players")
        Storage = Instance.new("Folder")
        Storage.Parent = dc
        Storage.Name = "Highlight_Storage"
        d9()
        coroutine.wrap(
            function()
                while d2 do
                    wait(0.15)
                    d9()
                end
            end
        )()
    else
        d2 = false
        local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
        if Storage then
            for W, dd in ipairs(Storage:GetChildren()) do
                dd:Destroy()
            end
            Storage:Destroy()
        end
    end
end
local function de(ae)
    d0 = ae
    d9()
end
local function df(ae)
    d1 = ae
    d9()
end
local function dg(cV)
    c_ = cV
    local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
    if Storage then
        for W, dd in ipairs(Storage:GetChildren()) do
            dd.FillColor = cV
        end
    end
end
K:AddToggle(
    {Name = "chams", Value = false, Callback = function(ae)
            db(ae)
        end}
)
K:AddColorpicker(
    {Name = "Color", Value = c_, Callback = function(cV, cW)
            dg(cV)
        end}
)
K:AddToggle({Name = "Self", Value = false, Callback = de})
K:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Value = cZ, Callback = function(R)
            cZ = R
            local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
            if Storage then
                for W, dd in ipairs(Storage:GetChildren()) do
                    dd.FillTransparency = R
                    dd.OutlineTransparency = R
                end
            end
        end}
)
local dh = {
    {Name = "Mouse", Value = "Mouse"},
    {Name = "Bottom Center", Value = "BottomCenter"},
    {Name = "Top Center", Value = "TopCenter"},
    {Name = "Left Center", Value = "LeftCenter"},
    {Name = "Right Center", Value = "RightCenter"}
}
local di = 1
K:AddDropdown(
    {
        Name = "Tracer Source",
        Default = dh[di].Name,
        List = {dh[1].Name, dh[2].Name, dh[3].Name, dh[4].Name, dh[5].Name},
        Callback = function(R)
            for dj, dk in ipairs(dh) do
                if dk.Name == R then
                    di = dj
                    break
                end
            end
        end
    }
)
K:AddToggle(
    {
        Name = "Tracer",
        Value = false,
        Callback = function(ae)
            Tracer = ae
            local e = game:GetService("RunService")
            local b = game:GetService("Players")
            local dl = game:GetService("Workspace")
            local dm = game:GetService("UserInputService")
            local j = dl.CurrentCamera
            local settings = {
                DefaultSettings = false,
                TeamCheck = false,
                TracersVisible = true,
                TracerColor = Color3.fromRGB(128, 0, 128),
                TracerThickness = 1.8,
                TracerTransparency = 0.8
            }
            local dn = {}
            local function dp(Y)
                local cm = Drawing.new("Line")
                cm.Thickness = settings.TracerThickness
                cm.Transparency = settings.TracerTransparency
                cm.Visible = false
                cm.Color = settings.TracerColor
                local function dq()
                    if not Y:IsDescendantOf(dl) or not Y:FindFirstChild("HumanoidRootPart") then
                        cm.Visible = false
                        return
                    end
                    local dr = Y:FindFirstChild("Head") or Y:FindFirstChild("HumanoidRootPart")
                    if not dr then
                        cm.Visible = false
                        return
                    end
                    local ds = dr.Position
                    local dt, du = j:WorldToViewportPoint(ds)
                    local dv = dh[di]
                    if dv.Value == "Mouse" then
                        cm.From = Vector2.new(dm:GetMouseLocation().X, dm:GetMouseLocation().Y)
                    elseif dv.Value == "BottomCenter" then
                        cm.From = Vector2.new(j.ViewportSize.X / 2, j.ViewportSize.Y)
                    elseif dv.Value == "TopCenter" then
                        cm.From = Vector2.new(j.ViewportSize.X / 2, 0)
                    elseif dv.Value == "LeftCenter" then
                        cm.From = Vector2.new(0, j.ViewportSize.Y / 2)
                    elseif dv.Value == "RightCenter" then
                        cm.From = Vector2.new(j.ViewportSize.X, j.ViewportSize.Y / 2)
                    end
                    if du then
                        cm.To = Vector2.new(dt.X, dt.Y)
                        if settings.TeamCheck then
                            cm.Visible = b.LocalPlayer.Team ~= Y.Team
                        else
                            cm.Visible = Tracer
                        end
                    else
                        cm.Visible = false
                    end
                end
                dn[Y] = cm
                return cm, dq
            end
            local function dw(X, Y)
                if X == b.LocalPlayer then
                    return
                end
                if not Y or not Y:IsDescendantOf(dl) or not Y:FindFirstChild("HumanoidRootPart") then
                    return
                end
                local dx, dy = dp(Y)
                e.RenderStepped:Connect(
                    function()
                        dy()
                    end
                )
                Y.AncestryChanged:Connect(
                    function()
                        if not Y:IsDescendantOf(dl) then
                            dx.Visible = false
                            dn[Y] = nil
                        end
                    end
                )
            end
            b.PlayerAdded:Connect(
                function(X)
                    X.CharacterAdded:Connect(
                        function(Y)
                            dw(X, Y)
                        end
                    )
                end
            )
            for W, X in ipairs(b:GetPlayers()) do
                dw(X, X.Character)
            end
            dm.InputBegan:Connect(
                function(dz)
                    if dz.KeyCode == settings.ModeSkipKey and not dm:GetFocusedTextBox() then
                        di = di % #dh + 1
                        for W, cm in pairs(dn) do
                            cm.Visible = settings.TracersVisible and Tracer
                        end
                    elseif dz.KeyCode == settings.DisableKey and not dm:GetFocusedTextBox() then
                        settings.TracersVisible = not settings.TracersVisible
                        for W, cm in pairs(dn) do
                            cm.Visible = settings.TracersVisible and Tracer
                        end
                    end
                end
            )
            if settings.DefaultSettings then
                settings.TeamCheck = false
                settings.TracersVisible = true
                settings.TracerColor = Color3.fromRGB(128, 0, 128)
                settings.TracerThickness = 1.8
                settings.TracerTransparency = 0.8
            end
        end
    }
)
local X, dA = game.Players.LocalPlayer, false
local function dB(Y)
    local dr = Y:FindFirstChild("Head")
    if dr then
        local dC = dr:FindFirstChild("face")
        if dC then
            dC:Destroy()
        end
    end
end
local function dD(aq)
    if aq:IsA("Accessory") or aq:IsA("Shirt") or aq:IsA("Pants") or aq.Name == "Face" then
        aq:Destroy()
    elseif aq:IsA("BasePart") then
        aq.Material = Enum.Material.ForceField
        aq.Color = Color3.fromRGB(225, 160, 255)
    end
end
local function dE(Y)
    dB(Y)
    for W, aq in ipairs(Y:GetChildren()) do
        dD(aq)
    end
    Y.ChildAdded:Connect(dD)
end
local function dF(Y)
    wait(0.14)
    if dA then
        dE(Y)
    end
end
K:AddToggle(
    {Name = "Self visual", Value = false, Callback = function(cT)
            dA = cT
            if cT then
                dF(X.Character or X.CharacterAdded:Wait())
            end
        end}
)
X.CharacterAdded:Connect(dF)
