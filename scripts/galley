local a = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
a.UnloadCallback = function()
    getgenv().Galley = nil
end
local b = game:GetService("Players")
local c = game:GetService("StarterGui")
local d = game:GetService("TweenService")
local e = game:GetService("RunService")
local f = game:GetService("ReplicatedStorage")
local g = game.Players.LocalPlayer
local h = f.Packages.Knit.Services.ToolService.RF
local i = g:GetMouse()
local j = workspace.CurrentCamera
local k = game.Players.LocalPlayer.Character.Humanoid.Health
local function l(m, n)
    h.ToggleBlockSword:InvokeServer(m, n)
end
local function o(p)
    local q = game.Players.LocalPlayer:WaitForChild("Backpack"):FindFirstChild(p)
    if q and q:IsA("Tool") then
        q.Parent = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    end
end
local function r(p)
    local q = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait():FindFirstChild(p)
    if q and q:IsA("Tool") then
        q.Parent = game.Players.LocalPlayer:WaitForChild("Backpack")
    end
end
local function s(t, u, v, w)
    return Vector3.new(t.X + u.X * v, t.Y + w, t.Z + u.Z * v)
end
local x = a:CreateWindow({Name = "Galley | rw", Themeable = {Image = "7059346386", Credit = false}})
local y = x:CreateTab({Name = "Blatant"})
local z = y:CreateSection({Name = "Aura"})
local A = y:CreateSection({Name = "Bow Aura"})
local B = y:CreateSection({Name = "Movement", Side = "Right"})
local C = y:CreateSection({Name = "Strafe", Side = "Right"})
local D = y:CreateSection({Name = "Anti void", Side = "Right"})
local E = x:CreateTab({Name = "Closet"})
local F = E:CreateSection({Name = "Hitbox", Side = "Right"})
local G = E:CreateSection({Name = "Auto"})
local H = E:CreateSection({Name = "Lag", Side = "Right"})
local I = E:CreateSection({Name = "Aim"})
local J = x:CreateTab({Name = "Visuals"})
local K = J:CreateSection({Name = "chams"})
local L = J:CreateSection({Name = "Target hud"})
local M = J:CreateSection({Name = "Render", Side = "Right"})
local N, O, P, Q = "Closest", "PreSimulation", false, 24
z:AddDropdown(
    {
        Name = "RunService type",
        Default = "PreSimulation",
        List = {"Stepped", "PreSimulation", "Heartbeat", "RenderStepped", "PreRender", "PostSimulation"},
        Callback = function(R)
            O = R
        end
    }
)
local function S()
    local T = game:GetService("Players"):GetPlayers()
    local U = nil
    local V = math.huge
    for W, X in ipairs(T) do
        local Y = X.Character
        if Y and Y:FindFirstChild("Humanoid") and Y.Humanoid.Health > 0 and not Y:FindFirstChildOfClass("ForceField") then
            local Z =
                (Y.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
            if Z < V then
                V = Z
                U = Y.HumanoidRootPart.Position
            end
        end
    end
    return U
end
local function _(a0)
    local a1 = nil
    local a2 = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    if a0 == "Closest" then
        local Z = math.huge
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 < Z then
                    a1, Z = a3, a4
                end
            end
        end
    elseif a0 == "Random" then
        local a5 = {}
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 <= Q then
                    table.insert(a5, a3)
                end
            end
        end
        if #a5 > 0 then
            a1 = a5[math.random(1, #a5)]
        end
    elseif a0 == "Farthest" then
        local a6 = 0
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 > a6 and a4 <= Q then
                    a1, a6 = a3, a4
                end
            end
        end
    elseif a0 == "Weakest" then
        local a7 = math.huge
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 <= Q and a3.Character.Humanoid.Health < a7 then
                    a1, a7 = a3, a3.Character.Humanoid.Health
                end
            end
        end
    elseif a0 == "Strongest" then
        local a8 = 0
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 <= Q and a3.Character.Humanoid.Health > a8 then
                    a1, a8 = a3, a3.Character.Humanoid.Health
                end
            end
        end
    end
    return a1
end
z:AddDropdown(
    {
        Name = "Targeting Mode",
        Default = "Closest",
        List = {"Closest", "Farthest", "Strongest", "Weakest", "Random"},
        Callback = function(R)
            N = R
        end
    }
)
local function a9()
    local aa = _(N)
    if aa then
        local a4 =
            (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - aa.Character.HumanoidRootPart.Position).Magnitude
        if a4 <= Q and aa.Character.Humanoid.Health > 0 and not aa.Character:FindFirstChildOfClass("ForceField") then
            if P then
                for W, ab in ipairs({"WoodenSword", "Sword"}) do
                    l(true, ab)
                end
            end
            for W, n in ipairs({"WoodenSword", "Sword"}) do
                h.AttackPlayerWithSword:InvokeServer(aa.Character, critsActive, n)
            end
        else
            if P then
                for W, ab in ipairs({"WoodenSword", "Sword"}) do
                    l(false, ab)
                end
            end
        end
    end
end
local ac
local function ad(ae)
    if ae then
        if not ac then
            ac =
                game:GetService("RunService")[O]:Connect(
                function()
                    pcall(a9)
                end
            )
        end
    elseif ac then
        ac:Disconnect()
        ac = nil
    end
end
z:AddToggle({Name = "Aura", Default = false, Keybind = 1, Callback = ad})
z:AddToggle(
    {Name = "Auto block", Default = false, Callback = function(ae)
            P = ae
        end}
)
z:AddToggle(
    {Name = "Crits", Default = false, Callback = function(ae)
            critsActive = ae
        end}
)
z:AddSlider(
    {Name = "Aura Range", Min = 1, Max = 36, Default = 24, Callback = function(R)
            Q = R
        end}
)
local af
z:AddToggle(
    {
        Name = "Click Aura",
        Default = false,
        Keybind = 1,
        Callback = function(ag)
            local X = game.Players.LocalPlayer
            local i = X:GetMouse()
            local function ah(X)
                local ai, aj = nil, math.huge
                for W, ak in pairs(game.Players:GetPlayers()) do
                    if ak ~= X and ak.Character and ak.Character:FindFirstChild("HumanoidRootPart") then
                        local Z =
                            (X.Character.HumanoidRootPart.Position - ak.Character.HumanoidRootPart.Position).Magnitude
                        if Z < aj then
                            aj, ai = Z, ak
                        end
                    end
                end
                return ai
            end
            local function al()
                local ai = ah(X)
                if ai and ai.Character then
                    local am = {"WoodenSword", "Sword"}
                    for W, n in ipairs(am) do
                        local an = {[1] = workspace:WaitForChild(ai.Name), [2] = true, [3] = n}
                        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild(
                            "Services"
                        ):WaitForChild("ToolService"):WaitForChild("RF"):WaitForChild("AttackPlayerWithSword"):InvokeServer(
                            unpack(an)
                        )
                    end
                end
            end
            if ag then
                af = i.Button1Down:Connect(al)
            else
                if af then
                    af:Disconnect()
                    af = nil
                end
            end
        end
    }
)
local function ao()
    if FaceTarget then
        local ap = S()
        task.wait(0.05)
        local an = {[1] = Vector3.new(ap.X, ap.Y, ap.Z)}
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild(
            "ToolService"
        ):WaitForChild("RF"):WaitForChild("UpdateHeadRotation"):InvokeServer(unpack(an))
    end
end
game:GetService("RunService").Heartbeat:Connect(ao)
z:AddToggle(
    {Name = "Serverside Face", Default = false, Callback = function(ae)
            FaceTarget = ae
        end}
)
local aq, ar, w, as, ae = "Head", 30, 1, 0.1, false
A:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = aq,
        Callback = function(at)
            aq = at
        end
    }
)
A:AddSlider(
    {Name = "Charge time", Min = 0, Max = 50, Default = ar, Callback = function(R)
            ar = R
        end}
)
A:AddSlider(
    {Name = "Y Offset", Min = -15, Max = 15, Default = w, Callback = function(R)
            w = R
        end}
)
A:AddSlider(
    {Name = "Prediction", Min = 0, Max = 3.0, Default = as, Precise = 1, Callback = function(R)
            as = R
        end}
)
A:AddToggle(
    {Name = "Bow Aura", Callback = function(au)
            ae = au
            if ae then
                local av = game.Players.LocalPlayer
                local function aw()
                    while true do
                        if ae then
                            local Y = av.Character or av.CharacterAdded:Wait()
                            local ax = Y:WaitForChild(aq)
                            local ay = ax and ax.Position
                            if not ay then
                                return
                            end
                            local ai, aj, az
                            for W, X in ipairs(game.Players:GetPlayers()) do
                                if X ~= av and X.Character then
                                    local aA = X.Character:FindFirstChild(aq)
                                    local t = aA and aA.Position
                                    local aB = X.Character:FindFirstChildOfClass("Humanoid").RootPart.Velocity
                                    if t then
                                        local Z = (t - ay).magnitude
                                        local aC = s(t, aB, as, w)
                                        local aD = (aC - ay).magnitude
                                        if not aj or aD < aj then
                                            ai = X
                                            aj = aD
                                            az = aC
                                        end
                                    end
                                end
                            end
                            if ai and az then
                                o("DefaultBow")
                                game.Players.LocalPlayer.Character.DefaultBow.__comm__.RF.Fire:InvokeServer(az, ar)
                                r("DefaultBow")
                            end
                        end
                        wait(2.970)
                    end
                end
                coroutine.wrap(aw)()
            end
        end}
)
local aE, aF, aG, aH, aI, aJ = 1.0, false, false, 1.0 / 200, false, false
local function aK()
    if aG then
        aI = true
        if aJ then
            aJ:Disconnect()
        end
        aJ =
            game:GetService("RunService").Stepped:Connect(
            function()
                if not aI then
                    return
                end
                local aL = aH
                if aF and game.Players.LocalPlayer:GetAttribute("Blocking") == true then
                    aL = aL * aE
                end
                local Y = game.Players.LocalPlayer.Character
                if Y and Y:FindFirstChild("HumanoidRootPart") then
                    Y.HumanoidRootPart.CFrame = Y.HumanoidRootPart.CFrame + Y.Humanoid.MoveDirection * aL
                end
            end
        )
    else
        aI = false
        if aJ then
            aJ:Disconnect()
        end
    end
end
B:AddSlider(
    {Name = "Block speed", Min = 1, Max = 2.20, Value = aE, Precise = 2, Callback = function(R)
            aE = R
        end}
)
B:AddToggle(
    {Name = "Block noslow", Value = aF, Callback = function(ae)
            aF = ae
        end}
)
B:AddToggle(
    {Name = "Speed", Value = aG, Keybind = 1, Callback = function(ae)
            aG = ae
            aK()
        end}
)
B:AddSlider(
    {Name = "Speed", Min = 0, Max = 50, Value = aH * 200, Callback = function(aM, aN)
            aH = aM / 200
            if aG then
                aK()
            end
        end}
)
game.Players.LocalPlayer.CharacterAdded:Connect(
    function()
        aK()
    end
)
B:AddSlider(
    {Name = "Gravity", Min = 0, Max = 192, Callback = function(aM, aN)
            workspace.Gravity = aM
        end}
)
local aO, aP, aQ = {}, nil, false
local function aR()
    for W, ax in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if ax:IsA("BasePart") and ax.CanCollide then
            aO[ax] = true
            ax.CanCollide = false
        end
    end
end
B:AddToggle(
    {Name = "Phase", Value = aQ, Keybind = 1, Callback = function(ae)
            aQ = ae
            if ae then
                aP = game:GetService("RunService").Stepped:Connect(aR)
            else
                if aP then
                    aP:Disconnect()
                end
                for ax in pairs(aO) do
                    if ax then
                        ax.CanCollide = true
                    end
                end
                table.clear(aO)
            end
        end}
)
local aS, aT = false, 0.80
B:AddToggle(
    {Name = "Air Check", Value = aS, Callback = function(ae)
            aS = ae
        end}
)
B:AddToggle(
    {Name = "Bhop", Value = BhopActive, Keybind = 1, Callback = function(ae)
            BhopActive = ae
            if ae then
                while ae do
                    if
                        not aS or
                            game.Players.LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall
                     then
                        game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(
                            Enum.HumanoidStateType.Jumping
                        )
                        task.wait(aT)
                    end
                    if not BhopActive then
                        break
                    end
                    task.wait()
                end
            end
        end}
)
B:AddSlider(
    {Name = "Bhop delay", Min = 0, Max = 1, Precise = 2, Value = aT, Callback = function(aM, aN)
            aT = aM
        end}
)
local aU = false
local aV
local function aW(Y)
    if Y:FindFirstChild("HumanoidRootPart") then
        local aX = Y.HumanoidRootPart.Position
        local w = Y.Humanoid.HipHeight - -1
        aV.Position = Vector3.new(aX.X, aX.Y - w, aX.Z)
    end
end
B:AddToggle(
    {Name = "Fly", Value = aU, Keybind = 1, Callback = function(ae)
            aU = ae
            local X = game.Players.LocalPlayer
            local Y = X.Character or X.CharacterAdded:Wait()
            if ae then
                aV = Instance.new("Part")
                aV.Size = Vector3.new(2, 0.1, 2)
                aV.Anchored = true
                aV.CanCollide = true
                aV.Transparency = 1
                aV.BrickColor = BrickColor.new("Medium stone grey")
                aV.Parent = game.Workspace
                while aU do
                    aW(Y)
                    task.wait()
                end
            else
                if aV then
                    aV:Destroy()
                end
            end
        end}
)
local aY, aZ = false, 0.02
local function a_(b0, b1, b2)
    local b3, b4, b5 = math.clamp, Vector3.new, tick()
    local b6 = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if b6 then
        b6.Anchored = true
    end
    while tick() - b5 <= aZ do
        if b6 then
            b6.Velocity = b4(b3(b6.Velocity.X, -b0, b0), b3(b6.Velocity.Y, -b1, b1), b3(b6.Velocity.Z, -b2, b2))
        end
        task.wait()
    end
    if b6 then
        b6.Anchored = false
    end
end
local function b7(b8)
    if aY and k and b8 < k then
        a_(0, 0, 0)
    end
    k = b8
end
local function b9()
    while aY do
        b7(game.Players.LocalPlayer.Character.Humanoid.Health)
        task.wait(0.03)
    end
end
game.Players.LocalPlayer.Character.Humanoid.HealthChanged:Connect(b7)
B:AddToggle(
    {Name = "Antikb", Default = false, Callback = function(R)
            aY = R
            if aY then
                spawn(b9)
            end
        end}
)
B:AddSlider(
    {Name = "Anti kb no-move", Min = 0, Max = 1, Precise = 2, Default = 0.02, Callback = function(R)
            aZ = R
        end}
)
local ba = false
local bb = 20
local bc = 5
local bd = 20
local be = 0.1
local bf = nil
local bg = nil
local function bh()
    local aj = math.huge
    local bi = nil
    local X = game.Players.LocalPlayer
    local Y = X.Character or X.CharacterAdded:Wait()
    local T = game:GetService("Players")
    for W, ak in pairs(T:GetPlayers()) do
        if ak ~= X and ak.Character and ak.Character:FindFirstChild("HumanoidRootPart") then
            local Z = (Y.HumanoidRootPart.Position - ak.Character.HumanoidRootPart.Position).magnitude
            if Z < aj and ak.Character.Humanoid.Health > 0 then
                aj = Z
                bi = ak
            end
        end
    end
    return bi
end
local function bj(bk, t)
    local bl = Vector3.new(math.cos(bk) * bc, 0, math.sin(bk) * bc)
    return t + bl
end
local function aW()
    local X = game.Players.LocalPlayer
    local Y = X.Character
    local bm = game:GetService("RunService")
    if bf and bf.Character and bf.Character:FindFirstChild("HumanoidRootPart") then
        if bf.Character.Humanoid.Health > 0 then
            local t = bf.Character.HumanoidRootPart.Position
            local Z = (Y.HumanoidRootPart.Position - t).magnitude
            if Z <= bd then
                local bn = bj(tick() * bb / 10, t)
                Y.HumanoidRootPart.CFrame = Y.HumanoidRootPart.CFrame:lerp(CFrame.new(bn), be)
            else
                bf = nil
            end
        else
            bf = nil
        end
    else
        bf = bh()
    end
end
local function bo(R)
    ba = R
    if R then
        bg = game:GetService("RunService").RenderStepped:Connect(aW)
    elseif bg then
        bg:Disconnect()
    end
end
C:AddToggle({Name = "Strafe", Keybind = 1, Default = false, Callback = bo})
C:AddSlider(
    {Name = "Strafe Speed", Min = 1, Max = 100, Precise = 1, Value = bb, Callback = function(aM, aN)
            bb = aM
        end}
)
C:AddSlider(
    {Name = "Smoothness", Min = 0.1, Max = 1, Precise = 2, Value = be, Callback = function(aM, aN)
            be = aM
        end}
)
C:AddSlider(
    {Name = "Strafe Distance", Min = 1, Max = 20, Precise = 1, Value = bc, Callback = function(aM, aN)
            bc = aM
        end}
)
C:AddSlider(
    {Name = "Max Target Distance", Min = 1, Max = 50, Value = bd, Callback = function(aM, aN)
            bd = aM
        end}
)
local bp
D:AddToggle(
    {Name = "Antivoid", Value = false, Callback = function(ae)
            if ae then
                bp = Instance.new("Part")
                bp.Name = "Antivoid"
                bp.Position = Vector3.new(0, -150, 0)
                bp.Size = Vector3.new(1000, 1, 1000)
                bp.Anchored = true
                bp.CanCollide = true
                bp.Transparency = 1
                bp.BrickColor = BrickColor.new("Medium stone grey")
                bp.Parent = game.Workspace
            else
                local bq = game.Workspace:FindFirstChild("Antivoid")
                if bq then
                    bq:Destroy()
                end
            end
        end}
)
local br =
    D:AddSlider(
    {Name = "Antivoid Transparency", Value = 0, Min = 0, Max = 1, Precise = 1, Callback = function(bs)
            if bp then
                bp.Transparency = bs
            end
        end}
)
local bt, bu, bv, bw, bx, by, bz, bA = 1, 1, 1, false, nil, 0.5, Enum.Material.Neon, Color3.fromRGB(225, 160, 255)
F:AddSlider(
    {Name = "X axis", Min = 1, Max = 10, Callback = function(R)
            bt = R
        end}
)
F:AddSlider(
    {Name = "Y axis", Min = 1, Max = 10, Callback = function(R)
            bu = R
        end}
)
F:AddSlider(
    {Name = "Z axis", Min = 1, Max = 10, Callback = function(R)
            bv = R
        end}
)
F:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Callback = function(R)
            by = R
        end}
)
F:AddDropdown(
    {
        Name = "Material",
        List = {"Plastic", "SmoothPlastic", "Neon", "ForceField", "Glass"},
        Default = "Neon",
        Callback = function(at)
            if at == "Plastic" then
                bz = Enum.Material.Plastic
            elseif at == "SmoothPlastic" then
                bz = Enum.Material.SmoothPlastic
            elseif at == "Neon" then
                bz = Enum.Material.Neon
            elseif at == "ForceField" then
                bz = Enum.Material.ForceField
            elseif at == "Glass" then
                bz = Enum.Material.Glass
            end
        end
    }
)
F:AddColorPicker(
    {Name = "Color", Default = bA, Callback = function(bB)
            bA = bB
        end}
)
F:AddToggle(
    {Name = "Hitbox Visual", Callback = function(ae)
            bw = ae
        end}
)
F:AddToggle(
    {
        Name = "Hitbox",
        Callback = function(ae)
            if ae then
                local function bC()
                    bx =
                        game:GetService("RunService").RenderStepped:Connect(
                        function()
                            for W, X in ipairs(game:GetService("Players"):GetPlayers()) do
                                if X.Name ~= game:GetService("Players").LocalPlayer.Name then
                                    pcall(
                                        function()
                                            local bD = X.Character and X.Character:FindFirstChild("HumanoidRootPart")
                                            if bD then
                                                bD.Size = Vector3.new(bt, bu, bv)
                                                bD.Transparency = bw and by or 1
                                                bD.Material = bz
                                                bD.Color = bA
                                                bD.CanCollide = false
                                            end
                                        end
                                    )
                                end
                            end
                        end
                    )
                end
                bC()
            else
                if bx then
                    bx:Disconnect()
                    bx = nil
                end
                for W, X in ipairs(game:GetService("Players"):GetPlayers()) do
                    if X.Name ~= game:GetService("Players").LocalPlayer.Name then
                        pcall(
                            function()
                                local bD = X.Character and X.Character:FindFirstChild("HumanoidRootPart")
                                if bD then
                                    bD.Size = Vector3.new(2, 2, 2)
                                    bD.Transparency = 1
                                    bD.Material = Enum.Material.Plastic
                                    bD.CanCollide = false
                                end
                            end
                        )
                    end
                end
            end
        end
    }
)
local bE, bF, bG = false, false, 18
G:AddToggle(
    {Name = "Auto Clicker", Keybind = 1, Callback = function(ae)
            bE = ae
            if ae then
                bF = true
                while bE and bF do
                    mouse1click()
                    wait(1 / bG)
                end
            else
                bF = false
            end
        end}
)
G:AddSlider(
    {Name = "CPS", Min = 1, Max = 50, Def = bG, Callback = function(bs)
            bG = bs
        end}
)
G:AddToggle(
    {
        Name = "Trigger bot",
        Keybind = 1,
        Callback = function(ae)
            triggerbotActive = ae
            local bH
            local bI = 0
            local minInterval = 1 / cpslimit
            local function bJ(bK)
                for W, X in pairs(game.Players:GetPlayers()) do
                    if X.Character and bK and bK:IsDescendantOf(X.Character) then
                        return true
                    end
                end
                return false
            end
            if ae then
                bH =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if bJ(game.Players.LocalPlayer:GetMouse().Target) then
                            local bL = tick()
                            if bL - bI >= minInterval then
                                bI = bL
                                mouse1press()
                                task.wait()
                                mouse1release()
                            end
                        end
                    end
                )
                getgenv().disable = function()
                    if bH then
                        warn("Disconnecting:", bH)
                        bH:Disconnect()
                        bH = nil
                    end
                    getgenv().disable = nil
                end
            else
                if getgenv().disable then
                    getgenv().disable()
                end
            end
        end
    }
)
G:AddSlider(
    {Name = "CPS limit", Min = 1, Max = 50, Def = cpslimit, Callback = function(bs)
            cpslimit = bs
            minInterval = 1 / cpslimit
        end}
)
local bM, bN, bO, bP, bQ = "None", 0, 0, 0, 0
local function bR(R)
    settings():GetService("NetworkSettings").IncomingReplicationLag = R
end
H:AddDropdown(
    {
        Name = "Method",
        List = {"ReplicationLag", "Axis", "None"},
        Default = bM,
        Callback = function(at)
            bM = at
            if bM == "ReplicationLag" then
                getgenv().Axis = false
                bR(bN)
            elseif bM == "Axis" then
                getgenv().Axis = true
                getgenv().Z = bQ
                getgenv().Y = bP
                getgenv().X = bO
                game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if getgenv().Axis then
                            local bS = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity =
                                Vector3.new(getgenv().X, getgenv().Y, getgenv().Z)
                            game:GetService("RunService").RenderStepped:Wait()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = bS
                        end
                    end
                )
                bR(0)
            end
        end
    }
)
H:AddSlider(
    {Name = "Client Lag", Min = 0, Max = 10, Precise = 2, Def = bN, Callback = function(bs)
            bN = bs
            if bM == "ReplicationLag" then
                bR(bN)
            end
        end}
)
H:AddSlider(
    {Name = "Axis Lag x", Min = 0, Max = 500, Def = bO, Callback = function(bs)
            bO = bs
        end}
)
H:AddSlider(
    {Name = "Axis Lag y", Min = 0, Max = 500, Def = bP, Callback = function(bs)
            bP = bs
        end}
)
H:AddSlider(
    {Name = "Axis Lag z", Min = 0, Max = 500, Def = bQ, Callback = function(bs)
            bQ = bs
        end}
)
local bT, bU, bV, bW, aq = false, 1, 30, 30, "Head"
local function bX(bY, bZ, b_, c0)
    return bY:Lerp(bZ, b_ * c0)
end
local function c1(c2)
    if bT then
        local c3 = nil
        local V = math.huge
        local av = game:GetService("Players").LocalPlayer
        local c4 = av.Character
        if c4 then
            local c5 = c4:FindFirstChild(aq).Position
            local c6 = c4:FindFirstChild(aq).CFrame.lookVector
            for W, X in ipairs(game:GetService("Players"):GetPlayers()) do
                if X ~= av then
                    local c7 = X.Character
                    if c7 then
                        local c8 = c7:FindFirstChild(aq) and c7:FindFirstChild(aq).Position
                        if c8 then
                            local Z = (c5 - c8).magnitude
                            if Z < V and Z <= bV then
                                local c9 = (c8 - c5).unit
                                local bk = math.acos(c6:Dot(c9)) * 180 / math.pi
                                if bk <= bW then
                                    V = Z
                                    c3 = X
                                end
                            end
                        end
                    end
                end
            end
        end
        if c3 then
            local ca = game:GetService("Workspace").CurrentCamera.CFrame
            local cb = c3.Character:FindFirstChild(aq) and c3.Character:FindFirstChild(aq).Position
            if cb then
                local cc = CFrame.new(ca.Position, cb)
                local cd = bX(ca, cc, c2, bU)
                game:GetService("Workspace").CurrentCamera.CFrame = cd
            end
        end
    end
end
I:AddToggle(
    {Name = "Aim Assist", Keybind = 1, Callback = function(ae)
            bT = ae
        end}
)
I:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = aq,
        Callback = function(at)
            aq = at
        end
    }
)
I:AddSlider(
    {Name = "Smoothness", Min = 1, Max = 25, Default = 1, Precise = 2, Callback = function(R)
            bU = R
        end}
)
I:AddSlider(
    {Name = "Range", Min = 5, Max = 100, Default = 30, Callback = function(R)
            bV = R
        end}
)
I:AddSlider(
    {Name = "Aim fov", Min = 0, Max = 360, Default = 30, Callback = function(R)
            bW = R
        end}
)
game:GetService("RunService").RenderStepped:Connect(
    function(c2)
        c1(c2)
    end
)
local ce, cf, cg, ch = 40, 8, 0.8, 0.8
L:AddSlider(
    {Name = "Hide distance", Min = 0, Max = 250, Value = ce, Callback = function(R)
            ce = R
        end}
)
L:AddSlider(
    {Name = "Corners", Min = 0, Max = 50, Value = cf, Callback = function(R)
            cf = R
        end}
)
L:AddSlider(
    {Name = "Position X", Min = 0, Max = 1, Precise = 2, Value = cg, Callback = function(R)
            cg = R
            if gui then
                gui.Frame.Position = UDim2.new(cg, 0, ch, 0)
            end
        end}
)
L:AddSlider(
    {Name = "Position Y", Min = 0, Max = 1, Precise = 2, Value = ch, Callback = function(R)
            ch = R
            if gui then
                gui.Frame.Position = UDim2.new(cg, 0, ch, 0)
            end
        end}
)
local gui
local function ci()
    if gui then
        gui:Destroy()
    end
    gui = Instance.new("ScreenGui")
    gui.Name = "PlayerInfoGUI"
    gui.ResetOnSpawn = false
    gui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    local cj = Instance.new("Frame", gui)
    cj.Name = "Frame"
    cj.Size = UDim2.new(0.1, 0, 0.08, 0)
    cj.Position = UDim2.new(cg, 0, ch, 0)
    cj.BackgroundColor3 = Color3.new(0, 0, 0)
    cj.BackgroundTransparency = 0.5
    cj.BorderSizePixel = 2
    cj.BorderColor3 = Color3.fromRGB(148, 0, 211)
    cj.Active = true
    local ck = Instance.new("UICorner", cj)
    ck.CornerRadius = UDim.new(0, cf)
    local cl = Instance.new("TextLabel", cj)
    cl.Text = "..."
    cl.TextColor3 = Color3.new(1, 1, 1)
    cl.Size = UDim2.new(1, 0, 0.3, 0)
    cl.Position = UDim2.new(0, 0, 0, 0)
    cl.BackgroundTransparency = 1
    cl.Font = Enum.Font.SourceSansBold
    cl.TextSize = 20
    cl.TextWrapped = true
    cl.TextXAlignment = Enum.TextXAlignment.Center
    local cm = Instance.new("TextLabel", cj)
    cm.Text = ""
    cm.TextColor3 = Color3.new(1, 1, 1)
    cm.Size = UDim2.new(1, 0, 0.3, 0)
    cm.Position = UDim2.new(0, 0, 0.3, 0)
    cm.BackgroundTransparency = 1
    cm.Font = Enum.Font.SourceSansBold
    cm.TextSize = 20
    cm.TextWrapped = true
    cm.TextXAlignment = Enum.TextXAlignment.Center
    local cn = Instance.new("Frame", cj)
    cn.Size = UDim2.new(0.6, 0, 0.2, 0)
    cn.Position = UDim2.new(0.2, 0, 0.7, 0)
    cn.BackgroundColor3 = Color3.new(0, 0, 0)
    cn.BorderSizePixel = 2
    cn.BorderColor3 = Color3.new(0, 0, 0)
    local co = Instance.new("Frame", cj)
    co.Size = UDim2.new(0.6, 0, 0.2, 0)
    co.Position = UDim2.new(0.2, 0, 0.7, 0)
    co.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    co.BorderSizePixel = 0
    local cp = Instance.new("TextLabel", cj)
    cp.Text = ""
    cp.TextColor3 = Color3.new(1, 0, 0)
    cp.Size = UDim2.new(0.6, 0, 0.3, 0)
    cp.Position = UDim2.new(0.615, 0, 0.7, 0)
    cp.BackgroundTransparency = 1
    cp.Font = Enum.Font.SourceSansBold
    cp.TextSize = 16
    cp.TextWrapped = true
    cp.TextXAlignment = Enum.TextXAlignment.Center
    local cq = Instance.new("Frame", cj)
    cq.Size = UDim2.new(1, 0, 0, 2)
    cq.Position = UDim2.new(0, 0, 0.3, 0)
    cq.BorderSizePixel = 0
    cq.BackgroundColor3 = Color3.fromRGB(148, 0, 211)
    cq.BackgroundTransparency = 0.5
    local cr = Instance.new("Frame", cj)
    cr.Size = UDim2.new(1, 4, 1, 4)
    cr.Position = UDim2.new(-0.01, 0, -0.01, 0)
    cr.BackgroundColor3 = Color3.fromRGB(100, 0, 150)
    cr.BorderSizePixel = 0
    cr.ZIndex = -1
    local cs = Instance.new("TextLabel", cj)
    cs.TextColor3 = Color3.new(1, 1, 1)
    cs.Size = UDim2.new(1, 0, 0.1, 0)
    cs.Position = UDim2.new(0.05, 0, cp.Position.Y.Scale, cp.Position.Y.Offset - -8)
    cs.BackgroundTransparency = 1
    cs.Font = cp.Font
    cs.TextSize = cp.TextSize
    cs.TextWrapped = true
    cs.TextXAlignment = Enum.TextXAlignment.Left
    local function ct()
        local ai, aj = nil, math.huge
        local cu = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
        local cv = false
        for W, X in ipairs(game.Players:GetPlayers()) do
            local Y = X.Character
            if X ~= game.Players.LocalPlayer and Y and Y:FindFirstChild("HumanoidRootPart") then
                local Z = (Y.HumanoidRootPart.Position - cu).magnitude
                if Z < ce then
                    cv = true
                    if Z < aj then
                        ai, aj = X, Z
                    end
                end
            end
        end
        if cv then
            cl.Text = ai.Name
            local cw = math.floor(ai.Character.Humanoid.Health)
            local cx = tostring(cw)
            local cy = ai.Character.Humanoid.MaxHealth
            local cz = cw / cy
            local cA = UDim2.new(0.6 * cz, 0, 0.2, 0)
            local cB = TweenInfo.new(0.18, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
            local cC = d:Create(co, cB, {Size = cA})
            cC:Play()
            local bB = Color3.fromRGB(255 * (1 - cz), 255 * cz, 0)
            co.BackgroundColor3 = bB
            local cD = cm.Text
            local cE = 1
            local cF = math.max(#cD, #cx)
            local cG = 0.08
            local cH
            cH =
                game:GetService("RunService").Heartbeat:Connect(
                function()
                    if cE <= cF then
                        cm.Text = cx:sub(1, cE)
                        cE = cE + 1
                    else
                        cH:Disconnect()
                    end
                end
            )
            cm.Visible = true
            cn.Visible = true
            co.Visible = true
            local cI = math.floor(game.Players.LocalPlayer.Character.Humanoid.Health)
            if cI > cw then
                cp.Text = "winning"
                cp.TextColor3 = Color3.new(0, 1, 0)
            elseif cI < cw then
                cp.Text = "losing"
                cp.TextColor3 = Color3.new(1, 0, 0)
            else
                cp.Text = "even"
                cp.TextColor3 = Color3.fromRGB(44, 25, 239)
            end
            cp.Font = Enum.Font.FredokaOne
            local cJ = string.format("%.1f", aj)
            if cs.Text ~= cJ then
                local cK = cs.Text
                local cL = 1
                local cM = math.max(#cK, #cJ)
                local cN = 0.03
                local cO
                cO =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if cL <= cM then
                            cs.Text = cJ:sub(1, cL)
                            cL = cL + 1
                        else
                            cO:Disconnect()
                        end
                    end
                )
            end
            cs.Visible = true
            cp.Visible = true
            cj.Visible = true
        else
            cl.Text = ""
            cm.Visible = false
            cn.Visible = false
            co.Visible = false
            cp.Visible = false
            cs.Visible = false
            cj.Visible = false
        end
    end
    game:GetService("RunService").Heartbeat:Connect(ct)
end
L:AddToggle(
    {Name = "Target Hud", Callback = function(ae)
            if ae then
                ci()
            else
                if gui then
                    gui:Destroy()
                    gui = nil
                end
            end
        end}
)
local cP = {Ambient = nil, OutdoorAmbient = nil, FogColor = nil, FogStart = nil, FogEnd = nil, PartColors = {}}
local cQ, cR, cS = Color3.new(225, 160, 255), Color3.fromRGB(225, 160, 255), Vector3.new(2, 1, 3)
local cT = false
local function cU(ae)
    local cV = game:GetService("Lighting")
    if ae then
        cP.Ambient = cV.Ambient
        cP.OutdoorAmbient = cV.OutdoorAmbient
        cP.FogColor = cV.FogColor
        cP.FogStart = cV.FogStart
        cP.FogEnd = cV.FogEnd
        for W, ax in ipairs(workspace:GetDescendants()) do
            if ax:IsA("BasePart") then
                cP.PartColors[ax] = ax.Color
            end
        end
        cV.Ambient = cQ
        cV.OutdoorAmbient = cQ
        cV.FogColor = cQ
        cV.FogStart = cP.FogStart or 0
        cV.FogEnd = cP.FogEnd or 100
        for W, ax in ipairs(workspace:GetDescendants()) do
            if ax:IsA("BasePart") then
                ax.Color = cQ
            end
        end
    else
        cV.Ambient = cP.Ambient
        cV.OutdoorAmbient = cP.OutdoorAmbient
        cV.FogColor = cP.FogColor
        cV.FogStart = cP.FogStart
        cV.FogEnd = cP.FogEnd
        for W, ax in ipairs(workspace:GetDescendants()) do
            if ax:IsA("BasePart") and cP.PartColors[ax] then
                ax.Color = cP.PartColors[ax]
            end
        end
    end
end
M:AddToggle(
    {Name = "Ambient", Callback = function(ae)
            cU(ae)
        end}
)
local cW = {}
M:AddToggle(
    {Name = "Low gfx", Callback = function(cX)
            local workspace = game:GetService("Workspace")
            for W, ax in ipairs(workspace:GetDescendants()) do
                if ax:IsA("BasePart") then
                    if cX then
                        cW[ax] = ax.Material
                        ax.Material = Enum.Material.Ice
                    else
                        ax.Material = cW[ax] or ax.Material
                        cW[ax] = nil
                    end
                end
            end
        end}
)
M:AddToggle(
    {Name = "Better sword", Callback = function(ae)
            cT = ae
            if not cT then
                local cY = game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh
                cY.VertexColor = Vector3.new(225 / 255, 160 / 255, 255 / 255)
                cY.Offset = Vector3.new(0, 0, 0)
            end
        end}
)
game:GetService("RunService").Heartbeat:Connect(
    function()
        if cT then
            local cY = game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh
            cY.VertexColor = Vector3.new(cR.r, cR.g, cR.b)
            cY.Offset = cS
        end
    end
)
M:AddSlider(
    {Name = "Sword front", Min = -10, Max = 10, Value = cS.X, Callback = function(R)
            cS = Vector3.new(R, cS.Y, cS.Z)
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.Offset = cS
            end
        end}
)
M:AddSlider(
    {Name = "Sword vertical", Min = -10, Max = 10, Value = cS.Y, Callback = function(R)
            cS = Vector3.new(cS.X, R, cS.Z)
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.Offset = cS
            end
        end}
)
M:AddSlider(
    {Name = "Sword side", Min = -10, Max = 10, Value = cS.Z, Callback = function(R)
            cS = Vector3.new(cS.X, cS.Y, R)
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.Offset = cS
            end
        end}
)
M:AddSlider(
    {Name = "Fog Start", Min = 0, Max = 1000, Value = cP.FogStart or 0, Callback = function(R)
            cP.FogStart = R
            if cT then
                game:GetService("Lighting").FogStart = R
            end
        end}
)
M:AddSlider(
    {Name = "Fog End", Min = 0, Max = 1000, Value = cP.FogEnd or 100, Callback = function(R)
            cP.FogEnd = R
            if cT then
                game:GetService("Lighting").FogEnd = R
            end
        end}
)
M:AddColorpicker(
    {Name = "Atmo color", Value = cQ, Callback = function(cZ, c_)
            cQ = cZ
            if ae then
                local cV = game:GetService("Lighting")
                cV.Ambient = cQ
                cV.OutdoorAmbient = cQ
                cV.FogColor = cQ
                for W, ax in ipairs(workspace:GetDescendants()) do
                    if ax:IsA("BasePart") then
                        ax.Color = cQ
                    end
                end
            end
        end}
)
M:AddColorpicker(
    {Name = "Sword color", Value = cR, Callback = function(cZ, c_)
            cR = cZ
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.VertexColor =
                    Vector3.new(cR.r, cR.g, cR.b)
            end
        end}
)
local d0, d1 = 1, false
getgenv().res = d0
M:AddToggle(
    {Name = "ress", Callback = function(cX)
            d1 = cX
            if cX then
                while d1 do
                    game:GetService("RunService").RenderStepped:Wait()
                    j.CFrame = j.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().res, 0, 0, 0, 1)
                end
            end
        end}
)
M:AddSlider(
    {Name = "Resolution", Min = 0, Max = 1.2, Precise = 2, Value = d0, Callback = function(R)
            getgenv().res = R
        end}
)
local d2, d3, d4, d5, d6 = 0.5, Color3.fromRGB(200, 150, 255), false, false, false
local function d7(d8)
    return Color3.new(d8.r, d8.g, d8.b)
end
local function d9(a3)
    local d8 = a3.TeamColor
    local d9 = Instance.new("Highlight")
    d9.Name = a3.Name
    d9.FillColor = d3
    d9.DepthMode = "AlwaysOnTop"
    d9.FillTransparency = d2
    d9.OutlineTransparency = d2
    d9.Parent = Storage
    local da = a3.Character
    if da then
        d9.Adornee = da
    end
    a3.CharacterAdded:Connect(
        function(db)
            d9.Adornee = db
        end
    )
    a3:GetPropertyChangedSignal("Team"):Connect(
        function()
            local dc = a3.TeamColor
            d9.FillColor = d7(dc)
        end
    )
end
local function dd()
    for W, X in ipairs(game.Players:GetPlayers()) do
        if X == game.Players.LocalPlayer then
            if d4 then
                if not Storage:FindFirstChild(X.Name) then
                    d9(X)
                end
            else
                local de = Storage:FindFirstChild(X.Name)
                if de then
                    de:Destroy()
                end
            end
        else
            if not Storage:FindFirstChild(X.Name) then
                d9(X)
            end
        end
    end
end
local function df(ae)
    if ae then
        d6 = true
        local dg = game:GetService("CoreGui")
        local b = game:GetService("Players")
        Storage = Instance.new("Folder")
        Storage.Parent = dg
        Storage.Name = "Highlight_Storage"
        dd()
        coroutine.wrap(
            function()
                while d6 do
                    wait(0.15)
                    dd()
                end
            end
        )()
    else
        d6 = false
        local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
        if Storage then
            for W, dh in ipairs(Storage:GetChildren()) do
                dh:Destroy()
            end
            Storage:Destroy()
        end
    end
end
local function di(ae)
    d4 = ae
    dd()
end
local function dj(ae)
    d5 = ae
    dd()
end
local function dk(cZ)
    d3 = cZ
    local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
    if Storage then
        for W, dh in ipairs(Storage:GetChildren()) do
            dh.FillColor = cZ
        end
    end
end
K:AddToggle(
    {Name = "chams", Value = false, Callback = function(ae)
            df(ae)
        end}
)
K:AddColorpicker(
    {Name = "Color", Value = d3, Callback = function(cZ, c_)
            dk(cZ)
        end}
)
K:AddToggle({Name = "Self", Value = false, Callback = di})
K:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Value = d2, Callback = function(R)
            d2 = R
            local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
            if Storage then
                for W, dh in ipairs(Storage:GetChildren()) do
                    dh.FillTransparency = R
                    dh.OutlineTransparency = R
                end
            end
        end}
)
K:AddToggle(
    {
        Name = "Cape",
        Value = false,
        Callback = function(R)
            local X = game.Players.LocalPlayer
            local Y = X.Character
            local function dl()
                local dm = Y:WaitForChild("Humanoid")
                local dn =
                    dm.RigType == Enum.HumanoidRigType.R15 and Y:WaitForChild("UpperTorso") or Y:WaitForChild("Torso")
                local dp = Instance.new("Part", Y)
                dp.Name = "Cape"
                dp.Anchored = false
                dp.CanCollide = false
                dp.TopSurface = Enum.SurfaceType.Smooth
                dp.BottomSurface = Enum.SurfaceType.Smooth
                dp.Size = Vector3.new(0.2, 0.2, 0.2)
                dp.Transparency = 0
                dp.BrickColor = BrickColor.new("Really black")
                local dq = Instance.new("BlockMesh", dp)
                dq.Scale = Vector3.new(9, 17.5, 0.08)
                local dr = Instance.new("Motor", dp)
                dr.Part0 = dp
                dr.Part1 = dn
                dr.MaxVelocity = 0.01
                dr.C0 = CFrame.new(0, 2, 0) * CFrame.Angles(0, math.rad(90), 0)
                dr.C1 = CFrame.new(0, 1, 0.45) * CFrame.Angles(0, math.rad(90), 0)
                spawn(
                    function()
                        local ds = false
                        while dp.Parent == Y do
                            wait(1 / 60)
                            local bk = 0.1
                            local dt = dn.Velocity.Magnitude
                            if ds then
                                bk = bk + dn.Velocity.Magnitude / 10 * 0.05 + 0.05
                                ds = false
                            else
                                ds = true
                            end
                            bk = bk + math.min(dn.Velocity.Magnitude / 11, 0.5)
                            dr.MaxVelocity = math.min(dn.Velocity.Magnitude / 111, 0.04)
                            dr.DesiredAngle = -bk
                            if dr.CurrentAngle < -0.2 and dr.DesiredAngle > -0.2 then
                                dr.MaxVelocity = 0.04
                            end
                            repeat
                                wait()
                            until dr.CurrentAngle == dr.DesiredAngle or
                                math.abs(dn.Velocity.Magnitude - dt) >= dn.Velocity.Magnitude / 10 + 1
                            if dn.Velocity.Magnitude < 0.1 then
                                wait(0.1)
                            end
                        end
                    end
                )
            end
            local function du()
                local dp = Y:FindFirstChild("Cape")
                if dp then
                    dp:Destroy()
                end
            end
            if R then
                if not Y:FindFirstChild("Cape") then
                    dl()
                end
            else
                du()
            end
        end
    }
)
local dv = {
    {Name = "Mouse", Value = "Mouse"},
    {Name = "Bottom Center", Value = "BottomCenter"},
    {Name = "Top Center", Value = "TopCenter"},
    {Name = "Left Center", Value = "LeftCenter"},
    {Name = "Right Center", Value = "RightCenter"}
}
local dw = 1
K:AddDropdown(
    {
        Name = "Tracer Source",
        Default = dv[dw].Name,
        List = {dv[1].Name, dv[2].Name, dv[3].Name, dv[4].Name, dv[5].Name},
        Callback = function(R)
            for dx, dy in ipairs(dv) do
                if dy.Name == R then
                    dw = dx
                    break
                end
            end
        end
    }
)
K:AddToggle(
    {
        Name = "Tracer",
        Value = false,
        Callback = function(ae)
            Tracer = ae
            local e = game:GetService("RunService")
            local b = game:GetService("Players")
            local dz = game:GetService("Workspace")
            local dA = game:GetService("UserInputService")
            local j = dz.CurrentCamera
            local settings = {
                DefaultSettings = false,
                TeamCheck = false,
                TracersVisible = true,
                TracerColor = Color3.fromRGB(128, 0, 128),
                TracerThickness = 1.8,
                TracerTransparency = 0.8
            }
            local dB = {}
            local function dC(Y)
                local cq = Drawing.new("Line")
                cq.Thickness = settings.TracerThickness
                cq.Transparency = settings.TracerTransparency
                cq.Visible = false
                cq.Color = settings.TracerColor
                local function dD()
                    if not Y:IsDescendantOf(dz) or not Y:FindFirstChild("HumanoidRootPart") then
                        cq.Visible = false
                        return
                    end
                    local dE = Y:FindFirstChild("Head") or Y:FindFirstChild("HumanoidRootPart")
                    if not dE then
                        cq.Visible = false
                        return
                    end
                    local dF = dE.Position
                    local dG, dH = j:WorldToViewportPoint(dF)
                    local dI = dv[dw]
                    if dI.Value == "Mouse" then
                        cq.From = Vector2.new(dA:GetMouseLocation().X, dA:GetMouseLocation().Y)
                    elseif dI.Value == "BottomCenter" then
                        cq.From = Vector2.new(j.ViewportSize.X / 2, j.ViewportSize.Y)
                    elseif dI.Value == "TopCenter" then
                        cq.From = Vector2.new(j.ViewportSize.X / 2, 0)
                    elseif dI.Value == "LeftCenter" then
                        cq.From = Vector2.new(0, j.ViewportSize.Y / 2)
                    elseif dI.Value == "RightCenter" then
                        cq.From = Vector2.new(j.ViewportSize.X, j.ViewportSize.Y / 2)
                    end
                    if dH then
                        cq.To = Vector2.new(dG.X, dG.Y)
                        if settings.TeamCheck then
                            cq.Visible = b.LocalPlayer.Team ~= Y.Team
                        else
                            cq.Visible = Tracer
                        end
                    else
                        cq.Visible = false
                    end
                end
                dB[Y] = cq
                return cq, dD
            end
            local function dJ(X, Y)
                if X == b.LocalPlayer then
                    return
                end
                if not Y or not Y:IsDescendantOf(dz) or not Y:FindFirstChild("HumanoidRootPart") then
                    return
                end
                local dK, dL = dC(Y)
                e.RenderStepped:Connect(
                    function()
                        dL()
                    end
                )
                Y.AncestryChanged:Connect(
                    function()
                        if not Y:IsDescendantOf(dz) then
                            dK.Visible = false
                            dB[Y] = nil
                        end
                    end
                )
            end
            b.PlayerAdded:Connect(
                function(X)
                    X.CharacterAdded:Connect(
                        function(Y)
                            dJ(X, Y)
                        end
                    )
                end
            )
            for W, X in ipairs(b:GetPlayers()) do
                dJ(X, X.Character)
            end
            dA.InputBegan:Connect(
                function(dM)
                    if dM.KeyCode == settings.ModeSkipKey and not dA:GetFocusedTextBox() then
                        dw = dw % #dv + 1
                        for W, cq in pairs(dB) do
                            cq.Visible = settings.TracersVisible and Tracer
                        end
                    elseif dM.KeyCode == settings.DisableKey and not dA:GetFocusedTextBox() then
                        settings.TracersVisible = not settings.TracersVisible
                        for W, cq in pairs(dB) do
                            cq.Visible = settings.TracersVisible and Tracer
                        end
                    end
                end
            )
            if settings.DefaultSettings then
                settings.TeamCheck = false
                settings.TracersVisible = true
                settings.TracerColor = Color3.fromRGB(128, 0, 128)
                settings.TracerThickness = 1.8
                settings.TracerTransparency = 0.8
            end
        end
    }
)
local X, dN = game.Players.LocalPlayer, false
local function dO(Y)
    local dE = Y:FindFirstChild("Head")
    if dE then
        local dP = dE:FindFirstChild("face")
        if dP then
            dP:Destroy()
        end
    end
end
local function dQ(ax)
    if ax:IsA("Accessory") or ax:IsA("Shirt") or ax:IsA("Pants") or ax.Name == "Face" then
        ax:Destroy()
    elseif ax:IsA("BasePart") then
        ax.Material = Enum.Material.ForceField
        ax.Color = Color3.fromRGB(225, 160, 255)
    end
end
local function dR(Y)
    dO(Y)
    for W, ax in ipairs(Y:GetChildren()) do
        dQ(ax)
    end
    Y.ChildAdded:Connect(dQ)
end
local function dS(Y)
    wait(0.14)
    if dN then
        dR(Y)
    end
end
K:AddToggle(
    {Name = "Self visual", Value = false, Callback = function(cX)
            dN = cX
            if cX then
                dS(X.Character or X.CharacterAdded:Wait())
            end
        end}
)
X.CharacterAdded:Connect(dS)
