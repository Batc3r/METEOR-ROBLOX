local a = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
a.UnloadCallback = function()
    getgenv().Galley = nil
end
local b = game:GetService("Players")
local c = game:GetService("StarterGui")
local d = game:GetService("TweenService")
local e = game:GetService("RunService")
local f = game:GetService("ReplicatedStorage")
local g = game.Players.LocalPlayer
local h = f.Packages.Knit.Services.ToolService.RF
local i = g:GetMouse()
local j = workspace.CurrentCamera
local k = game.Players.LocalPlayer.Character.Humanoid.Health
local function l(m, n)
    h.ToggleBlockSword:InvokeServer(m, n)
end
local function o(p)
    local q = game.Players.LocalPlayer:WaitForChild("Backpack"):FindFirstChild(p)
    if q and q:IsA("Tool") then
        q.Parent = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait()
    end
end
local function r(p)
    local q = game.Players.LocalPlayer.Character or game.Players.LocalPlayer.CharacterAdded:Wait():FindFirstChild(p)
    if q and q:IsA("Tool") then
        q.Parent = game.Players.LocalPlayer:WaitForChild("Backpack")
    end
end
local function s(t, u, v, w)
    return Vector3.new(t.X + u.X * v, t.Y + w, t.Z + u.Z * v)
end
local x = a:CreateWindow({Name = "Galley | rw", Themeable = {Image = "7059346386", Credit = false}})
local y = x:CreateTab({Name = "Blatant"})
local z = y:CreateSection({Name = "Aura"})
local A = y:CreateSection({Name = "Bow Aura"})
local B = y:CreateSection({Name = "Movement", Side = "Right"})
local C = y:CreateSection({Name = "Strafe", Side = "Right"})
local D = y:CreateSection({Name = "Anti void", Side = "Right"})
local E = x:CreateTab({Name = "Closet"})
local F = E:CreateSection({Name = "Hitbox", Side = "Right"})
local G = E:CreateSection({Name = "Auto"})
local H = E:CreateSection({Name = "Lag", Side = "Right"})
local I = E:CreateSection({Name = "Aim"})
local J = x:CreateTab({Name = "Visuals"})
local K = J:CreateSection({Name = "chams"})
local L = J:CreateSection({Name = "Target hud"})
local M = J:CreateSection({Name = "Render", Side = "Right"})
local N, O, P, Q = "Closest", "PreSimulation", false, 24
z:AddDropdown(
    {
        Name = "RunService type",
        Default = "PreSimulation",
        List = {"Stepped", "PreSimulation", "Heartbeat", "RenderStepped", "PreRender", "PostSimulation"},
        Callback = function(R)
            O = R
        end
    }
)
local function S()
    local T = game:GetService("Players"):GetPlayers()
    local U = nil
    local V = math.huge
    for W, X in ipairs(T) do
        local Y = X.Character
        if Y and Y:FindFirstChild("Humanoid") and Y.Humanoid.Health > 0 and not Y:FindFirstChildOfClass("ForceField") then
            local Z =
                (Y.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude
            if Z < V then
                V = Z
                U = Y.HumanoidRootPart.Position
            end
        end
    end
    return U
end
local function _(a0)
    local a1 = nil
    local a2 = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    if a0 == "Closest" then
        local Z = math.huge
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 < Z then
                    a1, Z = a3, a4
                end
            end
        end
    elseif a0 == "Random" then
        local a5 = {}
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 <= Q then
                    table.insert(a5, a3)
                end
            end
        end
        if #a5 > 0 then
            a1 = a5[math.random(1, #a5)]
        end
    elseif a0 == "Farthest" then
        local a6 = 0
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 > a6 and a4 <= Q then
                    a1, a6 = a3, a4
                end
            end
        end
    elseif a0 == "Weakest" then
        local a7 = math.huge
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 <= Q and a3.Character.Humanoid.Health < a7 then
                    a1, a7 = a3, a3.Character.Humanoid.Health
                end
            end
        end
    elseif a0 == "Strongest" then
        local a8 = 0
        for W, a3 in ipairs(game.Players:GetPlayers()) do
            if
                a3 ~= game.Players.LocalPlayer and a3.Character and a3.Character:FindFirstChild("HumanoidRootPart") and
                    a3.Character:FindFirstChild("Humanoid").Health > 0 and
                    not a3.Character:FindFirstChildOfClass("ForceField")
             then
                local a4 = (a2 - a3.Character.HumanoidRootPart.Position).Magnitude
                if a4 <= Q and a3.Character.Humanoid.Health > a8 then
                    a1, a8 = a3, a3.Character.Humanoid.Health
                end
            end
        end
    end
    return a1
end
z:AddDropdown(
    {
        Name = "Targeting Mode",
        Default = "Closest",
        List = {"Closest", "Farthest", "Strongest", "Weakest", "Random"},
        Callback = function(R)
            N = R
        end
    }
)
local function a9()
    local aa = _(N)
    if aa then
        local a4 =
            (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - aa.Character.HumanoidRootPart.Position).Magnitude
        if a4 <= Q and aa.Character.Humanoid.Health > 0 and not aa.Character:FindFirstChildOfClass("ForceField") then
            if P then
                for W, ab in ipairs({"WoodenSword", "Sword"}) do
                    l(true, ab)
                end
            end
            for W, n in ipairs({"WoodenSword", "Sword"}) do
                h.AttackPlayerWithSword:InvokeServer(aa.Character, critsActive, n)
            end
        else
            if P then
                for W, ab in ipairs({"WoodenSword", "Sword"}) do
                    l(false, ab)
                end
            end
        end
    end
end
local ac
local function ad(ae)
    if ae then
        if not ac then
            ac =
                game:GetService("RunService")[O]:Connect(
                function()
                    pcall(a9)
                end
            )
        end
    elseif ac then
        ac:Disconnect()
        ac = nil
    end
end
z:AddToggle({Name = "Aura", Default = false, Keybind = 1, Callback = ad})
z:AddToggle(
    {Name = "Auto block", Default = false, Callback = function(ae)
            P = ae
        end}
)
z:AddToggle(
    {Name = "Crits", Default = false, Callback = function(ae)
            critsActive = ae
        end}
)
z:AddSlider(
    {Name = "Aura Range", Min = 1, Max = 36, Default = 24, Callback = function(R)
            Q = R
        end}
)
local af
z:AddToggle(
    {
        Name = "Click Aura",
        Default = false,
        Keybind = 1,
        Callback = function(ag)
            local X = game.Players.LocalPlayer
            local i = X:GetMouse()
            local function ah(X)
                local ai, aj = nil, math.huge
                for W, ak in pairs(game.Players:GetPlayers()) do
                    if ak ~= X and ak.Character and ak.Character:FindFirstChild("HumanoidRootPart") then
                        local Z =
                            (X.Character.HumanoidRootPart.Position - ak.Character.HumanoidRootPart.Position).Magnitude
                        if Z < aj then
                            aj, ai = Z, ak
                        end
                    end
                end
                return ai
            end
            local function al()
                local ai = ah(X)
                if ai and ai.Character then
                    local am = {"WoodenSword", "Sword"}
                    for W, n in ipairs(am) do
                        local an = {[1] = workspace:WaitForChild(ai.Name), [2] = true, [3] = n}
                        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild(
                            "Services"
                        ):WaitForChild("ToolService"):WaitForChild("RF"):WaitForChild("AttackPlayerWithSword"):InvokeServer(
                            unpack(an)
                        )
                    end
                end
            end
            if ag then
                af = i.Button1Down:Connect(al)
            else
                if af then
                    af:Disconnect()
                    af = nil
                end
            end
        end
    }
)
local function ao()
    if FaceTarget then
        local ap = S()
        task.wait(0.05)
        local an = {[1] = Vector3.new(ap.X, ap.Y, ap.Z)}
        game:GetService("ReplicatedStorage"):WaitForChild("Packages"):WaitForChild("Knit"):WaitForChild("Services"):WaitForChild(
            "ToolService"
        ):WaitForChild("RF"):WaitForChild("UpdateHeadRotation"):InvokeServer(unpack(an))
    end
end
game:GetService("RunService").Heartbeat:Connect(ao)
z:AddToggle(
    {Name = "Serverside Face", Default = false, Callback = function(ae)
            FaceTarget = ae
        end}
)
local aq, ar, w, as, ae, at = "Head", 30, 1, 0.1, false, true
A:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = aq,
        Callback = function(au)
            aq = au
        end
    }
)
A:AddSlider(
    {Name = "Charge time", Min = 0, Max = 50, Default = ar, Callback = function(R)
            ar = R
        end}
)
A:AddSlider(
    {Name = "Y Offset", Min = -15, Max = 15, Default = w, Callback = function(R)
            w = R
        end}
)
A:AddSlider(
    {Name = "Prediction", Min = 0, Max = 3.0, Default = as, Precise = 1, Callback = function(R)
            as = R
        end}
)
A:AddToggle(
    {Name = "Switch Items", Default = at, Callback = function(av)
            at = av
        end}
)
A:AddToggle(
    {Name = "Bow Aura", Callback = function(aw)
            ae = aw
            if ae then
                localPlayer = game.Players.LocalPlayer
                local function ax()
                    while true do
                        if ae then
                            local Y = localPlayer.Character or localPlayer.CharacterAdded:Wait()
                            local ay = Y:WaitForChild(aq)
                            local az = ay and ay.Position
                            if not az then
                                return
                            end
                            local ai, aj, aA
                            for W, X in ipairs(game.Players:GetPlayers()) do
                                if X ~= localPlayer and X.Character then
                                    local aB = X.Character:FindFirstChild(aq)
                                    local t = aB and aB.Position
                                    local aC = X.Character:FindFirstChildOfClass("Humanoid").RootPart.Velocity
                                    if t then
                                        local Z = (t - az).magnitude
                                        local aD = s(t, aC, as, w)
                                        local aE = (aD - az).magnitude
                                        if not aj or aE < aj then
                                            ai = X
                                            aj = aE
                                            aA = aD
                                        end
                                    end
                                end
                            end
                            if ai and aA then
                                if at then
                                    o("DefaultBow")
                                end
                                game.Players.LocalPlayer.Character.DefaultBow.__comm__.RF.Fire:InvokeServer(aA, ar)
                                if at then
                                    r("DefaultBow")
                                end
                            end
                        end
                        wait(2.955)
                    end
                end
                coroutine.wrap(ax)()
            end
        end}
)
local aF, aG, aH, aI, aJ, aK = 1.0, false, false, 1.0 / 200, false, false
local function aL()
    if aH then
        aJ = true
        if aK then
            aK:Disconnect()
        end
        aK =
            game:GetService("RunService").Stepped:Connect(
            function()
                if not aJ then
                    return
                end
                local aM = aI
                if aG and game.Players.LocalPlayer:GetAttribute("Blocking") == true then
                    aM = aM * aF
                end
                local Y = game.Players.LocalPlayer.Character
                if Y and Y:FindFirstChild("HumanoidRootPart") then
                    Y.HumanoidRootPart.CFrame = Y.HumanoidRootPart.CFrame + Y.Humanoid.MoveDirection * aM
                end
            end
        )
    else
        aJ = false
        if aK then
            aK:Disconnect()
        end
    end
end
B:AddSlider(
    {Name = "Block speed", Min = 1, Max = 2.20, Value = aF, Precise = 2, Callback = function(R)
            aF = R
        end}
)
B:AddToggle(
    {Name = "Block noslow", Value = aG, Callback = function(ae)
            aG = ae
        end}
)
B:AddToggle(
    {Name = "Speed", Value = aH, Keybind = 1, Callback = function(ae)
            aH = ae
            aL()
        end}
)
B:AddSlider(
    {Name = "Speed", Min = 0, Max = 50, Value = aI * 200, Callback = function(aN, aO)
            aI = aN / 200
            if aH then
                aL()
            end
        end}
)
game.Players.LocalPlayer.CharacterAdded:Connect(
    function()
        aL()
    end
)
B:AddSlider(
    {Name = "Gravity", Min = 0, Max = 192, Callback = function(aN, aO)
            workspace.Gravity = aN
        end}
)
local aP, aQ, aR = {}, nil, false
local function aS()
    for W, ay in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
        if ay:IsA("BasePart") and ay.CanCollide then
            aP[ay] = true
            ay.CanCollide = false
        end
    end
end
B:AddToggle(
    {Name = "Phase", Value = aR, Keybind = 1, Callback = function(ae)
            aR = ae
            if ae then
                aQ = game:GetService("RunService").Stepped:Connect(aS)
            else
                if aQ then
                    aQ:Disconnect()
                end
                for ay in pairs(aP) do
                    if ay then
                        ay.CanCollide = true
                    end
                end
                table.clear(aP)
            end
        end}
)
local aT, aU = false, 0.80
B:AddToggle(
    {Name = "Air Check", Value = aT, Callback = function(ae)
            aT = ae
        end}
)
B:AddToggle(
    {Name = "Bhop", Value = BhopActive, Keybind = 1, Callback = function(ae)
            BhopActive = ae
            if ae then
                while ae do
                    if
                        not aT or
                            game.Players.LocalPlayer.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall
                     then
                        game.Players.LocalPlayer.Character:WaitForChild("Humanoid"):ChangeState(
                            Enum.HumanoidStateType.Jumping
                        )
                        task.wait(aU)
                    end
                    if not BhopActive then
                        break
                    end
                    task.wait()
                end
            end
        end}
)
B:AddSlider(
    {Name = "Bhop delay", Min = 0, Max = 1, Precise = 2, Value = aU, Callback = function(aN, aO)
            aU = aN
        end}
)
local aV = false
local aW
local function aX(Y)
    if Y:FindFirstChild("HumanoidRootPart") then
        local aY = Y.HumanoidRootPart.Position
        local w = Y.Humanoid.HipHeight - -1
        aW.Position = Vector3.new(aY.X, aY.Y - w, aY.Z)
    end
end
B:AddToggle(
    {Name = "Fly", Value = aV, Keybind = 1, Callback = function(ae)
            aV = ae
            local X = game.Players.LocalPlayer
            local Y = X.Character or X.CharacterAdded:Wait()
            if ae then
                aW = Instance.new("Part")
                aW.Size = Vector3.new(2, 0.1, 2)
                aW.Anchored = true
                aW.CanCollide = true
                aW.Transparency = 1
                aW.BrickColor = BrickColor.new("Medium stone grey")
                aW.Parent = game.Workspace
                while aV do
                    aX(Y)
                    task.wait()
                end
            else
                if aW then
                    aW:Destroy()
                end
            end
        end}
)
local aZ, a_ = false, 0.02
local function b0(b1, b2, b3)
    local b4, b5, b6 = math.clamp, Vector3.new, tick()
    local b7 = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
    if b7 then
        b7.Anchored = true
    end
    while tick() - b6 <= a_ do
        if b7 then
            b7.Velocity = b5(b4(b7.Velocity.X, -b1, b1), b4(b7.Velocity.Y, -b2, b2), b4(b7.Velocity.Z, -b3, b3))
        end
        task.wait()
    end
    if b7 then
        b7.Anchored = false
    end
end
local function b8(b9)
    if aZ and k and b9 < k then
        b0(0, 0, 0)
    end
    k = b9
end
local function ba()
    while aZ do
        b8(game.Players.LocalPlayer.Character.Humanoid.Health)
        task.wait(0.03)
    end
end
game.Players.LocalPlayer.Character.Humanoid.HealthChanged:Connect(b8)
B:AddToggle(
    {Name = "Antikb", Default = false, Callback = function(R)
            aZ = R
            if aZ then
                spawn(ba)
            end
        end}
)
B:AddSlider(
    {Name = "Anti kb no-move", Min = 0, Max = 1, Precise = 2, Default = 0.02, Callback = function(R)
            a_ = R
        end}
)
local bb = false
local bc = 20
local bd = 5
local be = 20
local bf = 0.1
local bg = nil
local bh = nil
local function bi()
    local aj = math.huge
    local bj = nil
    local X = game.Players.LocalPlayer
    local Y = X.Character or X.CharacterAdded:Wait()
    local T = game:GetService("Players")
    for W, ak in pairs(T:GetPlayers()) do
        if ak ~= X and ak.Character and ak.Character:FindFirstChild("HumanoidRootPart") then
            local Z = (Y.HumanoidRootPart.Position - ak.Character.HumanoidRootPart.Position).magnitude
            if Z < aj and ak.Character.Humanoid.Health > 0 then
                aj = Z
                bj = ak
            end
        end
    end
    return bj
end
local function bk(bl, t)
    local bm = Vector3.new(math.cos(bl) * bd, 0, math.sin(bl) * bd)
    return t + bm
end
local function aX()
    local X = game.Players.LocalPlayer
    local Y = X.Character
    local bn = game:GetService("RunService")
    if bg and bg.Character and bg.Character:FindFirstChild("HumanoidRootPart") then
        if bg.Character.Humanoid.Health > 0 then
            local t = bg.Character.HumanoidRootPart.Position
            local Z = (Y.HumanoidRootPart.Position - t).magnitude
            if Z <= be then
                local bo = bk(tick() * bc / 10, t)
                Y.HumanoidRootPart.CFrame = Y.HumanoidRootPart.CFrame:lerp(CFrame.new(bo), bf)
            else
                bg = nil
            end
        else
            bg = nil
        end
    else
        bg = bi()
    end
end
local function bp(R)
    bb = R
    if R then
        bh = game:GetService("RunService").RenderStepped:Connect(aX)
    elseif bh then
        bh:Disconnect()
    end
end
C:AddToggle({Name = "Strafe", Keybind = 1, Default = false, Callback = bp})
C:AddSlider(
    {Name = "Strafe Speed", Min = 1, Max = 30, Precise = 1, Value = bc, Callback = function(aN, aO)
            bc = aN
        end}
)
C:AddSlider(
    {Name = "Smoothness", Min = 0.1, Max = 1, Precise = 2, Value = bf, Callback = function(aN, aO)
            bf = aN
        end}
)
C:AddSlider(
    {Name = "Strafe Distance", Min = 1, Max = 20, Precise = 1, Value = bd, Callback = function(aN, aO)
            bd = aN
        end}
)
C:AddSlider(
    {Name = "Max Target Distance", Min = 1, Max = 50, Value = be, Callback = function(aN, aO)
            be = aN
        end}
)
local bq
D:AddToggle(
    {Name = "Antivoid", Value = false, Callback = function(ae)
            if ae then
                bq = Instance.new("Part")
                bq.Name = "Antivoid"
                bq.Position = Vector3.new(0, -150, 0)
                bq.Size = Vector3.new(1000, 1, 1000)
                bq.Anchored = true
                bq.CanCollide = true
                bq.Transparency = 1
                bq.BrickColor = BrickColor.new("Medium stone grey")
                bq.Parent = game.Workspace
            else
                local br = game.Workspace:FindFirstChild("Antivoid")
                if br then
                    br:Destroy()
                end
            end
        end}
)
local bs =
    D:AddSlider(
    {Name = "Antivoid Transparency", Value = 0, Min = 0, Max = 1, Precise = 1, Callback = function(bt)
            if bq then
                bq.Transparency = bt
            end
        end}
)
local bu, bv, bw, bx, by, bz, bA, bB = 1, 1, 1, false, nil, 0.5, Enum.Material.Neon, Color3.fromRGB(225, 160, 255)
F:AddSlider(
    {Name = "X axis", Min = 1, Max = 10, Callback = function(R)
            bu = R
        end}
)
F:AddSlider(
    {Name = "Y axis", Min = 1, Max = 10, Callback = function(R)
            bv = R
        end}
)
F:AddSlider(
    {Name = "Z axis", Min = 1, Max = 10, Callback = function(R)
            bw = R
        end}
)
F:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Callback = function(R)
            bz = R
        end}
)
F:AddDropdown(
    {
        Name = "Material",
        List = {"Plastic", "SmoothPlastic", "Neon", "ForceField", "Glass"},
        Default = "Neon",
        Callback = function(au)
            if au == "Plastic" then
                bA = Enum.Material.Plastic
            elseif au == "SmoothPlastic" then
                bA = Enum.Material.SmoothPlastic
            elseif au == "Neon" then
                bA = Enum.Material.Neon
            elseif au == "ForceField" then
                bA = Enum.Material.ForceField
            elseif au == "Glass" then
                bA = Enum.Material.Glass
            end
        end
    }
)
F:AddColorPicker(
    {Name = "Color", Default = bB, Callback = function(bC)
            bB = bC
        end}
)
F:AddToggle(
    {Name = "Hitbox Visual", Callback = function(ae)
            bx = ae
        end}
)
F:AddToggle(
    {
        Name = "Hitbox",
        Callback = function(ae)
            if ae then
                local function bD()
                    by =
                        game:GetService("RunService").RenderStepped:Connect(
                        function()
                            for W, X in ipairs(game:GetService("Players"):GetPlayers()) do
                                if X.Name ~= game:GetService("Players").LocalPlayer.Name then
                                    pcall(
                                        function()
                                            local bE = X.Character and X.Character:FindFirstChild("HumanoidRootPart")
                                            if bE then
                                                bE.Size = Vector3.new(bu, bv, bw)
                                                bE.Transparency = bx and bz or 1
                                                bE.Material = bA
                                                bE.Color = bB
                                                bE.CanCollide = false
                                            end
                                        end
                                    )
                                end
                            end
                        end
                    )
                end
                bD()
            else
                if by then
                    by:Disconnect()
                    by = nil
                end
                for W, X in ipairs(game:GetService("Players"):GetPlayers()) do
                    if X.Name ~= game:GetService("Players").LocalPlayer.Name then
                        pcall(
                            function()
                                local bE = X.Character and X.Character:FindFirstChild("HumanoidRootPart")
                                if bE then
                                    bE.Size = Vector3.new(2, 2, 2)
                                    bE.Transparency = 1
                                    bE.Material = Enum.Material.Plastic
                                    bE.CanCollide = false
                                end
                            end
                        )
                    end
                end
            end
        end
    }
)
local bF, bG, bH = false, false, 18
G:AddToggle(
    {Name = "Auto Clicker", Keybind = 1, Callback = function(ae)
            bF = ae
            if ae then
                bG = true
                while bF and bG do
                    mouse1click()
                    wait(1 / bH)
                end
            else
                bG = false
            end
        end}
)
G:AddSlider(
    {Name = "CPS", Min = 1, Max = 50, Def = bH, Callback = function(bt)
            bH = bt
        end}
)
G:AddToggle(
    {
        Name = "Trigger bot",
        Keybind = 1,
        Callback = function(ae)
            triggerbotActive = ae
            local bI
            local bJ = 0
            local minInterval = 1 / cpslimit
            local function bK(bL)
                for W, X in pairs(game.Players:GetPlayers()) do
                    if X.Character and bL and bL:IsDescendantOf(X.Character) then
                        return true
                    end
                end
                return false
            end
            if ae then
                bI =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if bK(game.Players.LocalPlayer:GetMouse().Target) then
                            local bM = tick()
                            if bM - bJ >= minInterval then
                                bJ = bM
                                mouse1press()
                                task.wait()
                                mouse1release()
                            end
                        end
                    end
                )
                getgenv().disable = function()
                    if bI then
                        warn("Disconnecting:", bI)
                        bI:Disconnect()
                        bI = nil
                    end
                    getgenv().disable = nil
                end
            else
                if getgenv().disable then
                    getgenv().disable()
                end
            end
        end
    }
)
G:AddSlider(
    {Name = "CPS limit", Min = 1, Max = 50, Def = cpslimit, Callback = function(bt)
            cpslimit = bt
            minInterval = 1 / cpslimit
        end}
)
local bN, bO, bP, bQ, bR = "None", 0, 0, 0, 0
local function bS(R)
    settings():GetService("NetworkSettings").IncomingReplicationLag = R
end
H:AddDropdown(
    {
        Name = "Method",
        List = {"ReplicationLag", "Axis", "None"},
        Default = bN,
        Callback = function(au)
            bN = au
            if bN == "ReplicationLag" then
                getgenv().Axis = false
                bS(bO)
            elseif bN == "Axis" then
                getgenv().Axis = true
                getgenv().Z = bR
                getgenv().Y = bQ
                getgenv().X = bP
                game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if getgenv().Axis then
                            local bT = game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity =
                                Vector3.new(getgenv().X, getgenv().Y, getgenv().Z)
                            game:GetService("RunService").RenderStepped:Wait()
                            game.Players.LocalPlayer.Character.HumanoidRootPart.Velocity = bT
                        end
                    end
                )
                bS(0)
            end
        end
    }
)
H:AddSlider(
    {Name = "Client Lag", Min = 0, Max = 10, Precise = 2, Def = bO, Callback = function(bt)
            bO = bt
            if bN == "ReplicationLag" then
                bS(bO)
            end
        end}
)
H:AddSlider(
    {Name = "Axis Lag x", Min = 0, Max = 500, Def = bP, Callback = function(bt)
            bP = bt
        end}
)
H:AddSlider(
    {Name = "Axis Lag y", Min = 0, Max = 500, Def = bQ, Callback = function(bt)
            bQ = bt
        end}
)
H:AddSlider(
    {Name = "Axis Lag z", Min = 0, Max = 500, Def = bR, Callback = function(bt)
            bR = bt
        end}
)
local bU, bV, bW, bX, aq = false, 1, 30, 30, "Head"
local function bY(bZ, b_, c0, c1)
    return bZ:Lerp(b_, c0 * c1)
end
local function c2(c3)
    if bU then
        local c4 = nil
        local V = math.huge
        local localPlayer = game:GetService("Players").LocalPlayer
        local c5 = localPlayer.Character
        if c5 then
            local c6 = c5:FindFirstChild(aq).Position
            local c7 = c5:FindFirstChild(aq).CFrame.lookVector
            for W, X in ipairs(game:GetService("Players"):GetPlayers()) do
                if X ~= localPlayer then
                    local c8 = X.Character
                    if c8 then
                        local c9 = c8:FindFirstChild(aq) and c8:FindFirstChild(aq).Position
                        if c9 then
                            local Z = (c6 - c9).magnitude
                            if Z < V and Z <= bW then
                                local ca = (c9 - c6).unit
                                local bl = math.acos(c7:Dot(ca)) * 180 / math.pi
                                if bl <= bX then
                                    V = Z
                                    c4 = X
                                end
                            end
                        end
                    end
                end
            end
        end
        if c4 then
            local cb = game:GetService("Workspace").CurrentCamera.CFrame
            local cc = c4.Character:FindFirstChild(aq) and c4.Character:FindFirstChild(aq).Position
            if cc then
                local cd = CFrame.new(cb.Position, cc)
                local ce = bY(cb, cd, c3, bV)
                game:GetService("Workspace").CurrentCamera.CFrame = ce
            end
        end
    end
end
I:AddToggle(
    {Name = "Aim Assist", Keybind = 1, Callback = function(ae)
            bU = ae
        end}
)
I:AddDropdown(
    {
        Name = "Target Part",
        List = {
            "Head",
            "HumanoidRootPart",
            "LeftLowerArm",
            "RightLowerArm",
            "LeftUpperArm",
            "RightUpperArm",
            "LeftLowerLeg",
            "UpperTorso",
            "LeftUpperLeg",
            "RightLowerLeg",
            "LowerTorso",
            "RightUpperLeg"
        },
        Default = aq,
        Callback = function(au)
            aq = au
        end
    }
)
I:AddSlider(
    {Name = "Smoothness", Min = 1, Max = 25, Default = 1, Precise = 2, Callback = function(R)
            bV = R
        end}
)
I:AddSlider(
    {Name = "Range", Min = 5, Max = 100, Default = 30, Callback = function(R)
            bW = R
        end}
)
I:AddSlider(
    {Name = "Aim fov", Min = 0, Max = 360, Default = 30, Callback = function(R)
            bX = R
        end}
)
game:GetService("RunService").RenderStepped:Connect(
    function(c3)
        c2(c3)
    end
)
local cf, cg, ch, ci = 40, 8, 0.8, 0.8
L:AddSlider(
    {Name = "Hide distance", Min = 0, Max = 250, Value = cf, Callback = function(R)
            cf = R
        end}
)
L:AddSlider(
    {Name = "Corners", Min = 0, Max = 50, Value = cg, Callback = function(R)
            cg = R
        end}
)
L:AddSlider(
    {Name = "Position X", Min = 0, Max = 1, Precise = 2, Value = ch, Callback = function(R)
            ch = R
            if gui then
                gui.Frame.Position = UDim2.new(ch, 0, ci, 0)
            end
        end}
)
L:AddSlider(
    {Name = "Position Y", Min = 0, Max = 1, Precise = 2, Value = ci, Callback = function(R)
            ci = R
            if gui then
                gui.Frame.Position = UDim2.new(ch, 0, ci, 0)
            end
        end}
)
local gui
local function cj()
    if gui then
        gui:Destroy()
    end
    gui = Instance.new("ScreenGui")
    gui.Name = "PlayerInfoGUI"
    gui.ResetOnSpawn = false
    gui.Parent = game.Players.LocalPlayer:WaitForChild("PlayerGui")
    local ck = Instance.new("Frame", gui)
    ck.Name = "Frame"
    ck.Size = UDim2.new(0.1, 0, 0.08, 0)
    ck.Position = UDim2.new(ch, 0, ci, 0)
    ck.BackgroundColor3 = Color3.new(0, 0, 0)
    ck.BackgroundTransparency = 0.5
    ck.BorderSizePixel = 2
    ck.BorderColor3 = Color3.fromRGB(148, 0, 211)
    ck.Active = true
    local cl = Instance.new("UICorner", ck)
    cl.CornerRadius = UDim.new(0, cg)
    local cm = Instance.new("TextLabel", ck)
    cm.Text = "..."
    cm.TextColor3 = Color3.new(1, 1, 1)
    cm.Size = UDim2.new(1, 0, 0.3, 0)
    cm.Position = UDim2.new(0, 0, 0, 0)
    cm.BackgroundTransparency = 1
    cm.Font = Enum.Font.SourceSansBold
    cm.TextSize = 20
    cm.TextWrapped = true
    cm.TextXAlignment = Enum.TextXAlignment.Center
    local cn = Instance.new("TextLabel", ck)
    cn.Text = ""
    cn.TextColor3 = Color3.new(1, 1, 1)
    cn.Size = UDim2.new(1, 0, 0.3, 0)
    cn.Position = UDim2.new(0, 0, 0.3, 0)
    cn.BackgroundTransparency = 1
    cn.Font = Enum.Font.SourceSansBold
    cn.TextSize = 20
    cn.TextWrapped = true
    cn.TextXAlignment = Enum.TextXAlignment.Center
    local co = Instance.new("Frame", ck)
    co.Size = UDim2.new(0.6, 0, 0.2, 0)
    co.Position = UDim2.new(0.2, 0, 0.7, 0)
    co.BackgroundColor3 = Color3.new(0, 0, 0)
    co.BorderSizePixel = 2
    co.BorderColor3 = Color3.new(0, 0, 0)
    local cp = Instance.new("Frame", ck)
    cp.Size = UDim2.new(0.6, 0, 0.2, 0)
    cp.Position = UDim2.new(0.2, 0, 0.7, 0)
    cp.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    cp.BorderSizePixel = 0
    local cq = Instance.new("TextLabel", ck)
    cq.Text = ""
    cq.TextColor3 = Color3.new(1, 0, 0)
    cq.Size = UDim2.new(0.6, 0, 0.3, 0)
    cq.Position = UDim2.new(0.615, 0, 0.7, 0)
    cq.BackgroundTransparency = 1
    cq.Font = Enum.Font.SourceSansBold
    cq.TextSize = 16
    cq.TextWrapped = true
    cq.TextXAlignment = Enum.TextXAlignment.Center
    local cr = Instance.new("Frame", ck)
    cr.Size = UDim2.new(1, 0, 0, 2)
    cr.Position = UDim2.new(0, 0, 0.3, 0)
    cr.BorderSizePixel = 0
    cr.BackgroundColor3 = Color3.fromRGB(148, 0, 211)
    cr.BackgroundTransparency = 0.5
    local cs = Instance.new("Frame", ck)
    cs.Size = UDim2.new(1, 4, 1, 4)
    cs.Position = UDim2.new(-0.01, 0, -0.01, 0)
    cs.BackgroundColor3 = Color3.fromRGB(100, 0, 150)
    cs.BorderSizePixel = 0
    cs.ZIndex = -1
    local ct = Instance.new("TextLabel", ck)
    ct.TextColor3 = Color3.new(1, 1, 1)
    ct.Size = UDim2.new(1, 0, 0.1, 0)
    ct.Position = UDim2.new(0.05, 0, cq.Position.Y.Scale, cq.Position.Y.Offset - -8)
    ct.BackgroundTransparency = 1
    ct.Font = cq.Font
    ct.TextSize = cq.TextSize
    ct.TextWrapped = true
    ct.TextXAlignment = Enum.TextXAlignment.Left
    local function cu()
        local ai, aj = nil, math.huge
        local cv = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
        local cw = false
        for W, X in ipairs(game.Players:GetPlayers()) do
            local Y = X.Character
            if X ~= game.Players.LocalPlayer and Y and Y:FindFirstChild("HumanoidRootPart") then
                local Z = (Y.HumanoidRootPart.Position - cv).magnitude
                if Z < cf then
                    cw = true
                    if Z < aj then
                        ai, aj = X, Z
                    end
                end
            end
        end
        if cw then
            cm.Text = ai.Name
            local cx = math.floor(ai.Character.Humanoid.Health)
            local cy = tostring(cx)
            local cz = ai.Character.Humanoid.MaxHealth
            local cA = cx / cz
            local cB = UDim2.new(0.6 * cA, 0, 0.2, 0)
            local cC = TweenInfo.new(0.18, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
            local cD = d:Create(cp, cC, {Size = cB})
            cD:Play()
            local bC = Color3.fromRGB(255 * (1 - cA), 255 * cA, 0)
            cp.BackgroundColor3 = bC
            local cE = cn.Text
            local cF = 1
            local cG = math.max(#cE, #cy)
            local cH = 0.08
            local cI
            cI =
                game:GetService("RunService").Heartbeat:Connect(
                function()
                    if cF <= cG then
                        cn.Text = cy:sub(1, cF)
                        cF = cF + 1
                    else
                        cI:Disconnect()
                    end
                end
            )
            cn.Visible = true
            co.Visible = true
            cp.Visible = true
            local cJ = math.floor(game.Players.LocalPlayer.Character.Humanoid.Health)
            if cJ > cx then
                cq.Text = "winning"
                cq.TextColor3 = Color3.new(0, 1, 0)
            elseif cJ < cx then
                cq.Text = "losing"
                cq.TextColor3 = Color3.new(1, 0, 0)
            else
                cq.Text = "even"
                cq.TextColor3 = Color3.fromRGB(44, 25, 239)
            end
            cq.Font = Enum.Font.FredokaOne
            local cK = string.format("%.1f", aj)
            if ct.Text ~= cK then
                local cL = ct.Text
                local cM = 1
                local cN = math.max(#cL, #cK)
                local cO = 0.03
                local cP
                cP =
                    game:GetService("RunService").Heartbeat:Connect(
                    function()
                        if cM <= cN then
                            ct.Text = cK:sub(1, cM)
                            cM = cM + 1
                        else
                            cP:Disconnect()
                        end
                    end
                )
            end
            ct.Visible = true
            cq.Visible = true
            ck.Visible = true
        else
            cm.Text = ""
            cn.Visible = false
            co.Visible = false
            cp.Visible = false
            cq.Visible = false
            ct.Visible = false
            ck.Visible = false
        end
    end
    game:GetService("RunService").Heartbeat:Connect(cu)
end
L:AddToggle(
    {Name = "Target Hud", Callback = function(ae)
            if ae then
                cj()
            else
                if gui then
                    gui:Destroy()
                    gui = nil
                end
            end
        end}
)
local cQ = {Ambient = nil, OutdoorAmbient = nil, FogColor = nil, FogStart = nil, FogEnd = nil, PartColors = {}}
local cR, cS, cT = Color3.new(225, 160, 255), Color3.fromRGB(225, 160, 255), Vector3.new(2, 1, 3)
local cU = false
local function cV(ae)
    local cW = game:GetService("Lighting")
    if ae then
        cQ.Ambient = cW.Ambient
        cQ.OutdoorAmbient = cW.OutdoorAmbient
        cQ.FogColor = cW.FogColor
        cQ.FogStart = cW.FogStart
        cQ.FogEnd = cW.FogEnd
        for W, ay in ipairs(workspace:GetDescendants()) do
            if ay:IsA("BasePart") then
                cQ.PartColors[ay] = ay.Color
            end
        end
        cW.Ambient = cR
        cW.OutdoorAmbient = cR
        cW.FogColor = cR
        cW.FogStart = cQ.FogStart or 0
        cW.FogEnd = cQ.FogEnd or 100
        for W, ay in ipairs(workspace:GetDescendants()) do
            if ay:IsA("BasePart") then
                ay.Color = cR
            end
        end
    else
        cW.Ambient = cQ.Ambient
        cW.OutdoorAmbient = cQ.OutdoorAmbient
        cW.FogColor = cQ.FogColor
        cW.FogStart = cQ.FogStart
        cW.FogEnd = cQ.FogEnd
        for W, ay in ipairs(workspace:GetDescendants()) do
            if ay:IsA("BasePart") and cQ.PartColors[ay] then
                ay.Color = cQ.PartColors[ay]
            end
        end
    end
end
M:AddToggle(
    {Name = "Ambient", Callback = function(ae)
            cV(ae)
        end}
)
local cX = {}
M:AddToggle(
    {Name = "Low gfx", Callback = function(cY)
            local workspace = game:GetService("Workspace")
            for W, ay in ipairs(workspace:GetDescendants()) do
                if ay:IsA("BasePart") then
                    if cY then
                        cX[ay] = ay.Material
                        ay.Material = Enum.Material.Ice
                    else
                        ay.Material = cX[ay] or ay.Material
                        cX[ay] = nil
                    end
                end
            end
        end}
)
M:AddToggle(
    {Name = "Better sword", Callback = function(ae)
            cU = ae
            if not cU then
                local cZ = game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh
                cZ.VertexColor = Vector3.new(225 / 255, 160 / 255, 255 / 255)
                cZ.Offset = Vector3.new(0, 0, 0)
            end
        end}
)
game:GetService("RunService").Heartbeat:Connect(
    function()
        if cU then
            local cZ = game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh
            cZ.VertexColor = Vector3.new(cS.r, cS.g, cS.b)
            cZ.Offset = cT
        end
    end
)
M:AddSlider(
    {Name = "Sword front", Min = -10, Max = 10, Value = cT.X, Callback = function(R)
            cT = Vector3.new(R, cT.Y, cT.Z)
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.Offset = cT
            end
        end}
)
M:AddSlider(
    {Name = "Sword vertical", Min = -10, Max = 10, Value = cT.Y, Callback = function(R)
            cT = Vector3.new(cT.X, R, cT.Z)
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.Offset = cT
            end
        end}
)
M:AddSlider(
    {Name = "Sword side", Min = -10, Max = 10, Value = cT.Z, Callback = function(R)
            cT = Vector3.new(cT.X, cT.Y, R)
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.Offset = cT
            end
        end}
)
M:AddSlider(
    {Name = "Fog Start", Min = 0, Max = 1000, Value = cQ.FogStart or 0, Callback = function(R)
            cQ.FogStart = R
            if cU then
                game:GetService("Lighting").FogStart = R
            end
        end}
)
M:AddSlider(
    {Name = "Fog End", Min = 0, Max = 1000, Value = cQ.FogEnd or 100, Callback = function(R)
            cQ.FogEnd = R
            if cU then
                game:GetService("Lighting").FogEnd = R
            end
        end}
)
M:AddColorpicker(
    {Name = "Atmo color", Value = cR, Callback = function(c_, d0)
            cR = c_
            if ae then
                local cW = game:GetService("Lighting")
                cW.Ambient = cR
                cW.OutdoorAmbient = cR
                cW.FogColor = cR
                for W, ay in ipairs(workspace:GetDescendants()) do
                    if ay:IsA("BasePart") then
                        ay.Color = cR
                    end
                end
            end
        end}
)
M:AddColorpicker(
    {Name = "Sword color", Value = cS, Callback = function(c_, d0)
            cS = c_
            if ae then
                game:GetService("Workspace").Camera.Viewmodel.WoodenSword.MainPart.Mesh.VertexColor =
                    Vector3.new(cS.r, cS.g, cS.b)
            end
        end}
)
local d1, d2 = 1, false
getgenv().res = d1
M:AddToggle(
    {Name = "ress", Callback = function(cY)
            d2 = cY
            if cY then
                while d2 do
                    game:GetService("RunService").RenderStepped:Wait()
                    j.CFrame = j.CFrame * CFrame.new(0, 0, 0, 1, 0, 0, 0, getgenv().res, 0, 0, 0, 1)
                end
            end
        end}
)
M:AddSlider(
    {Name = "Resolution", Min = 0, Max = 1.2, Precise = 2, Value = d1, Callback = function(R)
            getgenv().res = R
        end}
)
local d3, d4, d5, d6, d7 = 0.5, Color3.fromRGB(200, 150, 255), false, false, false
local function d8(d9)
    return Color3.new(d9.r, d9.g, d9.b)
end
local function da(a3)
    local d9 = a3.TeamColor
    local da = Instance.new("Highlight")
    da.Name = a3.Name
    da.FillColor = d4
    da.DepthMode = "AlwaysOnTop"
    da.FillTransparency = d3
    da.OutlineTransparency = d3
    da.Parent = Storage
    local db = a3.Character
    if db then
        da.Adornee = db
    end
    a3.CharacterAdded:Connect(
        function(dc)
            da.Adornee = dc
        end
    )
    a3:GetPropertyChangedSignal("Team"):Connect(
        function()
            local dd = a3.TeamColor
            da.FillColor = d8(dd)
        end
    )
end
local function de()
    for W, X in ipairs(game.Players:GetPlayers()) do
        if X == game.Players.LocalPlayer then
            if d5 then
                if not Storage:FindFirstChild(X.Name) then
                    da(X)
                end
            else
                local df = Storage:FindFirstChild(X.Name)
                if df then
                    df:Destroy()
                end
            end
        else
            if not Storage:FindFirstChild(X.Name) then
                da(X)
            end
        end
    end
end
local function dg(ae)
    if ae then
        d7 = true
        local dh = game:GetService("CoreGui")
        local b = game:GetService("Players")
        Storage = Instance.new("Folder")
        Storage.Parent = dh
        Storage.Name = "Highlight_Storage"
        de()
        coroutine.wrap(
            function()
                while d7 do
                    wait(0.15)
                    de()
                end
            end
        )()
    else
        d7 = false
        local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
        if Storage then
            for W, di in ipairs(Storage:GetChildren()) do
                di:Destroy()
            end
            Storage:Destroy()
        end
    end
end
local function dj(ae)
    d5 = ae
    de()
end
local function dk(ae)
    d6 = ae
    de()
end
local function dl(c_)
    d4 = c_
    local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
    if Storage then
        for W, di in ipairs(Storage:GetChildren()) do
            di.FillColor = c_
        end
    end
end
K:AddToggle(
    {Name = "chams", Value = false, Callback = function(ae)
            dg(ae)
        end}
)
K:AddColorpicker(
    {Name = "Color", Value = d4, Callback = function(c_, d0)
            dl(c_)
        end}
)
K:AddToggle({Name = "Self", Value = false, Callback = dj})
K:AddSlider(
    {Name = "Transparency", Min = 0, Max = 1, Value = d3, Callback = function(R)
            d3 = R
            local Storage = game.CoreGui:FindFirstChild("Highlight_Storage")
            if Storage then
                for W, di in ipairs(Storage:GetChildren()) do
                    di.FillTransparency = R
                    di.OutlineTransparency = R
                end
            end
        end}
)
local dm = {
    {Name = "Mouse", Value = "Mouse"},
    {Name = "Bottom Center", Value = "BottomCenter"},
    {Name = "Top Center", Value = "TopCenter"},
    {Name = "Left Center", Value = "LeftCenter"},
    {Name = "Right Center", Value = "RightCenter"}
}
local dn = 1
K:AddDropdown(
    {
        Name = "Tracer Source",
        Default = dm[dn].Name,
        List = {dm[1].Name, dm[2].Name, dm[3].Name, dm[4].Name, dm[5].Name},
        Callback = function(R)
            for dp, dq in ipairs(dm) do
                if dq.Name == R then
                    dn = dp
                    break
                end
            end
        end
    }
)
K:AddToggle(
    {
        Name = "Tracer",
        Value = false,
        Callback = function(ae)
            Tracer = ae
            local e = game:GetService("RunService")
            local b = game:GetService("Players")
            local dr = game:GetService("Workspace")
            local ds = game:GetService("UserInputService")
            local j = dr.CurrentCamera
            local settings = {
                DefaultSettings = false,
                TeamCheck = false,
                TracersVisible = true,
                TracerColor = Color3.fromRGB(128, 0, 128),
                TracerThickness = 1.8,
                TracerTransparency = 0.8
            }
            local dt = {}
            local function du(Y)
                local cr = Drawing.new("Line")
                cr.Thickness = settings.TracerThickness
                cr.Transparency = settings.TracerTransparency
                cr.Visible = false
                cr.Color = settings.TracerColor
                local function dv()
                    if not Y:IsDescendantOf(dr) or not Y:FindFirstChild("HumanoidRootPart") then
                        cr.Visible = false
                        return
                    end
                    local dw = Y:FindFirstChild("Head") or Y:FindFirstChild("HumanoidRootPart")
                    if not dw then
                        cr.Visible = false
                        return
                    end
                    local dx = dw.Position
                    local dy, dz = j:WorldToViewportPoint(dx)
                    local dA = dm[dn]
                    if dA.Value == "Mouse" then
                        cr.From = Vector2.new(ds:GetMouseLocation().X, ds:GetMouseLocation().Y)
                    elseif dA.Value == "BottomCenter" then
                        cr.From = Vector2.new(j.ViewportSize.X / 2, j.ViewportSize.Y)
                    elseif dA.Value == "TopCenter" then
                        cr.From = Vector2.new(j.ViewportSize.X / 2, 0)
                    elseif dA.Value == "LeftCenter" then
                        cr.From = Vector2.new(0, j.ViewportSize.Y / 2)
                    elseif dA.Value == "RightCenter" then
                        cr.From = Vector2.new(j.ViewportSize.X, j.ViewportSize.Y / 2)
                    end
                    if dz then
                        cr.To = Vector2.new(dy.X, dy.Y)
                        if settings.TeamCheck then
                            cr.Visible = b.LocalPlayer.Team ~= Y.Team
                        else
                            cr.Visible = Tracer
                        end
                    else
                        cr.Visible = false
                    end
                end
                dt[Y] = cr
                return cr, dv
            end
            local function dB(X, Y)
                if X == b.LocalPlayer then
                    return
                end
                if not Y or not Y:IsDescendantOf(dr) or not Y:FindFirstChild("HumanoidRootPart") then
                    return
                end
                local dC, dD = du(Y)
                e.RenderStepped:Connect(
                    function()
                        dD()
                    end
                )
                Y.AncestryChanged:Connect(
                    function()
                        if not Y:IsDescendantOf(dr) then
                            dC.Visible = false
                            dt[Y] = nil
                        end
                    end
                )
            end
            b.PlayerAdded:Connect(
                function(X)
                    X.CharacterAdded:Connect(
                        function(Y)
                            dB(X, Y)
                        end
                    )
                end
            )
            for W, X in ipairs(b:GetPlayers()) do
                dB(X, X.Character)
            end
            ds.InputBegan:Connect(
                function(dE)
                    if dE.KeyCode == settings.ModeSkipKey and not ds:GetFocusedTextBox() then
                        dn = dn % #dm + 1
                        for W, cr in pairs(dt) do
                            cr.Visible = settings.TracersVisible and Tracer
                        end
                    elseif dE.KeyCode == settings.DisableKey and not ds:GetFocusedTextBox() then
                        settings.TracersVisible = not settings.TracersVisible
                        for W, cr in pairs(dt) do
                            cr.Visible = settings.TracersVisible and Tracer
                        end
                    end
                end
            )
            if settings.DefaultSettings then
                settings.TeamCheck = false
                settings.TracersVisible = true
                settings.TracerColor = Color3.fromRGB(128, 0, 128)
                settings.TracerThickness = 1.8
                settings.TracerTransparency = 0.8
            end
        end
    }
)
local X, dF = game.Players.LocalPlayer, false
local function dG(Y)
    local dw = Y:FindFirstChild("Head")
    if dw then
        local dH = dw:FindFirstChild("face")
        if dH then
            dH:Destroy()
        end
    end
end
local function dI(ay)
    if ay:IsA("Accessory") or ay:IsA("Shirt") or ay:IsA("Pants") or ay.Name == "Face" then
        ay:Destroy()
    elseif ay:IsA("BasePart") then
        ay.Material = Enum.Material.ForceField
        ay.Color = Color3.fromRGB(225, 160, 255)
    end
end
local function dJ(Y)
    dG(Y)
    for W, ay in ipairs(Y:GetChildren()) do
        dI(ay)
    end
    Y.ChildAdded:Connect(dI)
end
local function dK(Y)
    wait(0.14)
    if dF then
        dJ(Y)
    end
end
K:AddToggle(
    {Name = "Self visual", Value = false, Callback = function(cY)
            dF = cY
            if cY then
                dK(X.Character or X.CharacterAdded:Wait())
            end
        end}
)
X.CharacterAdded:Connect(dK)
